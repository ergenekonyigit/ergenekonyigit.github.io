{"version":3,"sources":["webpack:///./node_modules/matter-js/build/matter.js"],"names":["factory","__WEBPACK_EXTERNAL_MODULE__27__","modules","installedModules","__webpack_require__","moduleId","exports","module","i","l","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","Common","_nextId","_seed","_nowStartTime","Date","extend","obj","deep","argsStart","deepClone","arguments","length","source","prop","constructor","clone","keys","push","values","path","begin","end","split","slice","set","val","parts","shuffle","array","j","Math","floor","random","temp","choose","choices","isElement","HTMLElement","nodeType","nodeName","isArray","toString","isFunction","isPlainObject","isString","clamp","min","max","sign","now","window","performance","webkitNow","_seededRandom","colorToNumber","colorString","replace","charAt","parseInt","logLevel","log","console","apply","concat","Array","info","warn","nextId","indexOf","haystack","needle","map","list","func","mapped","topologicalSort","graph","result","visited","node","_topologicalSort","neighbors","neighbor","chain","funcs","_chained","lastResult","args","chainPathBefore","base","chainPathAfter","Bounds","vertices","bounds","x","y","update","velocity","Infinity","vertex","contains","point","overlaps","boundsA","boundsB","translate","vector","shift","position","deltaX","deltaY","Vector","magnitude","sqrt","magnitudeSquared","rotate","angle","output","cos","sin","rotateAbout","normalise","dot","vectorA","vectorB","cross","cross3","vectorC","add","sub","mult","scalar","div","perp","negate","neg","atan2","_temp","Vertices","points","body","index","isInternal","fromPath","match","parseFloat","centre","area","mean","average","signed","abs","inertia","mass","numerator","denominator","v","vertice","dx","dy","nextVertice","scale","scaleX","scaleY","delta","chamfer","radius","quality","qualityMin","qualityMax","newVertices","prevVertex","nextVertex","currentRadius","prevNormal","nextNormal","diagonalRadius","pow","radiusVector","midNormal","scaledVertex","precision","theta","acos","clockwiseSort","sort","vertexA","vertexB","isConvex","k","z","flag","hull","upper","lower","pop","Events","on","eventNames","callback","names","events","off","join","callbacks","newCallbacks","trigger","event","eventClone","Composite","Body","options","id","type","parent","isModified","bodies","constraints","composites","label","plugin","setModified","composite","updateParents","updateChildren","childComposite","objects","addBody","addConstraint","addComposite","constraint","remove","removeBody","removeConstraint","removeComposite","compositeA","compositeB","removeCompositeAt","splice","removeBodyAt","removeConstraintAt","clear","keepStatic","filter","isStatic","allBodies","allConstraints","allComposites","move","rebase","translation","recursive","rotation","setPosition","Sleeping","Axes","_inertiaScale","_nextCollidingGroupId","_nextNonCollidingGroupId","_nextCategory","defaults","force","torque","positionImpulse","constraintImpulse","totalContacts","speed","angularSpeed","angularVelocity","isSensor","isSleeping","motion","sleepThreshold","density","restitution","friction","frictionStatic","frictionAir","collisionFilter","category","mask","group","slop","timeScale","render","visible","opacity","strokeStyle","fillStyle","lineWidth","sprite","xScale","yScale","xOffset","yOffset","circleRadius","positionPrev","anglePrev","axes","_original","_initProperties","nextGroup","isNonColliding","nextCategory","defaultFillStyle","defaultStrokeStyle","defaultLineWidth","settings","setStatic","setMass","setDensity","setInertia","setVertices","setAngle","setVelocity","setAngularVelocity","setParts","setCentre","part","inverseMass","inverseInertia","moment","fromVertices","autoHull","hullCentre","total","_totalProperties","relative","totalArea","totalInertia","deltaTime","correction","deltaTimeSquared","velocityPrevX","velocityPrevY","applyForce","offset","properties","_motionWakeThreshold","_motionSleepThreshold","_minBias","timeFactor","minMotion","maxMotion","sleepCounter","afterCollisions","pairs","pair","isActive","collision","bodyA","bodyB","sleepingBody","movingBody","wasSleeping","Constraint","_warming","_torqueDampen","_minLength","pointA","pointB","initialPointA","initialPointB","stiffness","damping","angularStiffness","angleA","angleB","anchors","preSolveAll","impulse","solveAll","fixedA","fixedB","solve","pointAWorld","pointBWorld","currentLength","share","normal","normalVelocity","relativeVelocity","difference","massTotal","resistanceTotal","zero","postSolveAll","Pair","Contact","timestamp","parentA","parentB","contacts","activeContacts","separation","confirmedActive","timeCreated","timeUpdated","supports","collided","support","contactId","contact","depth","setActive","Render","Grid","Mouse","_requestAnimationFrame","_cancelAnimationFrame","requestAnimationFrame","webkitRequestAnimationFrame","mozRequestAnimationFrame","msRequestAnimationFrame","setTimeout","cancelAnimationFrame","mozCancelAnimationFrame","webkitCancelAnimationFrame","msCancelAnimationFrame","controller","engine","element","canvas","mouse","frameRequestId","width","height","pixelRatio","background","wireframeBackground","hasBounds","enabled","wireframes","showSleeping","showDebug","showBroadphase","showBounds","showVelocity","showCollisions","showSeparations","showAxes","showPositions","showAngleIndicator","showIds","showShadows","showVertexNumbers","showConvexHulls","showInternalEdges","showMousePosition","_createCanvas","context","getContext","textures","setPixelRatio","appendChild","parentNode","run","loop","time","world","stop","_getPixelRatio","setAttribute","style","lookAt","padding","center","viewHeight","outerRatio","innerRatio","setScale","setOffset","startViewTransform","boundsWidth","boundsHeight","boundsScaleX","boundsScaleY","setTransform","endViewTransform","timing","currentBackground","_applyBackground","globalCompositeOperation","fillRect","enableSleeping","bodyConvexHulls","bodyWireframes","bodyBounds","bodyAxes","bodyPositions","bodyVelocity","bodyIds","separations","collisions","vertexNumbers","mousePosition","broadphase","grid","debug","metrics","debugTimestamp","text","round","fps","extended","toFixed","buckets","broadEff","midEff","narrowEff","debugString","font","fillText","start","beginPath","arc","PI","closePath","moveTo","coils","ceil","lineTo","stroke","fill","bodyShadows","distanceX","distanceY","distance","shadowColor","shadowOffsetX","shadowOffsetY","shadowBlur","globalAlpha","texture","_getTexture","drawImage","rect","axis","normalPosX","normalPosY","penetration","bucketKeys","bucketId","region","bucketWidth","bucketHeight","inspector","selected","item","data","setLineDash","selectStart","selectBounds","document","createElement","oncontextmenu","onselectstart","devicePixelRatio","webkitBackingStorePixelRatio","mozBackingStorePixelRatio","msBackingStorePixelRatio","oBackingStorePixelRatio","backingStorePixelRatio","imagePath","image","Image","src","cssBackground","test","backgroundSize","Detector","detector","pairsList","forceUpdate","col","row","bucket","gridChanged","broadphaseTests","newRegion","_getRegion","union","_regionUnion","startCol","endCol","startRow","endRow","_getBucketId","isInsideNewRegion","isInsideOldRegion","_bucketRemoveBody","_createBucket","_bucketAddBody","_createActivePairsList","regionA","regionB","_createRegion","column","pairId","pairKeys","SAT","broadphasePairs","pairsTable","table","canCollide","midphaseTests","partA","partB","previousCollision","collides","narrowphaseTests","reused","narrowReuseCount","narrowDetections","filterA","filterB","overlapAB","overlapBA","minOverlap","canReusePrevCol","axisBodyA","axisBody","axisBodyB","axisNumber","_overlapAxes","overlap","tangent","verticesB","_findSupports","verticesA","projectionA","projectionB","Number","MAX_VALUE","_projectToAxis","projection","nearestDistance","vertexToBody","bodyAPosition","absolute","mousedownPosition","mouseupPosition","wheelDelta","button","getAttribute","sourceEvents","mousemove","mousedown","mouseup","mousewheel","_getRelativeMousePosition","changedTouches","preventDefault","detail","setElement","addEventListener","clearSourceEvents","elementBounds","getBoundingClientRect","rootNode","documentElement","scrollX","undefined","pageXOffset","scrollLeft","scrollY","pageYOffset","scrollTop","touches","pageX","left","pageY","top","clientWidth","clientHeight","gradient","xx","Bodies","_decompWarned","rectangle","trapezoid","slope","verticesPath","x1","x2","x3","circle","maxSides","sides","polygon","yy","vertexSets","flagInternal","removeCollinear","minimumArea","removeDuplicatePoints","decomp","canDecomp","e","Boolean","quickDecomp","concave","makeCCW","removeCollinearPoints","decomposed","chunkVertices","pav","pbv","da","db","Plugin","_registry","register","isPlugin","registered","pluginVersion","versionParse","version","number","registeredVersion","resolve","dependency","dependencyParse","range","install","isUsed","used","isFor","parsed","for","versionSatisfies","use","plugins","uses","dependencies","sortedDependencies","status","_warned","tracked","parsedBase","resolved","pattern","exec","major","minor","patch","isRange","operator","prerelease","normalImpulse","tangentImpulse","World","gravity","Pairs","_pairMaxIdleLife","collisionStart","collisionActive","collisionEnd","removeOld","pairIndex","indexesToRemove","Resolver","_restingThresh","_restingThreshTangent","_positionDampen","_positionWarming","_frictionNormalMultiplier","preSolvePosition","activeCount","solvePosition","bodyBtoA","contactShare","tempA","tempB","tempC","tempD","postSolvePosition","preSolveVelocity","contactVertex","solveVelocity","timeScaleSquared","tempE","offsetA","offsetB","velocityPointA","velocityPointB","tangentVelocity","tangentSpeed","tangentVelocityDirection","normalForce","maxFriction","oAcN","oBcN","contactNormalImpulse","contactTangentImpulse","Engine","Metrics","positionIterations","velocityIterations","constraintIterations","renderDefaults","reset","_bodiesApplyGravity","_bodiesUpdate","_bodiesClearForces","merge","engineA","engineB","gravityScale","worldBounds","narrowReuse","Matter","Query","MouseConstraint","Runner","Composites","Svg","RenderPixi","before","after","ray","startPoint","endPoint","rayWidth","rayAngle","rayLength","rayX","rayY","outside","Error","code","mouseConstraint","_triggerEvents","mouseEvents","_frameTimeout","clearTimeout","runner","deltaSampleSize","counterTimestamp","frameCounter","deltaHistory","timePrev","timeScalePrev","isFixed","deltaMin","deltaMax","tick","stack","columns","rows","columnGap","rowGap","lastBody","maxHeight","bodyHeight","bodyWidth","xOffsetA","yOffsetA","xOffsetB","yOffsetB","bodyAHeight","bodyAWidth","bodyBHeight","mesh","crossBrace","bodyC","pyramid","actualRows","lastBodyWidth","newtonsCradle","size","car","wheelSize","wheelAOffset","wheelBOffset","wheelA","wheelB","axelA","axelB","softBody","particleRadius","particleOptions","constraintOptions","pathToVertices","sampleLength","il","segment","segments","segmentsQueue","lastSegment","lastPoint","lx","ly","addPoint","px","py","pathSegType","isRelative","addSegmentPoint","segType","pathSegTypeAsLetter","toUpperCase","_svgPathToAbsolute","getTotalLength","pathSegList","numberOfItems","getItem","getPathSegAtLength","getPointAtLength","x0","y0","y1","y2","segs","len","seg","replaceItem","createSVGPathSegMovetoAbs","createSVGPathSegLinetoAbs","createSVGPathSegLinetoHorizontalAbs","createSVGPathSegLinetoVerticalAbs","createSVGPathSegCurvetoCubicAbs","createSVGPathSegCurvetoCubicSmoothAbs","createSVGPathSegCurvetoQuadraticAbs","createSVGPathSegCurvetoQuadraticSmoothAbs","createSVGPathSegArcAbs","r1","r2","largeArcFlag","sweepFlag","renderer","container","spriteContainer","pixiOptions","transparent","view","antialias","backgroundColor","PIXI","WebGLRenderer","Container","sprites","primitives","addChild","children","removeChild","bgSprite","addChildAt","setBackground","isColor","color","Sprite","constraintRender","primitiveId","primitive","Graphics","beginFill","lineStyle","endFill","bodyRender","spriteId","_createBodySprite","_createBodyPrimitive","initialAngle","texturePath","anchor","strokeStyleIndicator","strokeStyleWireframe","strokeStyleWireframeIndicator","Texture","fromImage"],"mappings":"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","file":"4544e8b5-9ea68cad9b766b05e684.js","sourcesContent":["/*!\n * matter-js 0.16.1 by @liabru 2021-01-31\n * http://brm.io/matter-js/\n * License MIT\n * \n * The MIT License (MIT)\n * \n * Copyright (c) Liam Brummitt and contributors.\n * \n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n * \n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n * \n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\n(function webpackUniversalModuleDefinition(root, factory) {\n  if (typeof exports === 'object' && typeof module === 'object') module.exports = factory(function webpackLoadOptionalExternalModule() {\n    try {\n      return require(\"poly-decomp\");\n    } catch (e) {}\n  }());else if (typeof define === 'function' && define.amd) define(\"Matter\", [\"poly-decomp\"], factory);else if (typeof exports === 'object') exports[\"Matter\"] = factory(function webpackLoadOptionalExternalModule() {\n    try {\n      return require(\"poly-decomp\");\n    } catch (e) {}\n  }());else root[\"Matter\"] = factory(root[\"decomp\"]);\n})(this, function (__WEBPACK_EXTERNAL_MODULE__27__) {\n  return (\n    /******/\n    function (modules) {\n      // webpackBootstrap\n\n      /******/\n      // The module cache\n\n      /******/\n      var installedModules = {};\n      /******/\n\n      /******/\n      // The require function\n\n      /******/\n\n      function __webpack_require__(moduleId) {\n        /******/\n\n        /******/\n        // Check if module is in cache\n\n        /******/\n        if (installedModules[moduleId]) {\n          /******/\n          return installedModules[moduleId].exports;\n          /******/\n        }\n        /******/\n        // Create a new module (and put it into the cache)\n\n        /******/\n\n\n        var module = installedModules[moduleId] = {\n          /******/\n          i: moduleId,\n\n          /******/\n          l: false,\n\n          /******/\n          exports: {}\n          /******/\n\n        };\n        /******/\n\n        /******/\n        // Execute the module function\n\n        /******/\n\n        modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n        /******/\n\n        /******/\n        // Flag the module as loaded\n\n        /******/\n\n        module.l = true;\n        /******/\n\n        /******/\n        // Return the exports of the module\n\n        /******/\n\n        return module.exports;\n        /******/\n      }\n      /******/\n\n      /******/\n\n      /******/\n      // expose the modules object (__webpack_modules__)\n\n      /******/\n\n\n      __webpack_require__.m = modules;\n      /******/\n\n      /******/\n      // expose the module cache\n\n      /******/\n\n      __webpack_require__.c = installedModules;\n      /******/\n\n      /******/\n      // define getter function for harmony exports\n\n      /******/\n\n      __webpack_require__.d = function (exports, name, getter) {\n        /******/\n        if (!__webpack_require__.o(exports, name)) {\n          /******/\n          Object.defineProperty(exports, name, {\n            enumerable: true,\n            get: getter\n          });\n          /******/\n        }\n        /******/\n\n      };\n      /******/\n\n      /******/\n      // define __esModule on exports\n\n      /******/\n\n\n      __webpack_require__.r = function (exports) {\n        /******/\n        if (typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n          /******/\n          Object.defineProperty(exports, Symbol.toStringTag, {\n            value: 'Module'\n          });\n          /******/\n        }\n        /******/\n\n\n        Object.defineProperty(exports, '__esModule', {\n          value: true\n        });\n        /******/\n      };\n      /******/\n\n      /******/\n      // create a fake namespace object\n\n      /******/\n      // mode & 1: value is a module id, require it\n\n      /******/\n      // mode & 2: merge all properties of value into the ns\n\n      /******/\n      // mode & 4: return value when already ns object\n\n      /******/\n      // mode & 8|1: behave like require\n\n      /******/\n\n\n      __webpack_require__.t = function (value, mode) {\n        /******/\n        if (mode & 1) value = __webpack_require__(value);\n        /******/\n\n        if (mode & 8) return value;\n        /******/\n\n        if (mode & 4 && typeof value === 'object' && value && value.__esModule) return value;\n        /******/\n\n        var ns = Object.create(null);\n        /******/\n\n        __webpack_require__.r(ns);\n        /******/\n\n\n        Object.defineProperty(ns, 'default', {\n          enumerable: true,\n          value: value\n        });\n        /******/\n\n        if (mode & 2 && typeof value != 'string') for (var key in value) {\n          __webpack_require__.d(ns, key, function (key) {\n            return value[key];\n          }.bind(null, key));\n        }\n        /******/\n\n        return ns;\n        /******/\n      };\n      /******/\n\n      /******/\n      // getDefaultExport function for compatibility with non-harmony modules\n\n      /******/\n\n\n      __webpack_require__.n = function (module) {\n        /******/\n        var getter = module && module.__esModule ?\n        /******/\n        function getDefault() {\n          return module['default'];\n        } :\n        /******/\n        function getModuleExports() {\n          return module;\n        };\n        /******/\n\n        __webpack_require__.d(getter, 'a', getter);\n        /******/\n\n\n        return getter;\n        /******/\n      };\n      /******/\n\n      /******/\n      // Object.prototype.hasOwnProperty.call\n\n      /******/\n\n\n      __webpack_require__.o = function (object, property) {\n        return Object.prototype.hasOwnProperty.call(object, property);\n      };\n      /******/\n\n      /******/\n      // __webpack_public_path__\n\n      /******/\n\n\n      __webpack_require__.p = \"\";\n      /******/\n\n      /******/\n\n      /******/\n      // Load entry module and return exports\n\n      /******/\n\n      return __webpack_require__(__webpack_require__.s = 24);\n      /******/\n    }(\n    /************************************************************************/\n\n    /******/\n    [\n    /* 0 */\n\n    /***/\n    function (module, exports) {\n      /**\n      * The `Matter.Common` module contains utility functions that are common to all modules.\n      *\n      * @class Common\n      */\n      var Common = {};\n      module.exports = Common;\n\n      (function () {\n        Common._nextId = 0;\n        Common._seed = 0;\n        Common._nowStartTime = +new Date();\n        /**\n         * Extends the object in the first argument using the object in the second argument.\n         * @method extend\n         * @param {} obj\n         * @param {boolean} deep\n         * @return {} obj extended\n         */\n\n        Common.extend = function (obj, deep) {\n          var argsStart, args, deepClone;\n\n          if (typeof deep === 'boolean') {\n            argsStart = 2;\n            deepClone = deep;\n          } else {\n            argsStart = 1;\n            deepClone = true;\n          }\n\n          for (var i = argsStart; i < arguments.length; i++) {\n            var source = arguments[i];\n\n            if (source) {\n              for (var prop in source) {\n                if (deepClone && source[prop] && source[prop].constructor === Object) {\n                  if (!obj[prop] || obj[prop].constructor === Object) {\n                    obj[prop] = obj[prop] || {};\n                    Common.extend(obj[prop], deepClone, source[prop]);\n                  } else {\n                    obj[prop] = source[prop];\n                  }\n                } else {\n                  obj[prop] = source[prop];\n                }\n              }\n            }\n          }\n\n          return obj;\n        };\n        /**\n         * Creates a new clone of the object, if deep is true references will also be cloned.\n         * @method clone\n         * @param {} obj\n         * @param {bool} deep\n         * @return {} obj cloned\n         */\n\n\n        Common.clone = function (obj, deep) {\n          return Common.extend({}, deep, obj);\n        };\n        /**\n         * Returns the list of keys for the given object.\n         * @method keys\n         * @param {} obj\n         * @return {string[]} keys\n         */\n\n\n        Common.keys = function (obj) {\n          if (Object.keys) return Object.keys(obj); // avoid hasOwnProperty for performance\n\n          var keys = [];\n\n          for (var key in obj) {\n            keys.push(key);\n          }\n\n          return keys;\n        };\n        /**\n         * Returns the list of values for the given object.\n         * @method values\n         * @param {} obj\n         * @return {array} Array of the objects property values\n         */\n\n\n        Common.values = function (obj) {\n          var values = [];\n\n          if (Object.keys) {\n            var keys = Object.keys(obj);\n\n            for (var i = 0; i < keys.length; i++) {\n              values.push(obj[keys[i]]);\n            }\n\n            return values;\n          } // avoid hasOwnProperty for performance\n\n\n          for (var key in obj) {\n            values.push(obj[key]);\n          }\n\n          return values;\n        };\n        /**\n         * Gets a value from `base` relative to the `path` string.\n         * @method get\n         * @param {} obj The base object\n         * @param {string} path The path relative to `base`, e.g. 'Foo.Bar.baz'\n         * @param {number} [begin] Path slice begin\n         * @param {number} [end] Path slice end\n         * @return {} The object at the given path\n         */\n\n\n        Common.get = function (obj, path, begin, end) {\n          path = path.split('.').slice(begin, end);\n\n          for (var i = 0; i < path.length; i += 1) {\n            obj = obj[path[i]];\n          }\n\n          return obj;\n        };\n        /**\n         * Sets a value on `base` relative to the given `path` string.\n         * @method set\n         * @param {} obj The base object\n         * @param {string} path The path relative to `base`, e.g. 'Foo.Bar.baz'\n         * @param {} val The value to set\n         * @param {number} [begin] Path slice begin\n         * @param {number} [end] Path slice end\n         * @return {} Pass through `val` for chaining\n         */\n\n\n        Common.set = function (obj, path, val, begin, end) {\n          var parts = path.split('.').slice(begin, end);\n          Common.get(obj, path, 0, -1)[parts[parts.length - 1]] = val;\n          return val;\n        };\n        /**\n         * Shuffles the given array in-place.\n         * The function uses a seeded random generator.\n         * @method shuffle\n         * @param {array} array\n         * @return {array} array shuffled randomly\n         */\n\n\n        Common.shuffle = function (array) {\n          for (var i = array.length - 1; i > 0; i--) {\n            var j = Math.floor(Common.random() * (i + 1));\n            var temp = array[i];\n            array[i] = array[j];\n            array[j] = temp;\n          }\n\n          return array;\n        };\n        /**\n         * Randomly chooses a value from a list with equal probability.\n         * The function uses a seeded random generator.\n         * @method choose\n         * @param {array} choices\n         * @return {object} A random choice object from the array\n         */\n\n\n        Common.choose = function (choices) {\n          return choices[Math.floor(Common.random() * choices.length)];\n        };\n        /**\n         * Returns true if the object is a HTMLElement, otherwise false.\n         * @method isElement\n         * @param {object} obj\n         * @return {boolean} True if the object is a HTMLElement, otherwise false\n         */\n\n\n        Common.isElement = function (obj) {\n          if (typeof HTMLElement !== 'undefined') {\n            return obj instanceof HTMLElement;\n          }\n\n          return !!(obj && obj.nodeType && obj.nodeName);\n        };\n        /**\n         * Returns true if the object is an array.\n         * @method isArray\n         * @param {object} obj\n         * @return {boolean} True if the object is an array, otherwise false\n         */\n\n\n        Common.isArray = function (obj) {\n          return Object.prototype.toString.call(obj) === '[object Array]';\n        };\n        /**\n         * Returns true if the object is a function.\n         * @method isFunction\n         * @param {object} obj\n         * @return {boolean} True if the object is a function, otherwise false\n         */\n\n\n        Common.isFunction = function (obj) {\n          return typeof obj === \"function\";\n        };\n        /**\n         * Returns true if the object is a plain object.\n         * @method isPlainObject\n         * @param {object} obj\n         * @return {boolean} True if the object is a plain object, otherwise false\n         */\n\n\n        Common.isPlainObject = function (obj) {\n          return typeof obj === 'object' && obj.constructor === Object;\n        };\n        /**\n         * Returns true if the object is a string.\n         * @method isString\n         * @param {object} obj\n         * @return {boolean} True if the object is a string, otherwise false\n         */\n\n\n        Common.isString = function (obj) {\n          return toString.call(obj) === '[object String]';\n        };\n        /**\n         * Returns the given value clamped between a minimum and maximum value.\n         * @method clamp\n         * @param {number} value\n         * @param {number} min\n         * @param {number} max\n         * @return {number} The value clamped between min and max inclusive\n         */\n\n\n        Common.clamp = function (value, min, max) {\n          if (value < min) return min;\n          if (value > max) return max;\n          return value;\n        };\n        /**\n         * Returns the sign of the given value.\n         * @method sign\n         * @param {number} value\n         * @return {number} -1 if negative, +1 if 0 or positive\n         */\n\n\n        Common.sign = function (value) {\n          return value < 0 ? -1 : 1;\n        };\n        /**\n         * Returns the current timestamp since the time origin (e.g. from page load).\n         * The result will be high-resolution including decimal places if available.\n         * @method now\n         * @return {number} the current timestamp\n         */\n\n\n        Common.now = function () {\n          if (typeof window !== 'undefined' && window.performance) {\n            if (window.performance.now) {\n              return window.performance.now();\n            } else if (window.performance.webkitNow) {\n              return window.performance.webkitNow();\n            }\n          }\n\n          return new Date() - Common._nowStartTime;\n        };\n        /**\n         * Returns a random value between a minimum and a maximum value inclusive.\n         * The function uses a seeded random generator.\n         * @method random\n         * @param {number} min\n         * @param {number} max\n         * @return {number} A random number between min and max inclusive\n         */\n\n\n        Common.random = function (min, max) {\n          min = typeof min !== \"undefined\" ? min : 0;\n          max = typeof max !== \"undefined\" ? max : 1;\n          return min + _seededRandom() * (max - min);\n        };\n\n        var _seededRandom = function _seededRandom() {\n          // https://en.wikipedia.org/wiki/Linear_congruential_generator\n          Common._seed = (Common._seed * 9301 + 49297) % 233280;\n          return Common._seed / 233280;\n        };\n        /**\n         * Converts a CSS hex colour string into an integer.\n         * @method colorToNumber\n         * @param {string} colorString\n         * @return {number} An integer representing the CSS hex string\n         */\n\n\n        Common.colorToNumber = function (colorString) {\n          colorString = colorString.replace('#', '');\n\n          if (colorString.length == 3) {\n            colorString = colorString.charAt(0) + colorString.charAt(0) + colorString.charAt(1) + colorString.charAt(1) + colorString.charAt(2) + colorString.charAt(2);\n          }\n\n          return parseInt(colorString, 16);\n        };\n        /**\n         * The console logging level to use, where each level includes all levels above and excludes the levels below.\n         * The default level is 'debug' which shows all console messages.  \n         *\n         * Possible level values are:\n         * - 0 = None\n         * - 1 = Debug\n         * - 2 = Info\n         * - 3 = Warn\n         * - 4 = Error\n         * @property Common.logLevel\n         * @type {Number}\n         * @default 1\n         */\n\n\n        Common.logLevel = 1;\n        /**\n         * Shows a `console.log` message only if the current `Common.logLevel` allows it.\n         * The message will be prefixed with 'matter-js' to make it easily identifiable.\n         * @method log\n         * @param ...objs {} The objects to log.\n         */\n\n        Common.log = function () {\n          if (console && Common.logLevel > 0 && Common.logLevel <= 3) {\n            console.log.apply(console, ['matter-js:'].concat(Array.prototype.slice.call(arguments)));\n          }\n        };\n        /**\n         * Shows a `console.info` message only if the current `Common.logLevel` allows it.\n         * The message will be prefixed with 'matter-js' to make it easily identifiable.\n         * @method info\n         * @param ...objs {} The objects to log.\n         */\n\n\n        Common.info = function () {\n          if (console && Common.logLevel > 0 && Common.logLevel <= 2) {\n            console.info.apply(console, ['matter-js:'].concat(Array.prototype.slice.call(arguments)));\n          }\n        };\n        /**\n         * Shows a `console.warn` message only if the current `Common.logLevel` allows it.\n         * The message will be prefixed with 'matter-js' to make it easily identifiable.\n         * @method warn\n         * @param ...objs {} The objects to log.\n         */\n\n\n        Common.warn = function () {\n          if (console && Common.logLevel > 0 && Common.logLevel <= 3) {\n            console.warn.apply(console, ['matter-js:'].concat(Array.prototype.slice.call(arguments)));\n          }\n        };\n        /**\n         * Returns the next unique sequential ID.\n         * @method nextId\n         * @return {Number} Unique sequential ID\n         */\n\n\n        Common.nextId = function () {\n          return Common._nextId++;\n        };\n        /**\n         * A cross browser compatible indexOf implementation.\n         * @method indexOf\n         * @param {array} haystack\n         * @param {object} needle\n         * @return {number} The position of needle in haystack, otherwise -1.\n         */\n\n\n        Common.indexOf = function (haystack, needle) {\n          if (haystack.indexOf) return haystack.indexOf(needle);\n\n          for (var i = 0; i < haystack.length; i++) {\n            if (haystack[i] === needle) return i;\n          }\n\n          return -1;\n        };\n        /**\n         * A cross browser compatible array map implementation.\n         * @method map\n         * @param {array} list\n         * @param {function} func\n         * @return {array} Values from list transformed by func.\n         */\n\n\n        Common.map = function (list, func) {\n          if (list.map) {\n            return list.map(func);\n          }\n\n          var mapped = [];\n\n          for (var i = 0; i < list.length; i += 1) {\n            mapped.push(func(list[i]));\n          }\n\n          return mapped;\n        };\n        /**\n         * Takes a directed graph and returns the partially ordered set of vertices in topological order.\n         * Circular dependencies are allowed.\n         * @method topologicalSort\n         * @param {object} graph\n         * @return {array} Partially ordered set of vertices in topological order.\n         */\n\n\n        Common.topologicalSort = function (graph) {\n          // https://github.com/mgechev/javascript-algorithms\n          // Copyright (c) Minko Gechev (MIT license)\n          // Modifications: tidy formatting and naming\n          var result = [],\n              visited = [],\n              temp = [];\n\n          for (var node in graph) {\n            if (!visited[node] && !temp[node]) {\n              Common._topologicalSort(node, visited, temp, graph, result);\n            }\n          }\n\n          return result;\n        };\n\n        Common._topologicalSort = function (node, visited, temp, graph, result) {\n          var neighbors = graph[node] || [];\n          temp[node] = true;\n\n          for (var i = 0; i < neighbors.length; i += 1) {\n            var neighbor = neighbors[i];\n\n            if (temp[neighbor]) {\n              // skip circular dependencies\n              continue;\n            }\n\n            if (!visited[neighbor]) {\n              Common._topologicalSort(neighbor, visited, temp, graph, result);\n            }\n          }\n\n          temp[node] = false;\n          visited[node] = true;\n          result.push(node);\n        };\n        /**\n         * Takes _n_ functions as arguments and returns a new function that calls them in order.\n         * The arguments applied when calling the new function will also be applied to every function passed.\n         * The value of `this` refers to the last value returned in the chain that was not `undefined`.\n         * Therefore if a passed function does not return a value, the previously returned value is maintained.\n         * After all passed functions have been called the new function returns the last returned value (if any).\n         * If any of the passed functions are a chain, then the chain will be flattened.\n         * @method chain\n         * @param ...funcs {function} The functions to chain.\n         * @return {function} A new function that calls the passed functions in order.\n         */\n\n\n        Common.chain = function () {\n          var funcs = [];\n\n          for (var i = 0; i < arguments.length; i += 1) {\n            var func = arguments[i];\n\n            if (func._chained) {\n              // flatten already chained functions\n              funcs.push.apply(funcs, func._chained);\n            } else {\n              funcs.push(func);\n            }\n          }\n\n          var chain = function chain() {\n            // https://github.com/GoogleChrome/devtools-docs/issues/53#issuecomment-51941358\n            var lastResult,\n                args = new Array(arguments.length);\n\n            for (var i = 0, l = arguments.length; i < l; i++) {\n              args[i] = arguments[i];\n            }\n\n            for (i = 0; i < funcs.length; i += 1) {\n              var result = funcs[i].apply(lastResult, args);\n\n              if (typeof result !== 'undefined') {\n                lastResult = result;\n              }\n            }\n\n            return lastResult;\n          };\n\n          chain._chained = funcs;\n          return chain;\n        };\n        /**\n         * Chains a function to excute before the original function on the given `path` relative to `base`.\n         * See also docs for `Common.chain`.\n         * @method chainPathBefore\n         * @param {} base The base object\n         * @param {string} path The path relative to `base`\n         * @param {function} func The function to chain before the original\n         * @return {function} The chained function that replaced the original\n         */\n\n\n        Common.chainPathBefore = function (base, path, func) {\n          return Common.set(base, path, Common.chain(func, Common.get(base, path)));\n        };\n        /**\n         * Chains a function to excute after the original function on the given `path` relative to `base`.\n         * See also docs for `Common.chain`.\n         * @method chainPathAfter\n         * @param {} base The base object\n         * @param {string} path The path relative to `base`\n         * @param {function} func The function to chain after the original\n         * @return {function} The chained function that replaced the original\n         */\n\n\n        Common.chainPathAfter = function (base, path, func) {\n          return Common.set(base, path, Common.chain(Common.get(base, path), func));\n        };\n      })();\n      /***/\n\n    },\n    /* 1 */\n\n    /***/\n    function (module, exports) {\n      /**\n      * The `Matter.Bounds` module contains methods for creating and manipulating axis-aligned bounding boxes (AABB).\n      *\n      * @class Bounds\n      */\n      var Bounds = {};\n      module.exports = Bounds;\n\n      (function () {\n        /**\n         * Creates a new axis-aligned bounding box (AABB) for the given vertices.\n         * @method create\n         * @param {vertices} vertices\n         * @return {bounds} A new bounds object\n         */\n        Bounds.create = function (vertices) {\n          var bounds = {\n            min: {\n              x: 0,\n              y: 0\n            },\n            max: {\n              x: 0,\n              y: 0\n            }\n          };\n          if (vertices) Bounds.update(bounds, vertices);\n          return bounds;\n        };\n        /**\n         * Updates bounds using the given vertices and extends the bounds given a velocity.\n         * @method update\n         * @param {bounds} bounds\n         * @param {vertices} vertices\n         * @param {vector} velocity\n         */\n\n\n        Bounds.update = function (bounds, vertices, velocity) {\n          bounds.min.x = Infinity;\n          bounds.max.x = -Infinity;\n          bounds.min.y = Infinity;\n          bounds.max.y = -Infinity;\n\n          for (var i = 0; i < vertices.length; i++) {\n            var vertex = vertices[i];\n            if (vertex.x > bounds.max.x) bounds.max.x = vertex.x;\n            if (vertex.x < bounds.min.x) bounds.min.x = vertex.x;\n            if (vertex.y > bounds.max.y) bounds.max.y = vertex.y;\n            if (vertex.y < bounds.min.y) bounds.min.y = vertex.y;\n          }\n\n          if (velocity) {\n            if (velocity.x > 0) {\n              bounds.max.x += velocity.x;\n            } else {\n              bounds.min.x += velocity.x;\n            }\n\n            if (velocity.y > 0) {\n              bounds.max.y += velocity.y;\n            } else {\n              bounds.min.y += velocity.y;\n            }\n          }\n        };\n        /**\n         * Returns true if the bounds contains the given point.\n         * @method contains\n         * @param {bounds} bounds\n         * @param {vector} point\n         * @return {boolean} True if the bounds contain the point, otherwise false\n         */\n\n\n        Bounds.contains = function (bounds, point) {\n          return point.x >= bounds.min.x && point.x <= bounds.max.x && point.y >= bounds.min.y && point.y <= bounds.max.y;\n        };\n        /**\n         * Returns true if the two bounds intersect.\n         * @method overlaps\n         * @param {bounds} boundsA\n         * @param {bounds} boundsB\n         * @return {boolean} True if the bounds overlap, otherwise false\n         */\n\n\n        Bounds.overlaps = function (boundsA, boundsB) {\n          return boundsA.min.x <= boundsB.max.x && boundsA.max.x >= boundsB.min.x && boundsA.max.y >= boundsB.min.y && boundsA.min.y <= boundsB.max.y;\n        };\n        /**\n         * Translates the bounds by the given vector.\n         * @method translate\n         * @param {bounds} bounds\n         * @param {vector} vector\n         */\n\n\n        Bounds.translate = function (bounds, vector) {\n          bounds.min.x += vector.x;\n          bounds.max.x += vector.x;\n          bounds.min.y += vector.y;\n          bounds.max.y += vector.y;\n        };\n        /**\n         * Shifts the bounds to the given position.\n         * @method shift\n         * @param {bounds} bounds\n         * @param {vector} position\n         */\n\n\n        Bounds.shift = function (bounds, position) {\n          var deltaX = bounds.max.x - bounds.min.x,\n              deltaY = bounds.max.y - bounds.min.y;\n          bounds.min.x = position.x;\n          bounds.max.x = position.x + deltaX;\n          bounds.min.y = position.y;\n          bounds.max.y = position.y + deltaY;\n        };\n      })();\n      /***/\n\n    },\n    /* 2 */\n\n    /***/\n    function (module, exports) {\n      /**\n      * The `Matter.Vector` module contains methods for creating and manipulating vectors.\n      * Vectors are the basis of all the geometry related operations in the engine.\n      * A `Matter.Vector` object is of the form `{ x: 0, y: 0 }`.\n      *\n      * See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n      *\n      * @class Vector\n      */\n      // TODO: consider params for reusing vector objects\n      var Vector = {};\n      module.exports = Vector;\n\n      (function () {\n        /**\n         * Creates a new vector.\n         * @method create\n         * @param {number} x\n         * @param {number} y\n         * @return {vector} A new vector\n         */\n        Vector.create = function (x, y) {\n          return {\n            x: x || 0,\n            y: y || 0\n          };\n        };\n        /**\n         * Returns a new vector with `x` and `y` copied from the given `vector`.\n         * @method clone\n         * @param {vector} vector\n         * @return {vector} A new cloned vector\n         */\n\n\n        Vector.clone = function (vector) {\n          return {\n            x: vector.x,\n            y: vector.y\n          };\n        };\n        /**\n         * Returns the magnitude (length) of a vector.\n         * @method magnitude\n         * @param {vector} vector\n         * @return {number} The magnitude of the vector\n         */\n\n\n        Vector.magnitude = function (vector) {\n          return Math.sqrt(vector.x * vector.x + vector.y * vector.y);\n        };\n        /**\n         * Returns the magnitude (length) of a vector (therefore saving a `sqrt` operation).\n         * @method magnitudeSquared\n         * @param {vector} vector\n         * @return {number} The squared magnitude of the vector\n         */\n\n\n        Vector.magnitudeSquared = function (vector) {\n          return vector.x * vector.x + vector.y * vector.y;\n        };\n        /**\n         * Rotates the vector about (0, 0) by specified angle.\n         * @method rotate\n         * @param {vector} vector\n         * @param {number} angle\n         * @param {vector} [output]\n         * @return {vector} The vector rotated about (0, 0)\n         */\n\n\n        Vector.rotate = function (vector, angle, output) {\n          var cos = Math.cos(angle),\n              sin = Math.sin(angle);\n          if (!output) output = {};\n          var x = vector.x * cos - vector.y * sin;\n          output.y = vector.x * sin + vector.y * cos;\n          output.x = x;\n          return output;\n        };\n        /**\n         * Rotates the vector about a specified point by specified angle.\n         * @method rotateAbout\n         * @param {vector} vector\n         * @param {number} angle\n         * @param {vector} point\n         * @param {vector} [output]\n         * @return {vector} A new vector rotated about the point\n         */\n\n\n        Vector.rotateAbout = function (vector, angle, point, output) {\n          var cos = Math.cos(angle),\n              sin = Math.sin(angle);\n          if (!output) output = {};\n          var x = point.x + ((vector.x - point.x) * cos - (vector.y - point.y) * sin);\n          output.y = point.y + ((vector.x - point.x) * sin + (vector.y - point.y) * cos);\n          output.x = x;\n          return output;\n        };\n        /**\n         * Normalises a vector (such that its magnitude is `1`).\n         * @method normalise\n         * @param {vector} vector\n         * @return {vector} A new vector normalised\n         */\n\n\n        Vector.normalise = function (vector) {\n          var magnitude = Vector.magnitude(vector);\n          if (magnitude === 0) return {\n            x: 0,\n            y: 0\n          };\n          return {\n            x: vector.x / magnitude,\n            y: vector.y / magnitude\n          };\n        };\n        /**\n         * Returns the dot-product of two vectors.\n         * @method dot\n         * @param {vector} vectorA\n         * @param {vector} vectorB\n         * @return {number} The dot product of the two vectors\n         */\n\n\n        Vector.dot = function (vectorA, vectorB) {\n          return vectorA.x * vectorB.x + vectorA.y * vectorB.y;\n        };\n        /**\n         * Returns the cross-product of two vectors.\n         * @method cross\n         * @param {vector} vectorA\n         * @param {vector} vectorB\n         * @return {number} The cross product of the two vectors\n         */\n\n\n        Vector.cross = function (vectorA, vectorB) {\n          return vectorA.x * vectorB.y - vectorA.y * vectorB.x;\n        };\n        /**\n         * Returns the cross-product of three vectors.\n         * @method cross3\n         * @param {vector} vectorA\n         * @param {vector} vectorB\n         * @param {vector} vectorC\n         * @return {number} The cross product of the three vectors\n         */\n\n\n        Vector.cross3 = function (vectorA, vectorB, vectorC) {\n          return (vectorB.x - vectorA.x) * (vectorC.y - vectorA.y) - (vectorB.y - vectorA.y) * (vectorC.x - vectorA.x);\n        };\n        /**\n         * Adds the two vectors.\n         * @method add\n         * @param {vector} vectorA\n         * @param {vector} vectorB\n         * @param {vector} [output]\n         * @return {vector} A new vector of vectorA and vectorB added\n         */\n\n\n        Vector.add = function (vectorA, vectorB, output) {\n          if (!output) output = {};\n          output.x = vectorA.x + vectorB.x;\n          output.y = vectorA.y + vectorB.y;\n          return output;\n        };\n        /**\n         * Subtracts the two vectors.\n         * @method sub\n         * @param {vector} vectorA\n         * @param {vector} vectorB\n         * @param {vector} [output]\n         * @return {vector} A new vector of vectorA and vectorB subtracted\n         */\n\n\n        Vector.sub = function (vectorA, vectorB, output) {\n          if (!output) output = {};\n          output.x = vectorA.x - vectorB.x;\n          output.y = vectorA.y - vectorB.y;\n          return output;\n        };\n        /**\n         * Multiplies a vector and a scalar.\n         * @method mult\n         * @param {vector} vector\n         * @param {number} scalar\n         * @return {vector} A new vector multiplied by scalar\n         */\n\n\n        Vector.mult = function (vector, scalar) {\n          return {\n            x: vector.x * scalar,\n            y: vector.y * scalar\n          };\n        };\n        /**\n         * Divides a vector and a scalar.\n         * @method div\n         * @param {vector} vector\n         * @param {number} scalar\n         * @return {vector} A new vector divided by scalar\n         */\n\n\n        Vector.div = function (vector, scalar) {\n          return {\n            x: vector.x / scalar,\n            y: vector.y / scalar\n          };\n        };\n        /**\n         * Returns the perpendicular vector. Set `negate` to true for the perpendicular in the opposite direction.\n         * @method perp\n         * @param {vector} vector\n         * @param {bool} [negate=false]\n         * @return {vector} The perpendicular vector\n         */\n\n\n        Vector.perp = function (vector, negate) {\n          negate = negate === true ? -1 : 1;\n          return {\n            x: negate * -vector.y,\n            y: negate * vector.x\n          };\n        };\n        /**\n         * Negates both components of a vector such that it points in the opposite direction.\n         * @method neg\n         * @param {vector} vector\n         * @return {vector} The negated vector\n         */\n\n\n        Vector.neg = function (vector) {\n          return {\n            x: -vector.x,\n            y: -vector.y\n          };\n        };\n        /**\n         * Returns the angle between the vector `vectorB - vectorA` and the x-axis in radians.\n         * @method angle\n         * @param {vector} vectorA\n         * @param {vector} vectorB\n         * @return {number} The angle in radians\n         */\n\n\n        Vector.angle = function (vectorA, vectorB) {\n          return Math.atan2(vectorB.y - vectorA.y, vectorB.x - vectorA.x);\n        };\n        /**\n         * Temporary vector pool (not thread-safe).\n         * @property _temp\n         * @type {vector[]}\n         * @private\n         */\n\n\n        Vector._temp = [Vector.create(), Vector.create(), Vector.create(), Vector.create(), Vector.create(), Vector.create()];\n      })();\n      /***/\n\n    },\n    /* 3 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      /**\n      * The `Matter.Vertices` module contains methods for creating and manipulating sets of vertices.\n      * A set of vertices is an array of `Matter.Vector` with additional indexing properties inserted by `Vertices.create`.\n      * A `Matter.Body` maintains a set of vertices to represent the shape of the object (its convex hull).\n      *\n      * See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n      *\n      * @class Vertices\n      */\n      var Vertices = {};\n      module.exports = Vertices;\n\n      var Vector = __webpack_require__(2);\n\n      var Common = __webpack_require__(0);\n\n      (function () {\n        /**\n         * Creates a new set of `Matter.Body` compatible vertices.\n         * The `points` argument accepts an array of `Matter.Vector` points orientated around the origin `(0, 0)`, for example:\n         *\n         *     [{ x: 0, y: 0 }, { x: 25, y: 50 }, { x: 50, y: 0 }]\n         *\n         * The `Vertices.create` method returns a new array of vertices, which are similar to Matter.Vector objects,\n         * but with some additional references required for efficient collision detection routines.\n         *\n         * Vertices must be specified in clockwise order.\n         *\n         * Note that the `body` argument is not optional, a `Matter.Body` reference must be provided.\n         *\n         * @method create\n         * @param {vector[]} points\n         * @param {body} body\n         */\n        Vertices.create = function (points, body) {\n          var vertices = [];\n\n          for (var i = 0; i < points.length; i++) {\n            var point = points[i],\n                vertex = {\n              x: point.x,\n              y: point.y,\n              index: i,\n              body: body,\n              isInternal: false\n            };\n            vertices.push(vertex);\n          }\n\n          return vertices;\n        };\n        /**\n         * Parses a string containing ordered x y pairs separated by spaces (and optionally commas), \n         * into a `Matter.Vertices` object for the given `Matter.Body`.\n         * For parsing SVG paths, see `Svg.pathToVertices`.\n         * @method fromPath\n         * @param {string} path\n         * @param {body} body\n         * @return {vertices} vertices\n         */\n\n\n        Vertices.fromPath = function (path, body) {\n          var pathPattern = /L?\\s*([-\\d.e]+)[\\s,]*([-\\d.e]+)*/ig,\n              points = [];\n          path.replace(pathPattern, function (match, x, y) {\n            points.push({\n              x: parseFloat(x),\n              y: parseFloat(y)\n            });\n          });\n          return Vertices.create(points, body);\n        };\n        /**\n         * Returns the centre (centroid) of the set of vertices.\n         * @method centre\n         * @param {vertices} vertices\n         * @return {vector} The centre point\n         */\n\n\n        Vertices.centre = function (vertices) {\n          var area = Vertices.area(vertices, true),\n              centre = {\n            x: 0,\n            y: 0\n          },\n              cross,\n              temp,\n              j;\n\n          for (var i = 0; i < vertices.length; i++) {\n            j = (i + 1) % vertices.length;\n            cross = Vector.cross(vertices[i], vertices[j]);\n            temp = Vector.mult(Vector.add(vertices[i], vertices[j]), cross);\n            centre = Vector.add(centre, temp);\n          }\n\n          return Vector.div(centre, 6 * area);\n        };\n        /**\n         * Returns the average (mean) of the set of vertices.\n         * @method mean\n         * @param {vertices} vertices\n         * @return {vector} The average point\n         */\n\n\n        Vertices.mean = function (vertices) {\n          var average = {\n            x: 0,\n            y: 0\n          };\n\n          for (var i = 0; i < vertices.length; i++) {\n            average.x += vertices[i].x;\n            average.y += vertices[i].y;\n          }\n\n          return Vector.div(average, vertices.length);\n        };\n        /**\n         * Returns the area of the set of vertices.\n         * @method area\n         * @param {vertices} vertices\n         * @param {bool} signed\n         * @return {number} The area\n         */\n\n\n        Vertices.area = function (vertices, signed) {\n          var area = 0,\n              j = vertices.length - 1;\n\n          for (var i = 0; i < vertices.length; i++) {\n            area += (vertices[j].x - vertices[i].x) * (vertices[j].y + vertices[i].y);\n            j = i;\n          }\n\n          if (signed) return area / 2;\n          return Math.abs(area) / 2;\n        };\n        /**\n         * Returns the moment of inertia (second moment of area) of the set of vertices given the total mass.\n         * @method inertia\n         * @param {vertices} vertices\n         * @param {number} mass\n         * @return {number} The polygon's moment of inertia\n         */\n\n\n        Vertices.inertia = function (vertices, mass) {\n          var numerator = 0,\n              denominator = 0,\n              v = vertices,\n              cross,\n              j; // find the polygon's moment of inertia, using second moment of area\n          // from equations at http://www.physicsforums.com/showthread.php?t=25293\n\n          for (var n = 0; n < v.length; n++) {\n            j = (n + 1) % v.length;\n            cross = Math.abs(Vector.cross(v[j], v[n]));\n            numerator += cross * (Vector.dot(v[j], v[j]) + Vector.dot(v[j], v[n]) + Vector.dot(v[n], v[n]));\n            denominator += cross;\n          }\n\n          return mass / 6 * (numerator / denominator);\n        };\n        /**\n         * Translates the set of vertices in-place.\n         * @method translate\n         * @param {vertices} vertices\n         * @param {vector} vector\n         * @param {number} scalar\n         */\n\n\n        Vertices.translate = function (vertices, vector, scalar) {\n          var i;\n\n          if (scalar) {\n            for (i = 0; i < vertices.length; i++) {\n              vertices[i].x += vector.x * scalar;\n              vertices[i].y += vector.y * scalar;\n            }\n          } else {\n            for (i = 0; i < vertices.length; i++) {\n              vertices[i].x += vector.x;\n              vertices[i].y += vector.y;\n            }\n          }\n\n          return vertices;\n        };\n        /**\n         * Rotates the set of vertices in-place.\n         * @method rotate\n         * @param {vertices} vertices\n         * @param {number} angle\n         * @param {vector} point\n         */\n\n\n        Vertices.rotate = function (vertices, angle, point) {\n          if (angle === 0) return;\n          var cos = Math.cos(angle),\n              sin = Math.sin(angle);\n\n          for (var i = 0; i < vertices.length; i++) {\n            var vertice = vertices[i],\n                dx = vertice.x - point.x,\n                dy = vertice.y - point.y;\n            vertice.x = point.x + (dx * cos - dy * sin);\n            vertice.y = point.y + (dx * sin + dy * cos);\n          }\n\n          return vertices;\n        };\n        /**\n         * Returns `true` if the `point` is inside the set of `vertices`.\n         * @method contains\n         * @param {vertices} vertices\n         * @param {vector} point\n         * @return {boolean} True if the vertices contains point, otherwise false\n         */\n\n\n        Vertices.contains = function (vertices, point) {\n          for (var i = 0; i < vertices.length; i++) {\n            var vertice = vertices[i],\n                nextVertice = vertices[(i + 1) % vertices.length];\n\n            if ((point.x - vertice.x) * (nextVertice.y - vertice.y) + (point.y - vertice.y) * (vertice.x - nextVertice.x) > 0) {\n              return false;\n            }\n          }\n\n          return true;\n        };\n        /**\n         * Scales the vertices from a point (default is centre) in-place.\n         * @method scale\n         * @param {vertices} vertices\n         * @param {number} scaleX\n         * @param {number} scaleY\n         * @param {vector} point\n         */\n\n\n        Vertices.scale = function (vertices, scaleX, scaleY, point) {\n          if (scaleX === 1 && scaleY === 1) return vertices;\n          point = point || Vertices.centre(vertices);\n          var vertex, delta;\n\n          for (var i = 0; i < vertices.length; i++) {\n            vertex = vertices[i];\n            delta = Vector.sub(vertex, point);\n            vertices[i].x = point.x + delta.x * scaleX;\n            vertices[i].y = point.y + delta.y * scaleY;\n          }\n\n          return vertices;\n        };\n        /**\n         * Chamfers a set of vertices by giving them rounded corners, returns a new set of vertices.\n         * The radius parameter is a single number or an array to specify the radius for each vertex.\n         * @method chamfer\n         * @param {vertices} vertices\n         * @param {number[]} radius\n         * @param {number} quality\n         * @param {number} qualityMin\n         * @param {number} qualityMax\n         */\n\n\n        Vertices.chamfer = function (vertices, radius, quality, qualityMin, qualityMax) {\n          if (typeof radius === 'number') {\n            radius = [radius];\n          } else {\n            radius = radius || [8];\n          } // quality defaults to -1, which is auto\n\n\n          quality = typeof quality !== 'undefined' ? quality : -1;\n          qualityMin = qualityMin || 2;\n          qualityMax = qualityMax || 14;\n          var newVertices = [];\n\n          for (var i = 0; i < vertices.length; i++) {\n            var prevVertex = vertices[i - 1 >= 0 ? i - 1 : vertices.length - 1],\n                vertex = vertices[i],\n                nextVertex = vertices[(i + 1) % vertices.length],\n                currentRadius = radius[i < radius.length ? i : radius.length - 1];\n\n            if (currentRadius === 0) {\n              newVertices.push(vertex);\n              continue;\n            }\n\n            var prevNormal = Vector.normalise({\n              x: vertex.y - prevVertex.y,\n              y: prevVertex.x - vertex.x\n            });\n            var nextNormal = Vector.normalise({\n              x: nextVertex.y - vertex.y,\n              y: vertex.x - nextVertex.x\n            });\n            var diagonalRadius = Math.sqrt(2 * Math.pow(currentRadius, 2)),\n                radiusVector = Vector.mult(Common.clone(prevNormal), currentRadius),\n                midNormal = Vector.normalise(Vector.mult(Vector.add(prevNormal, nextNormal), 0.5)),\n                scaledVertex = Vector.sub(vertex, Vector.mult(midNormal, diagonalRadius));\n            var precision = quality;\n\n            if (quality === -1) {\n              // automatically decide precision\n              precision = Math.pow(currentRadius, 0.32) * 1.75;\n            }\n\n            precision = Common.clamp(precision, qualityMin, qualityMax); // use an even value for precision, more likely to reduce axes by using symmetry\n\n            if (precision % 2 === 1) precision += 1;\n            var alpha = Math.acos(Vector.dot(prevNormal, nextNormal)),\n                theta = alpha / precision;\n\n            for (var j = 0; j < precision; j++) {\n              newVertices.push(Vector.add(Vector.rotate(radiusVector, theta * j), scaledVertex));\n            }\n          }\n\n          return newVertices;\n        };\n        /**\n         * Sorts the input vertices into clockwise order in place.\n         * @method clockwiseSort\n         * @param {vertices} vertices\n         * @return {vertices} vertices\n         */\n\n\n        Vertices.clockwiseSort = function (vertices) {\n          var centre = Vertices.mean(vertices);\n          vertices.sort(function (vertexA, vertexB) {\n            return Vector.angle(centre, vertexA) - Vector.angle(centre, vertexB);\n          });\n          return vertices;\n        };\n        /**\n         * Returns true if the vertices form a convex shape (vertices must be in clockwise order).\n         * @method isConvex\n         * @param {vertices} vertices\n         * @return {bool} `true` if the `vertices` are convex, `false` if not (or `null` if not computable).\n         */\n\n\n        Vertices.isConvex = function (vertices) {\n          // http://paulbourke.net/geometry/polygonmesh/\n          // Copyright (c) Paul Bourke (use permitted)\n          var flag = 0,\n              n = vertices.length,\n              i,\n              j,\n              k,\n              z;\n          if (n < 3) return null;\n\n          for (i = 0; i < n; i++) {\n            j = (i + 1) % n;\n            k = (i + 2) % n;\n            z = (vertices[j].x - vertices[i].x) * (vertices[k].y - vertices[j].y);\n            z -= (vertices[j].y - vertices[i].y) * (vertices[k].x - vertices[j].x);\n\n            if (z < 0) {\n              flag |= 1;\n            } else if (z > 0) {\n              flag |= 2;\n            }\n\n            if (flag === 3) {\n              return false;\n            }\n          }\n\n          if (flag !== 0) {\n            return true;\n          } else {\n            return null;\n          }\n        };\n        /**\n         * Returns the convex hull of the input vertices as a new array of points.\n         * @method hull\n         * @param {vertices} vertices\n         * @return [vertex] vertices\n         */\n\n\n        Vertices.hull = function (vertices) {\n          // http://geomalgorithms.com/a10-_hull-1.html\n          var upper = [],\n              lower = [],\n              vertex,\n              i; // sort vertices on x-axis (y-axis for ties)\n\n          vertices = vertices.slice(0);\n          vertices.sort(function (vertexA, vertexB) {\n            var dx = vertexA.x - vertexB.x;\n            return dx !== 0 ? dx : vertexA.y - vertexB.y;\n          }); // build lower hull\n\n          for (i = 0; i < vertices.length; i += 1) {\n            vertex = vertices[i];\n\n            while (lower.length >= 2 && Vector.cross3(lower[lower.length - 2], lower[lower.length - 1], vertex) <= 0) {\n              lower.pop();\n            }\n\n            lower.push(vertex);\n          } // build upper hull\n\n\n          for (i = vertices.length - 1; i >= 0; i -= 1) {\n            vertex = vertices[i];\n\n            while (upper.length >= 2 && Vector.cross3(upper[upper.length - 2], upper[upper.length - 1], vertex) <= 0) {\n              upper.pop();\n            }\n\n            upper.push(vertex);\n          } // concatenation of the lower and upper hulls gives the convex hull\n          // omit last points because they are repeated at the beginning of the other list\n\n\n          upper.pop();\n          lower.pop();\n          return upper.concat(lower);\n        };\n      })();\n      /***/\n\n    },\n    /* 4 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      /**\n      * The `Matter.Events` module contains methods to fire and listen to events on other objects.\n      *\n      * See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n      *\n      * @class Events\n      */\n      var Events = {};\n      module.exports = Events;\n\n      var Common = __webpack_require__(0);\n\n      (function () {\n        /**\n         * Subscribes a callback function to the given object's `eventName`.\n         * @method on\n         * @param {} object\n         * @param {string} eventNames\n         * @param {function} callback\n         */\n        Events.on = function (object, eventNames, callback) {\n          var names = eventNames.split(' '),\n              name;\n\n          for (var i = 0; i < names.length; i++) {\n            name = names[i];\n            object.events = object.events || {};\n            object.events[name] = object.events[name] || [];\n            object.events[name].push(callback);\n          }\n\n          return callback;\n        };\n        /**\n         * Removes the given event callback. If no callback, clears all callbacks in `eventNames`. If no `eventNames`, clears all events.\n         * @method off\n         * @param {} object\n         * @param {string} eventNames\n         * @param {function} callback\n         */\n\n\n        Events.off = function (object, eventNames, callback) {\n          if (!eventNames) {\n            object.events = {};\n            return;\n          } // handle Events.off(object, callback)\n\n\n          if (typeof eventNames === 'function') {\n            callback = eventNames;\n            eventNames = Common.keys(object.events).join(' ');\n          }\n\n          var names = eventNames.split(' ');\n\n          for (var i = 0; i < names.length; i++) {\n            var callbacks = object.events[names[i]],\n                newCallbacks = [];\n\n            if (callback && callbacks) {\n              for (var j = 0; j < callbacks.length; j++) {\n                if (callbacks[j] !== callback) newCallbacks.push(callbacks[j]);\n              }\n            }\n\n            object.events[names[i]] = newCallbacks;\n          }\n        };\n        /**\n         * Fires all the callbacks subscribed to the given object's `eventName`, in the order they subscribed, if any.\n         * @method trigger\n         * @param {} object\n         * @param {string} eventNames\n         * @param {} event\n         */\n\n\n        Events.trigger = function (object, eventNames, event) {\n          var names, name, callbacks, eventClone;\n          var events = object.events;\n\n          if (events && Common.keys(events).length > 0) {\n            if (!event) event = {};\n            names = eventNames.split(' ');\n\n            for (var i = 0; i < names.length; i++) {\n              name = names[i];\n              callbacks = events[name];\n\n              if (callbacks) {\n                eventClone = Common.clone(event, false);\n                eventClone.name = name;\n                eventClone.source = object;\n\n                for (var j = 0; j < callbacks.length; j++) {\n                  callbacks[j].apply(object, [eventClone]);\n                }\n              }\n            }\n          }\n        };\n      })();\n      /***/\n\n    },\n    /* 5 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      /**\n      * The `Matter.Composite` module contains methods for creating and manipulating composite bodies.\n      * A composite body is a collection of `Matter.Body`, `Matter.Constraint` and other `Matter.Composite`, therefore composites form a tree structure.\n      * It is important to use the functions in this module to modify composites, rather than directly modifying their properties.\n      * Note that the `Matter.World` object is also a type of `Matter.Composite` and as such all composite methods here can also operate on a `Matter.World`.\n      *\n      * See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n      *\n      * @class Composite\n      */\n      var Composite = {};\n      module.exports = Composite;\n\n      var Events = __webpack_require__(4);\n\n      var Common = __webpack_require__(0);\n\n      var Bounds = __webpack_require__(1);\n\n      var Body = __webpack_require__(6);\n\n      (function () {\n        /**\n         * Creates a new composite. The options parameter is an object that specifies any properties you wish to override the defaults.\n         * See the properites section below for detailed information on what you can pass via the `options` object.\n         * @method create\n         * @param {} [options]\n         * @return {composite} A new composite\n         */\n        Composite.create = function (options) {\n          return Common.extend({\n            id: Common.nextId(),\n            type: 'composite',\n            parent: null,\n            isModified: false,\n            bodies: [],\n            constraints: [],\n            composites: [],\n            label: 'Composite',\n            plugin: {}\n          }, options);\n        };\n        /**\n         * Sets the composite's `isModified` flag. \n         * If `updateParents` is true, all parents will be set (default: false).\n         * If `updateChildren` is true, all children will be set (default: false).\n         * @method setModified\n         * @param {composite} composite\n         * @param {boolean} isModified\n         * @param {boolean} [updateParents=false]\n         * @param {boolean} [updateChildren=false]\n         */\n\n\n        Composite.setModified = function (composite, isModified, updateParents, updateChildren) {\n          composite.isModified = isModified;\n\n          if (updateParents && composite.parent) {\n            Composite.setModified(composite.parent, isModified, updateParents, updateChildren);\n          }\n\n          if (updateChildren) {\n            for (var i = 0; i < composite.composites.length; i++) {\n              var childComposite = composite.composites[i];\n              Composite.setModified(childComposite, isModified, updateParents, updateChildren);\n            }\n          }\n        };\n        /**\n         * Generic add function. Adds one or many body(s), constraint(s) or a composite(s) to the given composite.\n         * Triggers `beforeAdd` and `afterAdd` events on the `composite`.\n         * @method add\n         * @param {composite} composite\n         * @param {} object\n         * @return {composite} The original composite with the objects added\n         */\n\n\n        Composite.add = function (composite, object) {\n          var objects = [].concat(object);\n          Events.trigger(composite, 'beforeAdd', {\n            object: object\n          });\n\n          for (var i = 0; i < objects.length; i++) {\n            var obj = objects[i];\n\n            switch (obj.type) {\n              case 'body':\n                // skip adding compound parts\n                if (obj.parent !== obj) {\n                  Common.warn('Composite.add: skipped adding a compound body part (you must add its parent instead)');\n                  break;\n                }\n\n                Composite.addBody(composite, obj);\n                break;\n\n              case 'constraint':\n                Composite.addConstraint(composite, obj);\n                break;\n\n              case 'composite':\n                Composite.addComposite(composite, obj);\n                break;\n\n              case 'mouseConstraint':\n                Composite.addConstraint(composite, obj.constraint);\n                break;\n            }\n          }\n\n          Events.trigger(composite, 'afterAdd', {\n            object: object\n          });\n          return composite;\n        };\n        /**\n         * Generic remove function. Removes one or many body(s), constraint(s) or a composite(s) to the given composite.\n         * Optionally searching its children recursively.\n         * Triggers `beforeRemove` and `afterRemove` events on the `composite`.\n         * @method remove\n         * @param {composite} composite\n         * @param {} object\n         * @param {boolean} [deep=false]\n         * @return {composite} The original composite with the objects removed\n         */\n\n\n        Composite.remove = function (composite, object, deep) {\n          var objects = [].concat(object);\n          Events.trigger(composite, 'beforeRemove', {\n            object: object\n          });\n\n          for (var i = 0; i < objects.length; i++) {\n            var obj = objects[i];\n\n            switch (obj.type) {\n              case 'body':\n                Composite.removeBody(composite, obj, deep);\n                break;\n\n              case 'constraint':\n                Composite.removeConstraint(composite, obj, deep);\n                break;\n\n              case 'composite':\n                Composite.removeComposite(composite, obj, deep);\n                break;\n\n              case 'mouseConstraint':\n                Composite.removeConstraint(composite, obj.constraint);\n                break;\n            }\n          }\n\n          Events.trigger(composite, 'afterRemove', {\n            object: object\n          });\n          return composite;\n        };\n        /**\n         * Adds a composite to the given composite.\n         * @private\n         * @method addComposite\n         * @param {composite} compositeA\n         * @param {composite} compositeB\n         * @return {composite} The original compositeA with the objects from compositeB added\n         */\n\n\n        Composite.addComposite = function (compositeA, compositeB) {\n          compositeA.composites.push(compositeB);\n          compositeB.parent = compositeA;\n          Composite.setModified(compositeA, true, true, false);\n          return compositeA;\n        };\n        /**\n         * Removes a composite from the given composite, and optionally searching its children recursively.\n         * @private\n         * @method removeComposite\n         * @param {composite} compositeA\n         * @param {composite} compositeB\n         * @param {boolean} [deep=false]\n         * @return {composite} The original compositeA with the composite removed\n         */\n\n\n        Composite.removeComposite = function (compositeA, compositeB, deep) {\n          var position = Common.indexOf(compositeA.composites, compositeB);\n\n          if (position !== -1) {\n            Composite.removeCompositeAt(compositeA, position);\n            Composite.setModified(compositeA, true, true, false);\n          }\n\n          if (deep) {\n            for (var i = 0; i < compositeA.composites.length; i++) {\n              Composite.removeComposite(compositeA.composites[i], compositeB, true);\n            }\n          }\n\n          return compositeA;\n        };\n        /**\n         * Removes a composite from the given composite.\n         * @private\n         * @method removeCompositeAt\n         * @param {composite} composite\n         * @param {number} position\n         * @return {composite} The original composite with the composite removed\n         */\n\n\n        Composite.removeCompositeAt = function (composite, position) {\n          composite.composites.splice(position, 1);\n          Composite.setModified(composite, true, true, false);\n          return composite;\n        };\n        /**\n         * Adds a body to the given composite.\n         * @private\n         * @method addBody\n         * @param {composite} composite\n         * @param {body} body\n         * @return {composite} The original composite with the body added\n         */\n\n\n        Composite.addBody = function (composite, body) {\n          composite.bodies.push(body);\n          Composite.setModified(composite, true, true, false);\n          return composite;\n        };\n        /**\n         * Removes a body from the given composite, and optionally searching its children recursively.\n         * @private\n         * @method removeBody\n         * @param {composite} composite\n         * @param {body} body\n         * @param {boolean} [deep=false]\n         * @return {composite} The original composite with the body removed\n         */\n\n\n        Composite.removeBody = function (composite, body, deep) {\n          var position = Common.indexOf(composite.bodies, body);\n\n          if (position !== -1) {\n            Composite.removeBodyAt(composite, position);\n            Composite.setModified(composite, true, true, false);\n          }\n\n          if (deep) {\n            for (var i = 0; i < composite.composites.length; i++) {\n              Composite.removeBody(composite.composites[i], body, true);\n            }\n          }\n\n          return composite;\n        };\n        /**\n         * Removes a body from the given composite.\n         * @private\n         * @method removeBodyAt\n         * @param {composite} composite\n         * @param {number} position\n         * @return {composite} The original composite with the body removed\n         */\n\n\n        Composite.removeBodyAt = function (composite, position) {\n          composite.bodies.splice(position, 1);\n          Composite.setModified(composite, true, true, false);\n          return composite;\n        };\n        /**\n         * Adds a constraint to the given composite.\n         * @private\n         * @method addConstraint\n         * @param {composite} composite\n         * @param {constraint} constraint\n         * @return {composite} The original composite with the constraint added\n         */\n\n\n        Composite.addConstraint = function (composite, constraint) {\n          composite.constraints.push(constraint);\n          Composite.setModified(composite, true, true, false);\n          return composite;\n        };\n        /**\n         * Removes a constraint from the given composite, and optionally searching its children recursively.\n         * @private\n         * @method removeConstraint\n         * @param {composite} composite\n         * @param {constraint} constraint\n         * @param {boolean} [deep=false]\n         * @return {composite} The original composite with the constraint removed\n         */\n\n\n        Composite.removeConstraint = function (composite, constraint, deep) {\n          var position = Common.indexOf(composite.constraints, constraint);\n\n          if (position !== -1) {\n            Composite.removeConstraintAt(composite, position);\n          }\n\n          if (deep) {\n            for (var i = 0; i < composite.composites.length; i++) {\n              Composite.removeConstraint(composite.composites[i], constraint, true);\n            }\n          }\n\n          return composite;\n        };\n        /**\n         * Removes a body from the given composite.\n         * @private\n         * @method removeConstraintAt\n         * @param {composite} composite\n         * @param {number} position\n         * @return {composite} The original composite with the constraint removed\n         */\n\n\n        Composite.removeConstraintAt = function (composite, position) {\n          composite.constraints.splice(position, 1);\n          Composite.setModified(composite, true, true, false);\n          return composite;\n        };\n        /**\n         * Removes all bodies, constraints and composites from the given composite.\n         * Optionally clearing its children recursively.\n         * @method clear\n         * @param {composite} composite\n         * @param {boolean} keepStatic\n         * @param {boolean} [deep=false]\n         */\n\n\n        Composite.clear = function (composite, keepStatic, deep) {\n          if (deep) {\n            for (var i = 0; i < composite.composites.length; i++) {\n              Composite.clear(composite.composites[i], keepStatic, true);\n            }\n          }\n\n          if (keepStatic) {\n            composite.bodies = composite.bodies.filter(function (body) {\n              return body.isStatic;\n            });\n          } else {\n            composite.bodies.length = 0;\n          }\n\n          composite.constraints.length = 0;\n          composite.composites.length = 0;\n          Composite.setModified(composite, true, true, false);\n          return composite;\n        };\n        /**\n         * Returns all bodies in the given composite, including all bodies in its children, recursively.\n         * @method allBodies\n         * @param {composite} composite\n         * @return {body[]} All the bodies\n         */\n\n\n        Composite.allBodies = function (composite) {\n          var bodies = [].concat(composite.bodies);\n\n          for (var i = 0; i < composite.composites.length; i++) {\n            bodies = bodies.concat(Composite.allBodies(composite.composites[i]));\n          }\n\n          return bodies;\n        };\n        /**\n         * Returns all constraints in the given composite, including all constraints in its children, recursively.\n         * @method allConstraints\n         * @param {composite} composite\n         * @return {constraint[]} All the constraints\n         */\n\n\n        Composite.allConstraints = function (composite) {\n          var constraints = [].concat(composite.constraints);\n\n          for (var i = 0; i < composite.composites.length; i++) {\n            constraints = constraints.concat(Composite.allConstraints(composite.composites[i]));\n          }\n\n          return constraints;\n        };\n        /**\n         * Returns all composites in the given composite, including all composites in its children, recursively.\n         * @method allComposites\n         * @param {composite} composite\n         * @return {composite[]} All the composites\n         */\n\n\n        Composite.allComposites = function (composite) {\n          var composites = [].concat(composite.composites);\n\n          for (var i = 0; i < composite.composites.length; i++) {\n            composites = composites.concat(Composite.allComposites(composite.composites[i]));\n          }\n\n          return composites;\n        };\n        /**\n         * Searches the composite recursively for an object matching the type and id supplied, null if not found.\n         * @method get\n         * @param {composite} composite\n         * @param {number} id\n         * @param {string} type\n         * @return {object} The requested object, if found\n         */\n\n\n        Composite.get = function (composite, id, type) {\n          var objects, object;\n\n          switch (type) {\n            case 'body':\n              objects = Composite.allBodies(composite);\n              break;\n\n            case 'constraint':\n              objects = Composite.allConstraints(composite);\n              break;\n\n            case 'composite':\n              objects = Composite.allComposites(composite).concat(composite);\n              break;\n          }\n\n          if (!objects) return null;\n          object = objects.filter(function (object) {\n            return object.id.toString() === id.toString();\n          });\n          return object.length === 0 ? null : object[0];\n        };\n        /**\n         * Moves the given object(s) from compositeA to compositeB (equal to a remove followed by an add).\n         * @method move\n         * @param {compositeA} compositeA\n         * @param {object[]} objects\n         * @param {compositeB} compositeB\n         * @return {composite} Returns compositeA\n         */\n\n\n        Composite.move = function (compositeA, objects, compositeB) {\n          Composite.remove(compositeA, objects);\n          Composite.add(compositeB, objects);\n          return compositeA;\n        };\n        /**\n         * Assigns new ids for all objects in the composite, recursively.\n         * @method rebase\n         * @param {composite} composite\n         * @return {composite} Returns composite\n         */\n\n\n        Composite.rebase = function (composite) {\n          var objects = Composite.allBodies(composite).concat(Composite.allConstraints(composite)).concat(Composite.allComposites(composite));\n\n          for (var i = 0; i < objects.length; i++) {\n            objects[i].id = Common.nextId();\n          }\n\n          Composite.setModified(composite, true, true, false);\n          return composite;\n        };\n        /**\n         * Translates all children in the composite by a given vector relative to their current positions, \n         * without imparting any velocity.\n         * @method translate\n         * @param {composite} composite\n         * @param {vector} translation\n         * @param {bool} [recursive=true]\n         */\n\n\n        Composite.translate = function (composite, translation, recursive) {\n          var bodies = recursive ? Composite.allBodies(composite) : composite.bodies;\n\n          for (var i = 0; i < bodies.length; i++) {\n            Body.translate(bodies[i], translation);\n          }\n\n          Composite.setModified(composite, true, true, false);\n          return composite;\n        };\n        /**\n         * Rotates all children in the composite by a given angle about the given point, without imparting any angular velocity.\n         * @method rotate\n         * @param {composite} composite\n         * @param {number} rotation\n         * @param {vector} point\n         * @param {bool} [recursive=true]\n         */\n\n\n        Composite.rotate = function (composite, rotation, point, recursive) {\n          var cos = Math.cos(rotation),\n              sin = Math.sin(rotation),\n              bodies = recursive ? Composite.allBodies(composite) : composite.bodies;\n\n          for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i],\n                dx = body.position.x - point.x,\n                dy = body.position.y - point.y;\n            Body.setPosition(body, {\n              x: point.x + (dx * cos - dy * sin),\n              y: point.y + (dx * sin + dy * cos)\n            });\n            Body.rotate(body, rotation);\n          }\n\n          Composite.setModified(composite, true, true, false);\n          return composite;\n        };\n        /**\n         * Scales all children in the composite, including updating physical properties (mass, area, axes, inertia), from a world-space point.\n         * @method scale\n         * @param {composite} composite\n         * @param {number} scaleX\n         * @param {number} scaleY\n         * @param {vector} point\n         * @param {bool} [recursive=true]\n         */\n\n\n        Composite.scale = function (composite, scaleX, scaleY, point, recursive) {\n          var bodies = recursive ? Composite.allBodies(composite) : composite.bodies;\n\n          for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i],\n                dx = body.position.x - point.x,\n                dy = body.position.y - point.y;\n            Body.setPosition(body, {\n              x: point.x + dx * scaleX,\n              y: point.y + dy * scaleY\n            });\n            Body.scale(body, scaleX, scaleY);\n          }\n\n          Composite.setModified(composite, true, true, false);\n          return composite;\n        };\n        /**\n         * Returns the union of the bounds of all of the composite's bodies.\n         * @method bounds\n         * @param {composite} composite The composite.\n         * @returns {bounds} The composite bounds.\n         */\n\n\n        Composite.bounds = function (composite) {\n          var bodies = Composite.allBodies(composite),\n              vertices = [];\n\n          for (var i = 0; i < bodies.length; i += 1) {\n            var body = bodies[i];\n            vertices.push(body.bounds.min, body.bounds.max);\n          }\n\n          return Bounds.create(vertices);\n        };\n        /*\n        *\n        *  Events Documentation\n        *\n        */\n\n        /**\n        * Fired when a call to `Composite.add` is made, before objects have been added.\n        *\n        * @event beforeAdd\n        * @param {} event An event object\n        * @param {} event.object The object(s) to be added (may be a single body, constraint, composite or a mixed array of these)\n        * @param {} event.source The source object of the event\n        * @param {} event.name The name of the event\n        */\n\n        /**\n        * Fired when a call to `Composite.add` is made, after objects have been added.\n        *\n        * @event afterAdd\n        * @param {} event An event object\n        * @param {} event.object The object(s) that have been added (may be a single body, constraint, composite or a mixed array of these)\n        * @param {} event.source The source object of the event\n        * @param {} event.name The name of the event\n        */\n\n        /**\n        * Fired when a call to `Composite.remove` is made, before objects have been removed.\n        *\n        * @event beforeRemove\n        * @param {} event An event object\n        * @param {} event.object The object(s) to be removed (may be a single body, constraint, composite or a mixed array of these)\n        * @param {} event.source The source object of the event\n        * @param {} event.name The name of the event\n        */\n\n        /**\n        * Fired when a call to `Composite.remove` is made, after objects have been removed.\n        *\n        * @event afterRemove\n        * @param {} event An event object\n        * @param {} event.object The object(s) that have been removed (may be a single body, constraint, composite or a mixed array of these)\n        * @param {} event.source The source object of the event\n        * @param {} event.name The name of the event\n        */\n\n        /*\n        *\n        *  Properties Documentation\n        *\n        */\n\n        /**\n         * An integer `Number` uniquely identifying number generated in `Composite.create` by `Common.nextId`.\n         *\n         * @property id\n         * @type number\n         */\n\n        /**\n         * A `String` denoting the type of object.\n         *\n         * @property type\n         * @type string\n         * @default \"composite\"\n         * @readOnly\n         */\n\n        /**\n         * An arbitrary `String` name to help the user identify and manage composites.\n         *\n         * @property label\n         * @type string\n         * @default \"Composite\"\n         */\n\n        /**\n         * A flag that specifies whether the composite has been modified during the current step.\n         * Most `Matter.Composite` methods will automatically set this flag to `true` to inform the engine of changes to be handled.\n         * If you need to change it manually, you should use the `Composite.setModified` method.\n         *\n         * @property isModified\n         * @type boolean\n         * @default false\n         */\n\n        /**\n         * The `Composite` that is the parent of this composite. It is automatically managed by the `Matter.Composite` methods.\n         *\n         * @property parent\n         * @type composite\n         * @default null\n         */\n\n        /**\n         * An array of `Body` that are _direct_ children of this composite.\n         * To add or remove bodies you should use `Composite.add` and `Composite.remove` methods rather than directly modifying this property.\n         * If you wish to recursively find all descendants, you should use the `Composite.allBodies` method.\n         *\n         * @property bodies\n         * @type body[]\n         * @default []\n         */\n\n        /**\n         * An array of `Constraint` that are _direct_ children of this composite.\n         * To add or remove constraints you should use `Composite.add` and `Composite.remove` methods rather than directly modifying this property.\n         * If you wish to recursively find all descendants, you should use the `Composite.allConstraints` method.\n         *\n         * @property constraints\n         * @type constraint[]\n         * @default []\n         */\n\n        /**\n         * An array of `Composite` that are _direct_ children of this composite.\n         * To add or remove composites you should use `Composite.add` and `Composite.remove` methods rather than directly modifying this property.\n         * If you wish to recursively find all descendants, you should use the `Composite.allComposites` method.\n         *\n         * @property composites\n         * @type composite[]\n         * @default []\n         */\n\n        /**\n         * An object reserved for storing plugin-specific properties.\n         *\n         * @property plugin\n         * @type {}\n         */\n\n      })();\n      /***/\n\n    },\n    /* 6 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      /**\n      * The `Matter.Body` module contains methods for creating and manipulating body models.\n      * A `Matter.Body` is a rigid body that can be simulated by a `Matter.Engine`.\n      * Factories for commonly used body configurations (such as rectangles, circles and other polygons) can be found in the module `Matter.Bodies`.\n      *\n      * See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n      \n      * @class Body\n      */\n      var Body = {};\n      module.exports = Body;\n\n      var Vertices = __webpack_require__(3);\n\n      var Vector = __webpack_require__(2);\n\n      var Sleeping = __webpack_require__(7);\n\n      var Render = __webpack_require__(10);\n\n      var Common = __webpack_require__(0);\n\n      var Bounds = __webpack_require__(1);\n\n      var Axes = __webpack_require__(15);\n\n      (function () {\n        Body._inertiaScale = 4;\n        Body._nextCollidingGroupId = 1;\n        Body._nextNonCollidingGroupId = -1;\n        Body._nextCategory = 0x0001;\n        /**\n         * Creates a new rigid body model. The options parameter is an object that specifies any properties you wish to override the defaults.\n         * All properties have default values, and many are pre-calculated automatically based on other properties.\n         * Vertices must be specified in clockwise order.\n         * See the properties section below for detailed information on what you can pass via the `options` object.\n         * @method create\n         * @param {} options\n         * @return {body} body\n         */\n\n        Body.create = function (options) {\n          var defaults = {\n            id: Common.nextId(),\n            type: 'body',\n            label: 'Body',\n            parts: [],\n            plugin: {},\n            angle: 0,\n            vertices: Vertices.fromPath('L 0 0 L 40 0 L 40 40 L 0 40'),\n            position: {\n              x: 0,\n              y: 0\n            },\n            force: {\n              x: 0,\n              y: 0\n            },\n            torque: 0,\n            positionImpulse: {\n              x: 0,\n              y: 0\n            },\n            constraintImpulse: {\n              x: 0,\n              y: 0,\n              angle: 0\n            },\n            totalContacts: 0,\n            speed: 0,\n            angularSpeed: 0,\n            velocity: {\n              x: 0,\n              y: 0\n            },\n            angularVelocity: 0,\n            isSensor: false,\n            isStatic: false,\n            isSleeping: false,\n            motion: 0,\n            sleepThreshold: 60,\n            density: 0.001,\n            restitution: 0,\n            friction: 0.1,\n            frictionStatic: 0.5,\n            frictionAir: 0.01,\n            collisionFilter: {\n              category: 0x0001,\n              mask: 0xFFFFFFFF,\n              group: 0\n            },\n            slop: 0.05,\n            timeScale: 1,\n            render: {\n              visible: true,\n              opacity: 1,\n              strokeStyle: null,\n              fillStyle: null,\n              lineWidth: null,\n              sprite: {\n                xScale: 1,\n                yScale: 1,\n                xOffset: 0,\n                yOffset: 0\n              }\n            },\n            events: null,\n            bounds: null,\n            chamfer: null,\n            circleRadius: 0,\n            positionPrev: null,\n            anglePrev: 0,\n            parent: null,\n            axes: null,\n            area: 0,\n            mass: 0,\n            inertia: 0,\n            _original: null\n          };\n          var body = Common.extend(defaults, options);\n\n          _initProperties(body, options);\n\n          return body;\n        };\n        /**\n         * Returns the next unique group index for which bodies will collide.\n         * If `isNonColliding` is `true`, returns the next unique group index for which bodies will _not_ collide.\n         * See `body.collisionFilter` for more information.\n         * @method nextGroup\n         * @param {bool} [isNonColliding=false]\n         * @return {Number} Unique group index\n         */\n\n\n        Body.nextGroup = function (isNonColliding) {\n          if (isNonColliding) return Body._nextNonCollidingGroupId--;\n          return Body._nextCollidingGroupId++;\n        };\n        /**\n         * Returns the next unique category bitfield (starting after the initial default category `0x0001`).\n         * There are 32 available. See `body.collisionFilter` for more information.\n         * @method nextCategory\n         * @return {Number} Unique category bitfield\n         */\n\n\n        Body.nextCategory = function () {\n          Body._nextCategory = Body._nextCategory << 1;\n          return Body._nextCategory;\n        };\n        /**\n         * Initialises body properties.\n         * @method _initProperties\n         * @private\n         * @param {body} body\n         * @param {} [options]\n         */\n\n\n        var _initProperties = function _initProperties(body, options) {\n          options = options || {}; // init required properties (order is important)\n\n          Body.set(body, {\n            bounds: body.bounds || Bounds.create(body.vertices),\n            positionPrev: body.positionPrev || Vector.clone(body.position),\n            anglePrev: body.anglePrev || body.angle,\n            vertices: body.vertices,\n            parts: body.parts || [body],\n            isStatic: body.isStatic,\n            isSleeping: body.isSleeping,\n            parent: body.parent || body\n          });\n          Vertices.rotate(body.vertices, body.angle, body.position);\n          Axes.rotate(body.axes, body.angle);\n          Bounds.update(body.bounds, body.vertices, body.velocity); // allow options to override the automatically calculated properties\n\n          Body.set(body, {\n            axes: options.axes || body.axes,\n            area: options.area || body.area,\n            mass: options.mass || body.mass,\n            inertia: options.inertia || body.inertia\n          }); // render properties\n\n          var defaultFillStyle = body.isStatic ? '#14151f' : Common.choose(['#f19648', '#f5d259', '#f55a3c', '#063e7b', '#ececd1']),\n              defaultStrokeStyle = body.isStatic ? '#555' : '#ccc',\n              defaultLineWidth = body.isStatic && body.render.fillStyle === null ? 1 : 0;\n          body.render.fillStyle = body.render.fillStyle || defaultFillStyle;\n          body.render.strokeStyle = body.render.strokeStyle || defaultStrokeStyle;\n          body.render.lineWidth = body.render.lineWidth || defaultLineWidth;\n          body.render.sprite.xOffset += -(body.bounds.min.x - body.position.x) / (body.bounds.max.x - body.bounds.min.x);\n          body.render.sprite.yOffset += -(body.bounds.min.y - body.position.y) / (body.bounds.max.y - body.bounds.min.y);\n        };\n        /**\n         * Given a property and a value (or map of), sets the property(s) on the body, using the appropriate setter functions if they exist.\n         * Prefer to use the actual setter functions in performance critical situations.\n         * @method set\n         * @param {body} body\n         * @param {} settings A property name (or map of properties and values) to set on the body.\n         * @param {} value The value to set if `settings` is a single property name.\n         */\n\n\n        Body.set = function (body, settings, value) {\n          var property;\n\n          if (typeof settings === 'string') {\n            property = settings;\n            settings = {};\n            settings[property] = value;\n          }\n\n          for (property in settings) {\n            if (!Object.prototype.hasOwnProperty.call(settings, property)) continue;\n            value = settings[property];\n\n            switch (property) {\n              case 'isStatic':\n                Body.setStatic(body, value);\n                break;\n\n              case 'isSleeping':\n                Sleeping.set(body, value);\n                break;\n\n              case 'mass':\n                Body.setMass(body, value);\n                break;\n\n              case 'density':\n                Body.setDensity(body, value);\n                break;\n\n              case 'inertia':\n                Body.setInertia(body, value);\n                break;\n\n              case 'vertices':\n                Body.setVertices(body, value);\n                break;\n\n              case 'position':\n                Body.setPosition(body, value);\n                break;\n\n              case 'angle':\n                Body.setAngle(body, value);\n                break;\n\n              case 'velocity':\n                Body.setVelocity(body, value);\n                break;\n\n              case 'angularVelocity':\n                Body.setAngularVelocity(body, value);\n                break;\n\n              case 'parts':\n                Body.setParts(body, value);\n                break;\n\n              case 'centre':\n                Body.setCentre(body, value);\n                break;\n\n              default:\n                body[property] = value;\n            }\n          }\n        };\n        /**\n         * Sets the body as static, including isStatic flag and setting mass and inertia to Infinity.\n         * @method setStatic\n         * @param {body} body\n         * @param {bool} isStatic\n         */\n\n\n        Body.setStatic = function (body, isStatic) {\n          for (var i = 0; i < body.parts.length; i++) {\n            var part = body.parts[i];\n            part.isStatic = isStatic;\n\n            if (isStatic) {\n              part._original = {\n                restitution: part.restitution,\n                friction: part.friction,\n                mass: part.mass,\n                inertia: part.inertia,\n                density: part.density,\n                inverseMass: part.inverseMass,\n                inverseInertia: part.inverseInertia\n              };\n              part.restitution = 0;\n              part.friction = 1;\n              part.mass = part.inertia = part.density = Infinity;\n              part.inverseMass = part.inverseInertia = 0;\n              part.positionPrev.x = part.position.x;\n              part.positionPrev.y = part.position.y;\n              part.anglePrev = part.angle;\n              part.angularVelocity = 0;\n              part.speed = 0;\n              part.angularSpeed = 0;\n              part.motion = 0;\n            } else if (part._original) {\n              part.restitution = part._original.restitution;\n              part.friction = part._original.friction;\n              part.mass = part._original.mass;\n              part.inertia = part._original.inertia;\n              part.density = part._original.density;\n              part.inverseMass = part._original.inverseMass;\n              part.inverseInertia = part._original.inverseInertia;\n              part._original = null;\n            }\n          }\n        };\n        /**\n         * Sets the mass of the body. Inverse mass, density and inertia are automatically updated to reflect the change.\n         * @method setMass\n         * @param {body} body\n         * @param {number} mass\n         */\n\n\n        Body.setMass = function (body, mass) {\n          var moment = body.inertia / (body.mass / 6);\n          body.inertia = moment * (mass / 6);\n          body.inverseInertia = 1 / body.inertia;\n          body.mass = mass;\n          body.inverseMass = 1 / body.mass;\n          body.density = body.mass / body.area;\n        };\n        /**\n         * Sets the density of the body. Mass and inertia are automatically updated to reflect the change.\n         * @method setDensity\n         * @param {body} body\n         * @param {number} density\n         */\n\n\n        Body.setDensity = function (body, density) {\n          Body.setMass(body, density * body.area);\n          body.density = density;\n        };\n        /**\n         * Sets the moment of inertia (i.e. second moment of area) of the body. \n         * Inverse inertia is automatically updated to reflect the change. Mass is not changed.\n         * @method setInertia\n         * @param {body} body\n         * @param {number} inertia\n         */\n\n\n        Body.setInertia = function (body, inertia) {\n          body.inertia = inertia;\n          body.inverseInertia = 1 / body.inertia;\n        };\n        /**\n         * Sets the body's vertices and updates body properties accordingly, including inertia, area and mass (with respect to `body.density`).\n         * Vertices will be automatically transformed to be orientated around their centre of mass as the origin.\n         * They are then automatically translated to world space based on `body.position`.\n         *\n         * The `vertices` argument should be passed as an array of `Matter.Vector` points (or a `Matter.Vertices` array).\n         * Vertices must form a convex hull, concave hulls are not supported.\n         *\n         * @method setVertices\n         * @param {body} body\n         * @param {vector[]} vertices\n         */\n\n\n        Body.setVertices = function (body, vertices) {\n          // change vertices\n          if (vertices[0].body === body) {\n            body.vertices = vertices;\n          } else {\n            body.vertices = Vertices.create(vertices, body);\n          } // update properties\n\n\n          body.axes = Axes.fromVertices(body.vertices);\n          body.area = Vertices.area(body.vertices);\n          Body.setMass(body, body.density * body.area); // orient vertices around the centre of mass at origin (0, 0)\n\n          var centre = Vertices.centre(body.vertices);\n          Vertices.translate(body.vertices, centre, -1); // update inertia while vertices are at origin (0, 0)\n\n          Body.setInertia(body, Body._inertiaScale * Vertices.inertia(body.vertices, body.mass)); // update geometry\n\n          Vertices.translate(body.vertices, body.position);\n          Bounds.update(body.bounds, body.vertices, body.velocity);\n        };\n        /**\n         * Sets the parts of the `body` and updates mass, inertia and centroid.\n         * Each part will have its parent set to `body`.\n         * By default the convex hull will be automatically computed and set on `body`, unless `autoHull` is set to `false.`\n         * Note that this method will ensure that the first part in `body.parts` will always be the `body`.\n         * @method setParts\n         * @param {body} body\n         * @param [body] parts\n         * @param {bool} [autoHull=true]\n         */\n\n\n        Body.setParts = function (body, parts, autoHull) {\n          var i; // add all the parts, ensuring that the first part is always the parent body\n\n          parts = parts.slice(0);\n          body.parts.length = 0;\n          body.parts.push(body);\n          body.parent = body;\n\n          for (i = 0; i < parts.length; i++) {\n            var part = parts[i];\n\n            if (part !== body) {\n              part.parent = body;\n              body.parts.push(part);\n            }\n          }\n\n          if (body.parts.length === 1) return;\n          autoHull = typeof autoHull !== 'undefined' ? autoHull : true; // find the convex hull of all parts to set on the parent body\n\n          if (autoHull) {\n            var vertices = [];\n\n            for (i = 0; i < parts.length; i++) {\n              vertices = vertices.concat(parts[i].vertices);\n            }\n\n            Vertices.clockwiseSort(vertices);\n            var hull = Vertices.hull(vertices),\n                hullCentre = Vertices.centre(hull);\n            Body.setVertices(body, hull);\n            Vertices.translate(body.vertices, hullCentre);\n          } // sum the properties of all compound parts of the parent body\n\n\n          var total = Body._totalProperties(body);\n\n          body.area = total.area;\n          body.parent = body;\n          body.position.x = total.centre.x;\n          body.position.y = total.centre.y;\n          body.positionPrev.x = total.centre.x;\n          body.positionPrev.y = total.centre.y;\n          Body.setMass(body, total.mass);\n          Body.setInertia(body, total.inertia);\n          Body.setPosition(body, total.centre);\n        };\n        /**\n         * Set the centre of mass of the body. \n         * The `centre` is a vector in world-space unless `relative` is set, in which case it is a translation.\n         * The centre of mass is the point the body rotates about and can be used to simulate non-uniform density.\n         * This is equal to moving `body.position` but not the `body.vertices`.\n         * Invalid if the `centre` falls outside the body's convex hull.\n         * @method setCentre\n         * @param {body} body\n         * @param {vector} centre\n         * @param {bool} relative\n         */\n\n\n        Body.setCentre = function (body, centre, relative) {\n          if (!relative) {\n            body.positionPrev.x = centre.x - (body.position.x - body.positionPrev.x);\n            body.positionPrev.y = centre.y - (body.position.y - body.positionPrev.y);\n            body.position.x = centre.x;\n            body.position.y = centre.y;\n          } else {\n            body.positionPrev.x += centre.x;\n            body.positionPrev.y += centre.y;\n            body.position.x += centre.x;\n            body.position.y += centre.y;\n          }\n        };\n        /**\n         * Sets the position of the body instantly. Velocity, angle, force etc. are unchanged.\n         * @method setPosition\n         * @param {body} body\n         * @param {vector} position\n         */\n\n\n        Body.setPosition = function (body, position) {\n          var delta = Vector.sub(position, body.position);\n          body.positionPrev.x += delta.x;\n          body.positionPrev.y += delta.y;\n\n          for (var i = 0; i < body.parts.length; i++) {\n            var part = body.parts[i];\n            part.position.x += delta.x;\n            part.position.y += delta.y;\n            Vertices.translate(part.vertices, delta);\n            Bounds.update(part.bounds, part.vertices, body.velocity);\n          }\n        };\n        /**\n         * Sets the angle of the body instantly. Angular velocity, position, force etc. are unchanged.\n         * @method setAngle\n         * @param {body} body\n         * @param {number} angle\n         */\n\n\n        Body.setAngle = function (body, angle) {\n          var delta = angle - body.angle;\n          body.anglePrev += delta;\n\n          for (var i = 0; i < body.parts.length; i++) {\n            var part = body.parts[i];\n            part.angle += delta;\n            Vertices.rotate(part.vertices, delta, body.position);\n            Axes.rotate(part.axes, delta);\n            Bounds.update(part.bounds, part.vertices, body.velocity);\n\n            if (i > 0) {\n              Vector.rotateAbout(part.position, delta, body.position, part.position);\n            }\n          }\n        };\n        /**\n         * Sets the linear velocity of the body instantly. Position, angle, force etc. are unchanged. See also `Body.applyForce`.\n         * @method setVelocity\n         * @param {body} body\n         * @param {vector} velocity\n         */\n\n\n        Body.setVelocity = function (body, velocity) {\n          body.positionPrev.x = body.position.x - velocity.x;\n          body.positionPrev.y = body.position.y - velocity.y;\n          body.velocity.x = velocity.x;\n          body.velocity.y = velocity.y;\n          body.speed = Vector.magnitude(body.velocity);\n        };\n        /**\n         * Sets the angular velocity of the body instantly. Position, angle, force etc. are unchanged. See also `Body.applyForce`.\n         * @method setAngularVelocity\n         * @param {body} body\n         * @param {number} velocity\n         */\n\n\n        Body.setAngularVelocity = function (body, velocity) {\n          body.anglePrev = body.angle - velocity;\n          body.angularVelocity = velocity;\n          body.angularSpeed = Math.abs(body.angularVelocity);\n        };\n        /**\n         * Moves a body by a given vector relative to its current position, without imparting any velocity.\n         * @method translate\n         * @param {body} body\n         * @param {vector} translation\n         */\n\n\n        Body.translate = function (body, translation) {\n          Body.setPosition(body, Vector.add(body.position, translation));\n        };\n        /**\n         * Rotates a body by a given angle relative to its current angle, without imparting any angular velocity.\n         * @method rotate\n         * @param {body} body\n         * @param {number} rotation\n         * @param {vector} [point]\n         */\n\n\n        Body.rotate = function (body, rotation, point) {\n          if (!point) {\n            Body.setAngle(body, body.angle + rotation);\n          } else {\n            var cos = Math.cos(rotation),\n                sin = Math.sin(rotation),\n                dx = body.position.x - point.x,\n                dy = body.position.y - point.y;\n            Body.setPosition(body, {\n              x: point.x + (dx * cos - dy * sin),\n              y: point.y + (dx * sin + dy * cos)\n            });\n            Body.setAngle(body, body.angle + rotation);\n          }\n        };\n        /**\n         * Scales the body, including updating physical properties (mass, area, axes, inertia), from a world-space point (default is body centre).\n         * @method scale\n         * @param {body} body\n         * @param {number} scaleX\n         * @param {number} scaleY\n         * @param {vector} [point]\n         */\n\n\n        Body.scale = function (body, scaleX, scaleY, point) {\n          var totalArea = 0,\n              totalInertia = 0;\n          point = point || body.position;\n\n          for (var i = 0; i < body.parts.length; i++) {\n            var part = body.parts[i]; // scale vertices\n\n            Vertices.scale(part.vertices, scaleX, scaleY, point); // update properties\n\n            part.axes = Axes.fromVertices(part.vertices);\n            part.area = Vertices.area(part.vertices);\n            Body.setMass(part, body.density * part.area); // update inertia (requires vertices to be at origin)\n\n            Vertices.translate(part.vertices, {\n              x: -part.position.x,\n              y: -part.position.y\n            });\n            Body.setInertia(part, Body._inertiaScale * Vertices.inertia(part.vertices, part.mass));\n            Vertices.translate(part.vertices, {\n              x: part.position.x,\n              y: part.position.y\n            });\n\n            if (i > 0) {\n              totalArea += part.area;\n              totalInertia += part.inertia;\n            } // scale position\n\n\n            part.position.x = point.x + (part.position.x - point.x) * scaleX;\n            part.position.y = point.y + (part.position.y - point.y) * scaleY; // update bounds\n\n            Bounds.update(part.bounds, part.vertices, body.velocity);\n          } // handle parent body\n\n\n          if (body.parts.length > 1) {\n            body.area = totalArea;\n\n            if (!body.isStatic) {\n              Body.setMass(body, body.density * totalArea);\n              Body.setInertia(body, totalInertia);\n            }\n          } // handle circles\n\n\n          if (body.circleRadius) {\n            if (scaleX === scaleY) {\n              body.circleRadius *= scaleX;\n            } else {\n              // body is no longer a circle\n              body.circleRadius = null;\n            }\n          }\n        };\n        /**\n         * Performs a simulation step for the given `body`, including updating position and angle using Verlet integration.\n         * @method update\n         * @param {body} body\n         * @param {number} deltaTime\n         * @param {number} timeScale\n         * @param {number} correction\n         */\n\n\n        Body.update = function (body, deltaTime, timeScale, correction) {\n          var deltaTimeSquared = Math.pow(deltaTime * timeScale * body.timeScale, 2); // from the previous step\n\n          var frictionAir = 1 - body.frictionAir * timeScale * body.timeScale,\n              velocityPrevX = body.position.x - body.positionPrev.x,\n              velocityPrevY = body.position.y - body.positionPrev.y; // update velocity with Verlet integration\n\n          body.velocity.x = velocityPrevX * frictionAir * correction + body.force.x / body.mass * deltaTimeSquared;\n          body.velocity.y = velocityPrevY * frictionAir * correction + body.force.y / body.mass * deltaTimeSquared;\n          body.positionPrev.x = body.position.x;\n          body.positionPrev.y = body.position.y;\n          body.position.x += body.velocity.x;\n          body.position.y += body.velocity.y; // update angular velocity with Verlet integration\n\n          body.angularVelocity = (body.angle - body.anglePrev) * frictionAir * correction + body.torque / body.inertia * deltaTimeSquared;\n          body.anglePrev = body.angle;\n          body.angle += body.angularVelocity; // track speed and acceleration\n\n          body.speed = Vector.magnitude(body.velocity);\n          body.angularSpeed = Math.abs(body.angularVelocity); // transform the body geometry\n\n          for (var i = 0; i < body.parts.length; i++) {\n            var part = body.parts[i];\n            Vertices.translate(part.vertices, body.velocity);\n\n            if (i > 0) {\n              part.position.x += body.velocity.x;\n              part.position.y += body.velocity.y;\n            }\n\n            if (body.angularVelocity !== 0) {\n              Vertices.rotate(part.vertices, body.angularVelocity, body.position);\n              Axes.rotate(part.axes, body.angularVelocity);\n\n              if (i > 0) {\n                Vector.rotateAbout(part.position, body.angularVelocity, body.position, part.position);\n              }\n            }\n\n            Bounds.update(part.bounds, part.vertices, body.velocity);\n          }\n        };\n        /**\n         * Applies a force to a body from a given world-space position, including resulting torque.\n         * @method applyForce\n         * @param {body} body\n         * @param {vector} position\n         * @param {vector} force\n         */\n\n\n        Body.applyForce = function (body, position, force) {\n          body.force.x += force.x;\n          body.force.y += force.y;\n          var offset = {\n            x: position.x - body.position.x,\n            y: position.y - body.position.y\n          };\n          body.torque += offset.x * force.y - offset.y * force.x;\n        };\n        /**\n         * Returns the sums of the properties of all compound parts of the parent body.\n         * @method _totalProperties\n         * @private\n         * @param {body} body\n         * @return {}\n         */\n\n\n        Body._totalProperties = function (body) {\n          // from equations at:\n          // https://ecourses.ou.edu/cgi-bin/ebook.cgi?doc=&topic=st&chap_sec=07.2&page=theory\n          // http://output.to/sideway/default.asp?qno=121100087\n          var properties = {\n            mass: 0,\n            area: 0,\n            inertia: 0,\n            centre: {\n              x: 0,\n              y: 0\n            }\n          }; // sum the properties of all compound parts of the parent body\n\n          for (var i = body.parts.length === 1 ? 0 : 1; i < body.parts.length; i++) {\n            var part = body.parts[i],\n                mass = part.mass !== Infinity ? part.mass : 1;\n            properties.mass += mass;\n            properties.area += part.area;\n            properties.inertia += part.inertia;\n            properties.centre = Vector.add(properties.centre, Vector.mult(part.position, mass));\n          }\n\n          properties.centre = Vector.div(properties.centre, properties.mass);\n          return properties;\n        };\n        /*\n        *\n        *  Events Documentation\n        *\n        */\n\n        /**\n        * Fired when a body starts sleeping (where `this` is the body).\n        *\n        * @event sleepStart\n        * @this {body} The body that has started sleeping\n        * @param {} event An event object\n        * @param {} event.source The source object of the event\n        * @param {} event.name The name of the event\n        */\n\n        /**\n        * Fired when a body ends sleeping (where `this` is the body).\n        *\n        * @event sleepEnd\n        * @this {body} The body that has ended sleeping\n        * @param {} event An event object\n        * @param {} event.source The source object of the event\n        * @param {} event.name The name of the event\n        */\n\n        /*\n        *\n        *  Properties Documentation\n        *\n        */\n\n        /**\n         * An integer `Number` uniquely identifying number generated in `Body.create` by `Common.nextId`.\n         *\n         * @property id\n         * @type number\n         */\n\n        /**\n         * A `String` denoting the type of object.\n         *\n         * @property type\n         * @type string\n         * @default \"body\"\n         * @readOnly\n         */\n\n        /**\n         * An arbitrary `String` name to help the user identify and manage bodies.\n         *\n         * @property label\n         * @type string\n         * @default \"Body\"\n         */\n\n        /**\n         * An array of bodies that make up this body. \n         * The first body in the array must always be a self reference to the current body instance.\n         * All bodies in the `parts` array together form a single rigid compound body.\n         * Parts are allowed to overlap, have gaps or holes or even form concave bodies.\n         * Parts themselves should never be added to a `World`, only the parent body should be.\n         * Use `Body.setParts` when setting parts to ensure correct updates of all properties.\n         *\n         * @property parts\n         * @type body[]\n         */\n\n        /**\n         * An object reserved for storing plugin-specific properties.\n         *\n         * @property plugin\n         * @type {}\n         */\n\n        /**\n         * A self reference if the body is _not_ a part of another body.\n         * Otherwise this is a reference to the body that this is a part of.\n         * See `body.parts`.\n         *\n         * @property parent\n         * @type body\n         */\n\n        /**\n         * A `Number` specifying the angle of the body, in radians.\n         *\n         * @property angle\n         * @type number\n         * @default 0\n         */\n\n        /**\n         * An array of `Vector` objects that specify the convex hull of the rigid body.\n         * These should be provided about the origin `(0, 0)`. E.g.\n         *\n         *     [{ x: 0, y: 0 }, { x: 25, y: 50 }, { x: 50, y: 0 }]\n         *\n         * When passed via `Body.create`, the vertices are translated relative to `body.position` (i.e. world-space, and constantly updated by `Body.update` during simulation).\n         * The `Vector` objects are also augmented with additional properties required for efficient collision detection. \n         *\n         * Other properties such as `inertia` and `bounds` are automatically calculated from the passed vertices (unless provided via `options`).\n         * Concave hulls are not currently supported. The module `Matter.Vertices` contains useful methods for working with vertices.\n         *\n         * @property vertices\n         * @type vector[]\n         */\n\n        /**\n         * A `Vector` that specifies the current world-space position of the body.\n         *\n         * @property position\n         * @type vector\n         * @default { x: 0, y: 0 }\n         */\n\n        /**\n         * A `Vector` that specifies the force to apply in the current step. It is zeroed after every `Body.update`. See also `Body.applyForce`.\n         *\n         * @property force\n         * @type vector\n         * @default { x: 0, y: 0 }\n         */\n\n        /**\n         * A `Number` that specifies the torque (turning force) to apply in the current step. It is zeroed after every `Body.update`.\n         *\n         * @property torque\n         * @type number\n         * @default 0\n         */\n\n        /**\n         * A `Number` that _measures_ the current speed of the body after the last `Body.update`. It is read-only and always positive (it's the magnitude of `body.velocity`).\n         *\n         * @readOnly\n         * @property speed\n         * @type number\n         * @default 0\n         */\n\n        /**\n         * A `Number` that _measures_ the current angular speed of the body after the last `Body.update`. It is read-only and always positive (it's the magnitude of `body.angularVelocity`).\n         *\n         * @readOnly\n         * @property angularSpeed\n         * @type number\n         * @default 0\n         */\n\n        /**\n         * A `Vector` that _measures_ the current velocity of the body after the last `Body.update`. It is read-only. \n         * If you need to modify a body's velocity directly, you should either apply a force or simply change the body's `position` (as the engine uses position-Verlet integration).\n         *\n         * @readOnly\n         * @property velocity\n         * @type vector\n         * @default { x: 0, y: 0 }\n         */\n\n        /**\n         * A `Number` that _measures_ the current angular velocity of the body after the last `Body.update`. It is read-only. \n         * If you need to modify a body's angular velocity directly, you should apply a torque or simply change the body's `angle` (as the engine uses position-Verlet integration).\n         *\n         * @readOnly\n         * @property angularVelocity\n         * @type number\n         * @default 0\n         */\n\n        /**\n         * A flag that indicates whether a body is considered static. A static body can never change position or angle and is completely fixed.\n         * If you need to set a body as static after its creation, you should use `Body.setStatic` as this requires more than just setting this flag.\n         *\n         * @property isStatic\n         * @type boolean\n         * @default false\n         */\n\n        /**\n         * A flag that indicates whether a body is a sensor. Sensor triggers collision events, but doesn't react with colliding body physically.\n         *\n         * @property isSensor\n         * @type boolean\n         * @default false\n         */\n\n        /**\n         * A flag that indicates whether the body is considered sleeping. A sleeping body acts similar to a static body, except it is only temporary and can be awoken.\n         * If you need to set a body as sleeping, you should use `Sleeping.set` as this requires more than just setting this flag.\n         *\n         * @property isSleeping\n         * @type boolean\n         * @default false\n         */\n\n        /**\n         * A `Number` that _measures_ the amount of movement a body currently has (a combination of `speed` and `angularSpeed`). It is read-only and always positive.\n         * It is used and updated by the `Matter.Sleeping` module during simulation to decide if a body has come to rest.\n         *\n         * @readOnly\n         * @property motion\n         * @type number\n         * @default 0\n         */\n\n        /**\n         * A `Number` that defines the number of updates in which this body must have near-zero velocity before it is set as sleeping by the `Matter.Sleeping` module (if sleeping is enabled by the engine).\n         *\n         * @property sleepThreshold\n         * @type number\n         * @default 60\n         */\n\n        /**\n         * A `Number` that defines the density of the body, that is its mass per unit area.\n         * If you pass the density via `Body.create` the `mass` property is automatically calculated for you based on the size (area) of the object.\n         * This is generally preferable to simply setting mass and allows for more intuitive definition of materials (e.g. rock has a higher density than wood).\n         *\n         * @property density\n         * @type number\n         * @default 0.001\n         */\n\n        /**\n         * A `Number` that defines the mass of the body, although it may be more appropriate to specify the `density` property instead.\n         * If you modify this value, you must also modify the `body.inverseMass` property (`1 / mass`).\n         *\n         * @property mass\n         * @type number\n         */\n\n        /**\n         * A `Number` that defines the inverse mass of the body (`1 / mass`).\n         * If you modify this value, you must also modify the `body.mass` property.\n         *\n         * @property inverseMass\n         * @type number\n         */\n\n        /**\n         * A `Number` that defines the moment of inertia (i.e. second moment of area) of the body.\n         * It is automatically calculated from the given convex hull (`vertices` array) and density in `Body.create`.\n         * If you modify this value, you must also modify the `body.inverseInertia` property (`1 / inertia`).\n         *\n         * @property inertia\n         * @type number\n         */\n\n        /**\n         * A `Number` that defines the inverse moment of inertia of the body (`1 / inertia`).\n         * If you modify this value, you must also modify the `body.inertia` property.\n         *\n         * @property inverseInertia\n         * @type number\n         */\n\n        /**\n         * A `Number` that defines the restitution (elasticity) of the body. The value is always positive and is in the range `(0, 1)`.\n         * A value of `0` means collisions may be perfectly inelastic and no bouncing may occur. \n         * A value of `0.8` means the body may bounce back with approximately 80% of its kinetic energy.\n         * Note that collision response is based on _pairs_ of bodies, and that `restitution` values are _combined_ with the following formula:\n         *\n         *     Math.max(bodyA.restitution, bodyB.restitution)\n         *\n         * @property restitution\n         * @type number\n         * @default 0\n         */\n\n        /**\n         * A `Number` that defines the friction of the body. The value is always positive and is in the range `(0, 1)`.\n         * A value of `0` means that the body may slide indefinitely.\n         * A value of `1` means the body may come to a stop almost instantly after a force is applied.\n         *\n         * The effects of the value may be non-linear. \n         * High values may be unstable depending on the body.\n         * The engine uses a Coulomb friction model including static and kinetic friction.\n         * Note that collision response is based on _pairs_ of bodies, and that `friction` values are _combined_ with the following formula:\n         *\n         *     Math.min(bodyA.friction, bodyB.friction)\n         *\n         * @property friction\n         * @type number\n         * @default 0.1\n         */\n\n        /**\n         * A `Number` that defines the static friction of the body (in the Coulomb friction model). \n         * A value of `0` means the body will never 'stick' when it is nearly stationary and only dynamic `friction` is used.\n         * The higher the value (e.g. `10`), the more force it will take to initially get the body moving when nearly stationary.\n         * This value is multiplied with the `friction` property to make it easier to change `friction` and maintain an appropriate amount of static friction.\n         *\n         * @property frictionStatic\n         * @type number\n         * @default 0.5\n         */\n\n        /**\n         * A `Number` that defines the air friction of the body (air resistance). \n         * A value of `0` means the body will never slow as it moves through space.\n         * The higher the value, the faster a body slows when moving through space.\n         * The effects of the value are non-linear. \n         *\n         * @property frictionAir\n         * @type number\n         * @default 0.01\n         */\n\n        /**\n         * An `Object` that specifies the collision filtering properties of this body.\n         *\n         * Collisions between two bodies will obey the following rules:\n         * - If the two bodies have the same non-zero value of `collisionFilter.group`,\n         *   they will always collide if the value is positive, and they will never collide\n         *   if the value is negative.\n         * - If the two bodies have different values of `collisionFilter.group` or if one\n         *   (or both) of the bodies has a value of 0, then the category/mask rules apply as follows:\n         *\n         * Each body belongs to a collision category, given by `collisionFilter.category`. This\n         * value is used as a bit field and the category should have only one bit set, meaning that\n         * the value of this property is a power of two in the range [1, 2^31]. Thus, there are 32\n         * different collision categories available.\n         *\n         * Each body also defines a collision bitmask, given by `collisionFilter.mask` which specifies\n         * the categories it collides with (the value is the bitwise AND value of all these categories).\n         *\n         * Using the category/mask rules, two bodies `A` and `B` collide if each includes the other's\n         * category in its mask, i.e. `(categoryA & maskB) !== 0` and `(categoryB & maskA) !== 0`\n         * are both true.\n         *\n         * @property collisionFilter\n         * @type object\n         */\n\n        /**\n         * An Integer `Number`, that specifies the collision group this body belongs to.\n         * See `body.collisionFilter` for more information.\n         *\n         * @property collisionFilter.group\n         * @type object\n         * @default 0\n         */\n\n        /**\n         * A bit field that specifies the collision category this body belongs to.\n         * The category value should have only one bit set, for example `0x0001`.\n         * This means there are up to 32 unique collision categories available.\n         * See `body.collisionFilter` for more information.\n         *\n         * @property collisionFilter.category\n         * @type object\n         * @default 1\n         */\n\n        /**\n         * A bit mask that specifies the collision categories this body may collide with.\n         * See `body.collisionFilter` for more information.\n         *\n         * @property collisionFilter.mask\n         * @type object\n         * @default -1\n         */\n\n        /**\n         * A `Number` that specifies a tolerance on how far a body is allowed to 'sink' or rotate into other bodies.\n         * Avoid changing this value unless you understand the purpose of `slop` in physics engines.\n         * The default should generally suffice, although very large bodies may require larger values for stable stacking.\n         *\n         * @property slop\n         * @type number\n         * @default 0.05\n         */\n\n        /**\n         * A `Number` that allows per-body time scaling, e.g. a force-field where bodies inside are in slow-motion, while others are at full speed.\n         *\n         * @property timeScale\n         * @type number\n         * @default 1\n         */\n\n        /**\n         * An `Object` that defines the rendering properties to be consumed by the module `Matter.Render`.\n         *\n         * @property render\n         * @type object\n         */\n\n        /**\n         * A flag that indicates if the body should be rendered.\n         *\n         * @property render.visible\n         * @type boolean\n         * @default true\n         */\n\n        /**\n         * Sets the opacity to use when rendering.\n         *\n         * @property render.opacity\n         * @type number\n         * @default 1\n        */\n\n        /**\n         * An `Object` that defines the sprite properties to use when rendering, if any.\n         *\n         * @property render.sprite\n         * @type object\n         */\n\n        /**\n         * An `String` that defines the path to the image to use as the sprite texture, if any.\n         *\n         * @property render.sprite.texture\n         * @type string\n         */\n\n        /**\n         * A `Number` that defines the scaling in the x-axis for the sprite, if any.\n         *\n         * @property render.sprite.xScale\n         * @type number\n         * @default 1\n         */\n\n        /**\n         * A `Number` that defines the scaling in the y-axis for the sprite, if any.\n         *\n         * @property render.sprite.yScale\n         * @type number\n         * @default 1\n         */\n\n        /**\n          * A `Number` that defines the offset in the x-axis for the sprite (normalised by texture width).\n          *\n          * @property render.sprite.xOffset\n          * @type number\n          * @default 0\n          */\n\n        /**\n          * A `Number` that defines the offset in the y-axis for the sprite (normalised by texture height).\n          *\n          * @property render.sprite.yOffset\n          * @type number\n          * @default 0\n          */\n\n        /**\n         * A `Number` that defines the line width to use when rendering the body outline (if a sprite is not defined).\n         * A value of `0` means no outline will be rendered.\n         *\n         * @property render.lineWidth\n         * @type number\n         * @default 0\n         */\n\n        /**\n         * A `String` that defines the fill style to use when rendering the body (if a sprite is not defined).\n         * It is the same as when using a canvas, so it accepts CSS style property values.\n         *\n         * @property render.fillStyle\n         * @type string\n         * @default a random colour\n         */\n\n        /**\n         * A `String` that defines the stroke style to use when rendering the body outline (if a sprite is not defined).\n         * It is the same as when using a canvas, so it accepts CSS style property values.\n         *\n         * @property render.strokeStyle\n         * @type string\n         * @default a random colour\n         */\n\n        /**\n         * An array of unique axis vectors (edge normals) used for collision detection.\n         * These are automatically calculated from the given convex hull (`vertices` array) in `Body.create`.\n         * They are constantly updated by `Body.update` during the simulation.\n         *\n         * @property axes\n         * @type vector[]\n         */\n\n        /**\n         * A `Number` that _measures_ the area of the body's convex hull, calculated at creation by `Body.create`.\n         *\n         * @property area\n         * @type string\n         * @default \n         */\n\n        /**\n         * A `Bounds` object that defines the AABB region for the body.\n         * It is automatically calculated from the given convex hull (`vertices` array) in `Body.create` and constantly updated by `Body.update` during simulation.\n         *\n         * @property bounds\n         * @type bounds\n         */\n\n      })();\n      /***/\n\n    },\n    /* 7 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      /**\n      * The `Matter.Sleeping` module contains methods to manage the sleeping state of bodies.\n      *\n      * @class Sleeping\n      */\n      var Sleeping = {};\n      module.exports = Sleeping;\n\n      var Events = __webpack_require__(4);\n\n      (function () {\n        Sleeping._motionWakeThreshold = 0.18;\n        Sleeping._motionSleepThreshold = 0.08;\n        Sleeping._minBias = 0.9;\n        /**\n         * Puts bodies to sleep or wakes them up depending on their motion.\n         * @method update\n         * @param {body[]} bodies\n         * @param {number} timeScale\n         */\n\n        Sleeping.update = function (bodies, timeScale) {\n          var timeFactor = timeScale * timeScale * timeScale; // update bodies sleeping status\n\n          for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i],\n                motion = body.speed * body.speed + body.angularSpeed * body.angularSpeed; // wake up bodies if they have a force applied\n\n            if (body.force.x !== 0 || body.force.y !== 0) {\n              Sleeping.set(body, false);\n              continue;\n            }\n\n            var minMotion = Math.min(body.motion, motion),\n                maxMotion = Math.max(body.motion, motion); // biased average motion estimation between frames\n\n            body.motion = Sleeping._minBias * minMotion + (1 - Sleeping._minBias) * maxMotion;\n\n            if (body.sleepThreshold > 0 && body.motion < Sleeping._motionSleepThreshold * timeFactor) {\n              body.sleepCounter += 1;\n              if (body.sleepCounter >= body.sleepThreshold) Sleeping.set(body, true);\n            } else if (body.sleepCounter > 0) {\n              body.sleepCounter -= 1;\n            }\n          }\n        };\n        /**\n         * Given a set of colliding pairs, wakes the sleeping bodies involved.\n         * @method afterCollisions\n         * @param {pair[]} pairs\n         * @param {number} timeScale\n         */\n\n\n        Sleeping.afterCollisions = function (pairs, timeScale) {\n          var timeFactor = timeScale * timeScale * timeScale; // wake up bodies involved in collisions\n\n          for (var i = 0; i < pairs.length; i++) {\n            var pair = pairs[i]; // don't wake inactive pairs\n\n            if (!pair.isActive) continue;\n            var collision = pair.collision,\n                bodyA = collision.bodyA.parent,\n                bodyB = collision.bodyB.parent; // don't wake if at least one body is static\n\n            if (bodyA.isSleeping && bodyB.isSleeping || bodyA.isStatic || bodyB.isStatic) continue;\n\n            if (bodyA.isSleeping || bodyB.isSleeping) {\n              var sleepingBody = bodyA.isSleeping && !bodyA.isStatic ? bodyA : bodyB,\n                  movingBody = sleepingBody === bodyA ? bodyB : bodyA;\n\n              if (!sleepingBody.isStatic && movingBody.motion > Sleeping._motionWakeThreshold * timeFactor) {\n                Sleeping.set(sleepingBody, false);\n              }\n            }\n          }\n        };\n        /**\n         * Set a body as sleeping or awake.\n         * @method set\n         * @param {body} body\n         * @param {boolean} isSleeping\n         */\n\n\n        Sleeping.set = function (body, isSleeping) {\n          var wasSleeping = body.isSleeping;\n\n          if (isSleeping) {\n            body.isSleeping = true;\n            body.sleepCounter = body.sleepThreshold;\n            body.positionImpulse.x = 0;\n            body.positionImpulse.y = 0;\n            body.positionPrev.x = body.position.x;\n            body.positionPrev.y = body.position.y;\n            body.anglePrev = body.angle;\n            body.speed = 0;\n            body.angularSpeed = 0;\n            body.motion = 0;\n\n            if (!wasSleeping) {\n              Events.trigger(body, 'sleepStart');\n            }\n          } else {\n            body.isSleeping = false;\n            body.sleepCounter = 0;\n\n            if (wasSleeping) {\n              Events.trigger(body, 'sleepEnd');\n            }\n          }\n        };\n      })();\n      /***/\n\n    },\n    /* 8 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      /**\n      * The `Matter.Constraint` module contains methods for creating and manipulating constraints.\n      * Constraints are used for specifying that a fixed distance must be maintained between two bodies (or a body and a fixed world-space position).\n      * The stiffness of constraints can be modified to create springs or elastic.\n      *\n      * See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n      *\n      * @class Constraint\n      */\n      var Constraint = {};\n      module.exports = Constraint;\n\n      var Vertices = __webpack_require__(3);\n\n      var Vector = __webpack_require__(2);\n\n      var Sleeping = __webpack_require__(7);\n\n      var Bounds = __webpack_require__(1);\n\n      var Axes = __webpack_require__(15);\n\n      var Common = __webpack_require__(0);\n\n      (function () {\n        Constraint._warming = 0.4;\n        Constraint._torqueDampen = 1;\n        Constraint._minLength = 0.000001;\n        /**\n         * Creates a new constraint.\n         * All properties have default values, and many are pre-calculated automatically based on other properties.\n         * To simulate a revolute constraint (or pin joint) set `length: 0` and a high `stiffness` value (e.g. `0.7` or above).\n         * If the constraint is unstable, try lowering the `stiffness` value and / or increasing `engine.constraintIterations`.\n         * For compound bodies, constraints must be applied to the parent body (not one of its parts).\n         * See the properties section below for detailed information on what you can pass via the `options` object.\n         * @method create\n         * @param {} options\n         * @return {constraint} constraint\n         */\n\n        Constraint.create = function (options) {\n          var constraint = options; // if bodies defined but no points, use body centre\n\n          if (constraint.bodyA && !constraint.pointA) constraint.pointA = {\n            x: 0,\n            y: 0\n          };\n          if (constraint.bodyB && !constraint.pointB) constraint.pointB = {\n            x: 0,\n            y: 0\n          }; // calculate static length using initial world space points\n\n          var initialPointA = constraint.bodyA ? Vector.add(constraint.bodyA.position, constraint.pointA) : constraint.pointA,\n              initialPointB = constraint.bodyB ? Vector.add(constraint.bodyB.position, constraint.pointB) : constraint.pointB,\n              length = Vector.magnitude(Vector.sub(initialPointA, initialPointB));\n          constraint.length = typeof constraint.length !== 'undefined' ? constraint.length : length; // option defaults\n\n          constraint.id = constraint.id || Common.nextId();\n          constraint.label = constraint.label || 'Constraint';\n          constraint.type = 'constraint';\n          constraint.stiffness = constraint.stiffness || (constraint.length > 0 ? 1 : 0.7);\n          constraint.damping = constraint.damping || 0;\n          constraint.angularStiffness = constraint.angularStiffness || 0;\n          constraint.angleA = constraint.bodyA ? constraint.bodyA.angle : constraint.angleA;\n          constraint.angleB = constraint.bodyB ? constraint.bodyB.angle : constraint.angleB;\n          constraint.plugin = {}; // render\n\n          var render = {\n            visible: true,\n            lineWidth: 2,\n            strokeStyle: '#ffffff',\n            type: 'line',\n            anchors: true\n          };\n\n          if (constraint.length === 0 && constraint.stiffness > 0.1) {\n            render.type = 'pin';\n            render.anchors = false;\n          } else if (constraint.stiffness < 0.9) {\n            render.type = 'spring';\n          }\n\n          constraint.render = Common.extend(render, constraint.render);\n          return constraint;\n        };\n        /**\n         * Prepares for solving by constraint warming.\n         * @private\n         * @method preSolveAll\n         * @param {body[]} bodies\n         */\n\n\n        Constraint.preSolveAll = function (bodies) {\n          for (var i = 0; i < bodies.length; i += 1) {\n            var body = bodies[i],\n                impulse = body.constraintImpulse;\n\n            if (body.isStatic || impulse.x === 0 && impulse.y === 0 && impulse.angle === 0) {\n              continue;\n            }\n\n            body.position.x += impulse.x;\n            body.position.y += impulse.y;\n            body.angle += impulse.angle;\n          }\n        };\n        /**\n         * Solves all constraints in a list of collisions.\n         * @private\n         * @method solveAll\n         * @param {constraint[]} constraints\n         * @param {number} timeScale\n         */\n\n\n        Constraint.solveAll = function (constraints, timeScale) {\n          // Solve fixed constraints first.\n          for (var i = 0; i < constraints.length; i += 1) {\n            var constraint = constraints[i],\n                fixedA = !constraint.bodyA || constraint.bodyA && constraint.bodyA.isStatic,\n                fixedB = !constraint.bodyB || constraint.bodyB && constraint.bodyB.isStatic;\n\n            if (fixedA || fixedB) {\n              Constraint.solve(constraints[i], timeScale);\n            }\n          } // Solve free constraints last.\n\n\n          for (i = 0; i < constraints.length; i += 1) {\n            constraint = constraints[i];\n            fixedA = !constraint.bodyA || constraint.bodyA && constraint.bodyA.isStatic;\n            fixedB = !constraint.bodyB || constraint.bodyB && constraint.bodyB.isStatic;\n\n            if (!fixedA && !fixedB) {\n              Constraint.solve(constraints[i], timeScale);\n            }\n          }\n        };\n        /**\n         * Solves a distance constraint with Gauss-Siedel method.\n         * @private\n         * @method solve\n         * @param {constraint} constraint\n         * @param {number} timeScale\n         */\n\n\n        Constraint.solve = function (constraint, timeScale) {\n          var bodyA = constraint.bodyA,\n              bodyB = constraint.bodyB,\n              pointA = constraint.pointA,\n              pointB = constraint.pointB;\n          if (!bodyA && !bodyB) return; // update reference angle\n\n          if (bodyA && !bodyA.isStatic) {\n            Vector.rotate(pointA, bodyA.angle - constraint.angleA, pointA);\n            constraint.angleA = bodyA.angle;\n          } // update reference angle\n\n\n          if (bodyB && !bodyB.isStatic) {\n            Vector.rotate(pointB, bodyB.angle - constraint.angleB, pointB);\n            constraint.angleB = bodyB.angle;\n          }\n\n          var pointAWorld = pointA,\n              pointBWorld = pointB;\n          if (bodyA) pointAWorld = Vector.add(bodyA.position, pointA);\n          if (bodyB) pointBWorld = Vector.add(bodyB.position, pointB);\n          if (!pointAWorld || !pointBWorld) return;\n          var delta = Vector.sub(pointAWorld, pointBWorld),\n              currentLength = Vector.magnitude(delta); // prevent singularity\n\n          if (currentLength < Constraint._minLength) {\n            currentLength = Constraint._minLength;\n          } // solve distance constraint with Gauss-Siedel method\n\n\n          var difference = (currentLength - constraint.length) / currentLength,\n              stiffness = constraint.stiffness < 1 ? constraint.stiffness * timeScale : constraint.stiffness,\n              force = Vector.mult(delta, difference * stiffness),\n              massTotal = (bodyA ? bodyA.inverseMass : 0) + (bodyB ? bodyB.inverseMass : 0),\n              inertiaTotal = (bodyA ? bodyA.inverseInertia : 0) + (bodyB ? bodyB.inverseInertia : 0),\n              resistanceTotal = massTotal + inertiaTotal,\n              torque,\n              share,\n              normal,\n              normalVelocity,\n              relativeVelocity;\n\n          if (constraint.damping) {\n            var zero = Vector.create();\n            normal = Vector.div(delta, currentLength);\n            relativeVelocity = Vector.sub(bodyB && Vector.sub(bodyB.position, bodyB.positionPrev) || zero, bodyA && Vector.sub(bodyA.position, bodyA.positionPrev) || zero);\n            normalVelocity = Vector.dot(normal, relativeVelocity);\n          }\n\n          if (bodyA && !bodyA.isStatic) {\n            share = bodyA.inverseMass / massTotal; // keep track of applied impulses for post solving\n\n            bodyA.constraintImpulse.x -= force.x * share;\n            bodyA.constraintImpulse.y -= force.y * share; // apply forces\n\n            bodyA.position.x -= force.x * share;\n            bodyA.position.y -= force.y * share; // apply damping\n\n            if (constraint.damping) {\n              bodyA.positionPrev.x -= constraint.damping * normal.x * normalVelocity * share;\n              bodyA.positionPrev.y -= constraint.damping * normal.y * normalVelocity * share;\n            } // apply torque\n\n\n            torque = Vector.cross(pointA, force) / resistanceTotal * Constraint._torqueDampen * bodyA.inverseInertia * (1 - constraint.angularStiffness);\n            bodyA.constraintImpulse.angle -= torque;\n            bodyA.angle -= torque;\n          }\n\n          if (bodyB && !bodyB.isStatic) {\n            share = bodyB.inverseMass / massTotal; // keep track of applied impulses for post solving\n\n            bodyB.constraintImpulse.x += force.x * share;\n            bodyB.constraintImpulse.y += force.y * share; // apply forces\n\n            bodyB.position.x += force.x * share;\n            bodyB.position.y += force.y * share; // apply damping\n\n            if (constraint.damping) {\n              bodyB.positionPrev.x += constraint.damping * normal.x * normalVelocity * share;\n              bodyB.positionPrev.y += constraint.damping * normal.y * normalVelocity * share;\n            } // apply torque\n\n\n            torque = Vector.cross(pointB, force) / resistanceTotal * Constraint._torqueDampen * bodyB.inverseInertia * (1 - constraint.angularStiffness);\n            bodyB.constraintImpulse.angle += torque;\n            bodyB.angle += torque;\n          }\n        };\n        /**\n         * Performs body updates required after solving constraints.\n         * @private\n         * @method postSolveAll\n         * @param {body[]} bodies\n         */\n\n\n        Constraint.postSolveAll = function (bodies) {\n          for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i],\n                impulse = body.constraintImpulse;\n\n            if (body.isStatic || impulse.x === 0 && impulse.y === 0 && impulse.angle === 0) {\n              continue;\n            }\n\n            Sleeping.set(body, false); // update geometry and reset\n\n            for (var j = 0; j < body.parts.length; j++) {\n              var part = body.parts[j];\n              Vertices.translate(part.vertices, impulse);\n\n              if (j > 0) {\n                part.position.x += impulse.x;\n                part.position.y += impulse.y;\n              }\n\n              if (impulse.angle !== 0) {\n                Vertices.rotate(part.vertices, impulse.angle, body.position);\n                Axes.rotate(part.axes, impulse.angle);\n\n                if (j > 0) {\n                  Vector.rotateAbout(part.position, impulse.angle, body.position, part.position);\n                }\n              }\n\n              Bounds.update(part.bounds, part.vertices, body.velocity);\n            } // dampen the cached impulse for warming next step\n\n\n            impulse.angle *= Constraint._warming;\n            impulse.x *= Constraint._warming;\n            impulse.y *= Constraint._warming;\n          }\n        };\n        /**\n         * Returns the world-space position of `constraint.pointA`, accounting for `constraint.bodyA`.\n         * @method pointAWorld\n         * @param {constraint} constraint\n         * @returns {vector} the world-space position\n         */\n\n\n        Constraint.pointAWorld = function (constraint) {\n          return {\n            x: (constraint.bodyA ? constraint.bodyA.position.x : 0) + constraint.pointA.x,\n            y: (constraint.bodyA ? constraint.bodyA.position.y : 0) + constraint.pointA.y\n          };\n        };\n        /**\n         * Returns the world-space position of `constraint.pointB`, accounting for `constraint.bodyB`.\n         * @method pointBWorld\n         * @param {constraint} constraint\n         * @returns {vector} the world-space position\n         */\n\n\n        Constraint.pointBWorld = function (constraint) {\n          return {\n            x: (constraint.bodyB ? constraint.bodyB.position.x : 0) + constraint.pointB.x,\n            y: (constraint.bodyB ? constraint.bodyB.position.y : 0) + constraint.pointB.y\n          };\n        };\n        /*\n        *\n        *  Properties Documentation\n        *\n        */\n\n        /**\n         * An integer `Number` uniquely identifying number generated in `Composite.create` by `Common.nextId`.\n         *\n         * @property id\n         * @type number\n         */\n\n        /**\n         * A `String` denoting the type of object.\n         *\n         * @property type\n         * @type string\n         * @default \"constraint\"\n         * @readOnly\n         */\n\n        /**\n         * An arbitrary `String` name to help the user identify and manage bodies.\n         *\n         * @property label\n         * @type string\n         * @default \"Constraint\"\n         */\n\n        /**\n         * An `Object` that defines the rendering properties to be consumed by the module `Matter.Render`.\n         *\n         * @property render\n         * @type object\n         */\n\n        /**\n         * A flag that indicates if the constraint should be rendered.\n         *\n         * @property render.visible\n         * @type boolean\n         * @default true\n         */\n\n        /**\n         * A `Number` that defines the line width to use when rendering the constraint outline.\n         * A value of `0` means no outline will be rendered.\n         *\n         * @property render.lineWidth\n         * @type number\n         * @default 2\n         */\n\n        /**\n         * A `String` that defines the stroke style to use when rendering the constraint outline.\n         * It is the same as when using a canvas, so it accepts CSS style property values.\n         *\n         * @property render.strokeStyle\n         * @type string\n         * @default a random colour\n         */\n\n        /**\n         * A `String` that defines the constraint rendering type. \n         * The possible values are 'line', 'pin', 'spring'.\n         * An appropriate render type will be automatically chosen unless one is given in options.\n         *\n         * @property render.type\n         * @type string\n         * @default 'line'\n         */\n\n        /**\n         * A `Boolean` that defines if the constraint's anchor points should be rendered.\n         *\n         * @property render.anchors\n         * @type boolean\n         * @default true\n         */\n\n        /**\n         * The first possible `Body` that this constraint is attached to.\n         *\n         * @property bodyA\n         * @type body\n         * @default null\n         */\n\n        /**\n         * The second possible `Body` that this constraint is attached to.\n         *\n         * @property bodyB\n         * @type body\n         * @default null\n         */\n\n        /**\n         * A `Vector` that specifies the offset of the constraint from center of the `constraint.bodyA` if defined, otherwise a world-space position.\n         *\n         * @property pointA\n         * @type vector\n         * @default { x: 0, y: 0 }\n         */\n\n        /**\n         * A `Vector` that specifies the offset of the constraint from center of the `constraint.bodyB` if defined, otherwise a world-space position.\n         *\n         * @property pointB\n         * @type vector\n         * @default { x: 0, y: 0 }\n         */\n\n        /**\n         * A `Number` that specifies the stiffness of the constraint, i.e. the rate at which it returns to its resting `constraint.length`.\n         * A value of `1` means the constraint should be very stiff.\n         * A value of `0.2` means the constraint acts like a soft spring.\n         *\n         * @property stiffness\n         * @type number\n         * @default 1\n         */\n\n        /**\n         * A `Number` that specifies the damping of the constraint, \n         * i.e. the amount of resistance applied to each body based on their velocities to limit the amount of oscillation.\n         * Damping will only be apparent when the constraint also has a very low `stiffness`.\n         * A value of `0.1` means the constraint will apply heavy damping, resulting in little to no oscillation.\n         * A value of `0` means the constraint will apply no damping.\n         *\n         * @property damping\n         * @type number\n         * @default 0\n         */\n\n        /**\n         * A `Number` that specifies the target resting length of the constraint. \n         * It is calculated automatically in `Constraint.create` from initial positions of the `constraint.bodyA` and `constraint.bodyB`.\n         *\n         * @property length\n         * @type number\n         */\n\n        /**\n         * An object reserved for storing plugin-specific properties.\n         *\n         * @property plugin\n         * @type {}\n         */\n\n      })();\n      /***/\n\n    },\n    /* 9 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      /**\n      * The `Matter.Pair` module contains methods for creating and manipulating collision pairs.\n      *\n      * @class Pair\n      */\n      var Pair = {};\n      module.exports = Pair;\n\n      var Contact = __webpack_require__(18);\n\n      (function () {\n        /**\n         * Creates a pair.\n         * @method create\n         * @param {collision} collision\n         * @param {number} timestamp\n         * @return {pair} A new pair\n         */\n        Pair.create = function (collision, timestamp) {\n          var bodyA = collision.bodyA,\n              bodyB = collision.bodyB,\n              parentA = collision.parentA,\n              parentB = collision.parentB;\n          var pair = {\n            id: Pair.id(bodyA, bodyB),\n            bodyA: bodyA,\n            bodyB: bodyB,\n            contacts: {},\n            activeContacts: [],\n            separation: 0,\n            isActive: true,\n            confirmedActive: true,\n            isSensor: bodyA.isSensor || bodyB.isSensor,\n            timeCreated: timestamp,\n            timeUpdated: timestamp,\n            inverseMass: parentA.inverseMass + parentB.inverseMass,\n            friction: Math.min(parentA.friction, parentB.friction),\n            frictionStatic: Math.max(parentA.frictionStatic, parentB.frictionStatic),\n            restitution: Math.max(parentA.restitution, parentB.restitution),\n            slop: Math.max(parentA.slop, parentB.slop)\n          };\n          Pair.update(pair, collision, timestamp);\n          return pair;\n        };\n        /**\n         * Updates a pair given a collision.\n         * @method update\n         * @param {pair} pair\n         * @param {collision} collision\n         * @param {number} timestamp\n         */\n\n\n        Pair.update = function (pair, collision, timestamp) {\n          var contacts = pair.contacts,\n              supports = collision.supports,\n              activeContacts = pair.activeContacts,\n              parentA = collision.parentA,\n              parentB = collision.parentB;\n          pair.collision = collision;\n          pair.inverseMass = parentA.inverseMass + parentB.inverseMass;\n          pair.friction = Math.min(parentA.friction, parentB.friction);\n          pair.frictionStatic = Math.max(parentA.frictionStatic, parentB.frictionStatic);\n          pair.restitution = Math.max(parentA.restitution, parentB.restitution);\n          pair.slop = Math.max(parentA.slop, parentB.slop);\n          activeContacts.length = 0;\n\n          if (collision.collided) {\n            for (var i = 0; i < supports.length; i++) {\n              var support = supports[i],\n                  contactId = Contact.id(support),\n                  contact = contacts[contactId];\n\n              if (contact) {\n                activeContacts.push(contact);\n              } else {\n                activeContacts.push(contacts[contactId] = Contact.create(support));\n              }\n            }\n\n            pair.separation = collision.depth;\n            Pair.setActive(pair, true, timestamp);\n          } else {\n            if (pair.isActive === true) Pair.setActive(pair, false, timestamp);\n          }\n        };\n        /**\n         * Set a pair as active or inactive.\n         * @method setActive\n         * @param {pair} pair\n         * @param {bool} isActive\n         * @param {number} timestamp\n         */\n\n\n        Pair.setActive = function (pair, isActive, timestamp) {\n          if (isActive) {\n            pair.isActive = true;\n            pair.timeUpdated = timestamp;\n          } else {\n            pair.isActive = false;\n            pair.activeContacts.length = 0;\n          }\n        };\n        /**\n         * Get the id for the given pair.\n         * @method id\n         * @param {body} bodyA\n         * @param {body} bodyB\n         * @return {string} Unique pairId\n         */\n\n\n        Pair.id = function (bodyA, bodyB) {\n          if (bodyA.id < bodyB.id) {\n            return 'A' + bodyA.id + 'B' + bodyB.id;\n          } else {\n            return 'A' + bodyB.id + 'B' + bodyA.id;\n          }\n        };\n      })();\n      /***/\n\n    },\n    /* 10 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      /**\n      * The `Matter.Render` module is a simple HTML5 canvas based renderer for visualising instances of `Matter.Engine`.\n      * It is intended for development and debugging purposes, but may also be suitable for simple games.\n      * It includes a number of drawing options including wireframe, vector with support for sprites and viewports.\n      *\n      * @class Render\n      */\n      var Render = {};\n      module.exports = Render;\n\n      var Common = __webpack_require__(0);\n\n      var Composite = __webpack_require__(5);\n\n      var Bounds = __webpack_require__(1);\n\n      var Events = __webpack_require__(4);\n\n      var Grid = __webpack_require__(11);\n\n      var Vector = __webpack_require__(2);\n\n      var Mouse = __webpack_require__(14);\n\n      (function () {\n        var _requestAnimationFrame, _cancelAnimationFrame;\n\n        if (typeof window !== 'undefined') {\n          _requestAnimationFrame = window.requestAnimationFrame || window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame || window.msRequestAnimationFrame || function (callback) {\n            window.setTimeout(function () {\n              callback(Common.now());\n            }, 1000 / 60);\n          };\n\n          _cancelAnimationFrame = window.cancelAnimationFrame || window.mozCancelAnimationFrame || window.webkitCancelAnimationFrame || window.msCancelAnimationFrame;\n        }\n        /**\n         * Creates a new renderer. The options parameter is an object that specifies any properties you wish to override the defaults.\n         * All properties have default values, and many are pre-calculated automatically based on other properties.\n         * See the properties section below for detailed information on what you can pass via the `options` object.\n         * @method create\n         * @param {object} [options]\n         * @return {render} A new renderer\n         */\n\n\n        Render.create = function (options) {\n          var defaults = {\n            controller: Render,\n            engine: null,\n            element: null,\n            canvas: null,\n            mouse: null,\n            frameRequestId: null,\n            options: {\n              width: 800,\n              height: 600,\n              pixelRatio: 1,\n              background: '#14151f',\n              wireframeBackground: '#14151f',\n              hasBounds: !!options.bounds,\n              enabled: true,\n              wireframes: true,\n              showSleeping: true,\n              showDebug: false,\n              showBroadphase: false,\n              showBounds: false,\n              showVelocity: false,\n              showCollisions: false,\n              showSeparations: false,\n              showAxes: false,\n              showPositions: false,\n              showAngleIndicator: false,\n              showIds: false,\n              showShadows: false,\n              showVertexNumbers: false,\n              showConvexHulls: false,\n              showInternalEdges: false,\n              showMousePosition: false\n            }\n          };\n          var render = Common.extend(defaults, options);\n\n          if (render.canvas) {\n            render.canvas.width = render.options.width || render.canvas.width;\n            render.canvas.height = render.options.height || render.canvas.height;\n          }\n\n          render.mouse = options.mouse;\n          render.engine = options.engine;\n          render.canvas = render.canvas || _createCanvas(render.options.width, render.options.height);\n          render.context = render.canvas.getContext('2d');\n          render.textures = {};\n          render.bounds = render.bounds || {\n            min: {\n              x: 0,\n              y: 0\n            },\n            max: {\n              x: render.canvas.width,\n              y: render.canvas.height\n            }\n          };\n\n          if (render.options.pixelRatio !== 1) {\n            Render.setPixelRatio(render, render.options.pixelRatio);\n          }\n\n          if (Common.isElement(render.element)) {\n            render.element.appendChild(render.canvas);\n          } else if (!render.canvas.parentNode) {\n            Common.log('Render.create: options.element was undefined, render.canvas was created but not appended', 'warn');\n          }\n\n          return render;\n        };\n        /**\n         * Continuously updates the render canvas on the `requestAnimationFrame` event.\n         * @method run\n         * @param {render} render\n         */\n\n\n        Render.run = function (render) {\n          (function loop(time) {\n            render.frameRequestId = _requestAnimationFrame(loop);\n            Render.world(render);\n          })();\n        };\n        /**\n         * Ends execution of `Render.run` on the given `render`, by canceling the animation frame request event loop.\n         * @method stop\n         * @param {render} render\n         */\n\n\n        Render.stop = function (render) {\n          _cancelAnimationFrame(render.frameRequestId);\n        };\n        /**\n         * Sets the pixel ratio of the renderer and updates the canvas.\n         * To automatically detect the correct ratio, pass the string `'auto'` for `pixelRatio`.\n         * @method setPixelRatio\n         * @param {render} render\n         * @param {number} pixelRatio\n         */\n\n\n        Render.setPixelRatio = function (render, pixelRatio) {\n          var options = render.options,\n              canvas = render.canvas;\n\n          if (pixelRatio === 'auto') {\n            pixelRatio = _getPixelRatio(canvas);\n          }\n\n          options.pixelRatio = pixelRatio;\n          canvas.setAttribute('data-pixel-ratio', pixelRatio);\n          canvas.width = options.width * pixelRatio;\n          canvas.height = options.height * pixelRatio;\n          canvas.style.width = options.width + 'px';\n          canvas.style.height = options.height + 'px';\n        };\n        /**\n         * Positions and sizes the viewport around the given object bounds.\n         * Objects must have at least one of the following properties:\n         * - `object.bounds`\n         * - `object.position`\n         * - `object.min` and `object.max`\n         * - `object.x` and `object.y`\n         * @method lookAt\n         * @param {render} render\n         * @param {object[]} objects\n         * @param {vector} [padding]\n         * @param {bool} [center=true]\n         */\n\n\n        Render.lookAt = function (render, objects, padding, center) {\n          center = typeof center !== 'undefined' ? center : true;\n          objects = Common.isArray(objects) ? objects : [objects];\n          padding = padding || {\n            x: 0,\n            y: 0\n          }; // find bounds of all objects\n\n          var bounds = {\n            min: {\n              x: Infinity,\n              y: Infinity\n            },\n            max: {\n              x: -Infinity,\n              y: -Infinity\n            }\n          };\n\n          for (var i = 0; i < objects.length; i += 1) {\n            var object = objects[i],\n                min = object.bounds ? object.bounds.min : object.min || object.position || object,\n                max = object.bounds ? object.bounds.max : object.max || object.position || object;\n\n            if (min && max) {\n              if (min.x < bounds.min.x) bounds.min.x = min.x;\n              if (max.x > bounds.max.x) bounds.max.x = max.x;\n              if (min.y < bounds.min.y) bounds.min.y = min.y;\n              if (max.y > bounds.max.y) bounds.max.y = max.y;\n            }\n          } // find ratios\n\n\n          var width = bounds.max.x - bounds.min.x + 2 * padding.x,\n              height = bounds.max.y - bounds.min.y + 2 * padding.y,\n              viewHeight = render.canvas.height,\n              viewWidth = render.canvas.width,\n              outerRatio = viewWidth / viewHeight,\n              innerRatio = width / height,\n              scaleX = 1,\n              scaleY = 1; // find scale factor\n\n          if (innerRatio > outerRatio) {\n            scaleY = innerRatio / outerRatio;\n          } else {\n            scaleX = outerRatio / innerRatio;\n          } // enable bounds\n\n\n          render.options.hasBounds = true; // position and size\n\n          render.bounds.min.x = bounds.min.x;\n          render.bounds.max.x = bounds.min.x + width * scaleX;\n          render.bounds.min.y = bounds.min.y;\n          render.bounds.max.y = bounds.min.y + height * scaleY; // center\n\n          if (center) {\n            render.bounds.min.x += width * 0.5 - width * scaleX * 0.5;\n            render.bounds.max.x += width * 0.5 - width * scaleX * 0.5;\n            render.bounds.min.y += height * 0.5 - height * scaleY * 0.5;\n            render.bounds.max.y += height * 0.5 - height * scaleY * 0.5;\n          } // padding\n\n\n          render.bounds.min.x -= padding.x;\n          render.bounds.max.x -= padding.x;\n          render.bounds.min.y -= padding.y;\n          render.bounds.max.y -= padding.y; // update mouse\n\n          if (render.mouse) {\n            Mouse.setScale(render.mouse, {\n              x: (render.bounds.max.x - render.bounds.min.x) / render.canvas.width,\n              y: (render.bounds.max.y - render.bounds.min.y) / render.canvas.height\n            });\n            Mouse.setOffset(render.mouse, render.bounds.min);\n          }\n        };\n        /**\n         * Applies viewport transforms based on `render.bounds` to a render context.\n         * @method startViewTransform\n         * @param {render} render\n         */\n\n\n        Render.startViewTransform = function (render) {\n          var boundsWidth = render.bounds.max.x - render.bounds.min.x,\n              boundsHeight = render.bounds.max.y - render.bounds.min.y,\n              boundsScaleX = boundsWidth / render.options.width,\n              boundsScaleY = boundsHeight / render.options.height;\n          render.context.setTransform(render.options.pixelRatio / boundsScaleX, 0, 0, render.options.pixelRatio / boundsScaleY, 0, 0);\n          render.context.translate(-render.bounds.min.x, -render.bounds.min.y);\n        };\n        /**\n         * Resets all transforms on the render context.\n         * @method endViewTransform\n         * @param {render} render\n         */\n\n\n        Render.endViewTransform = function (render) {\n          render.context.setTransform(render.options.pixelRatio, 0, 0, render.options.pixelRatio, 0, 0);\n        };\n        /**\n         * Renders the given `engine`'s `Matter.World` object.\n         * This is the entry point for all rendering and should be called every time the scene changes.\n         * @method world\n         * @param {render} render\n         */\n\n\n        Render.world = function (render) {\n          var engine = render.engine,\n              world = engine.world,\n              canvas = render.canvas,\n              context = render.context,\n              options = render.options,\n              allBodies = Composite.allBodies(world),\n              allConstraints = Composite.allConstraints(world),\n              background = options.wireframes ? options.wireframeBackground : options.background,\n              bodies = [],\n              constraints = [],\n              i;\n          var event = {\n            timestamp: engine.timing.timestamp\n          };\n          Events.trigger(render, 'beforeRender', event); // apply background if it has changed\n\n          if (render.currentBackground !== background) _applyBackground(render, background); // clear the canvas with a transparent fill, to allow the canvas background to show\n\n          context.globalCompositeOperation = 'source-in';\n          context.fillStyle = \"transparent\";\n          context.fillRect(0, 0, canvas.width, canvas.height);\n          context.globalCompositeOperation = 'source-over'; // handle bounds\n\n          if (options.hasBounds) {\n            // filter out bodies that are not in view\n            for (i = 0; i < allBodies.length; i++) {\n              var body = allBodies[i];\n              if (Bounds.overlaps(body.bounds, render.bounds)) bodies.push(body);\n            } // filter out constraints that are not in view\n\n\n            for (i = 0; i < allConstraints.length; i++) {\n              var constraint = allConstraints[i],\n                  bodyA = constraint.bodyA,\n                  bodyB = constraint.bodyB,\n                  pointAWorld = constraint.pointA,\n                  pointBWorld = constraint.pointB;\n              if (bodyA) pointAWorld = Vector.add(bodyA.position, constraint.pointA);\n              if (bodyB) pointBWorld = Vector.add(bodyB.position, constraint.pointB);\n              if (!pointAWorld || !pointBWorld) continue;\n              if (Bounds.contains(render.bounds, pointAWorld) || Bounds.contains(render.bounds, pointBWorld)) constraints.push(constraint);\n            } // transform the view\n\n\n            Render.startViewTransform(render); // update mouse\n\n            if (render.mouse) {\n              Mouse.setScale(render.mouse, {\n                x: (render.bounds.max.x - render.bounds.min.x) / render.options.width,\n                y: (render.bounds.max.y - render.bounds.min.y) / render.options.height\n              });\n              Mouse.setOffset(render.mouse, render.bounds.min);\n            }\n          } else {\n            constraints = allConstraints;\n            bodies = allBodies;\n\n            if (render.options.pixelRatio !== 1) {\n              render.context.setTransform(render.options.pixelRatio, 0, 0, render.options.pixelRatio, 0, 0);\n            }\n          }\n\n          if (!options.wireframes || engine.enableSleeping && options.showSleeping) {\n            // fully featured rendering of bodies\n            Render.bodies(render, bodies, context);\n          } else {\n            if (options.showConvexHulls) Render.bodyConvexHulls(render, bodies, context); // optimised method for wireframes only\n\n            Render.bodyWireframes(render, bodies, context);\n          }\n\n          if (options.showBounds) Render.bodyBounds(render, bodies, context);\n          if (options.showAxes || options.showAngleIndicator) Render.bodyAxes(render, bodies, context);\n          if (options.showPositions) Render.bodyPositions(render, bodies, context);\n          if (options.showVelocity) Render.bodyVelocity(render, bodies, context);\n          if (options.showIds) Render.bodyIds(render, bodies, context);\n          if (options.showSeparations) Render.separations(render, engine.pairs.list, context);\n          if (options.showCollisions) Render.collisions(render, engine.pairs.list, context);\n          if (options.showVertexNumbers) Render.vertexNumbers(render, bodies, context);\n          if (options.showMousePosition) Render.mousePosition(render, render.mouse, context);\n          Render.constraints(constraints, context);\n          if (options.showBroadphase && engine.broadphase.controller === Grid) Render.grid(render, engine.broadphase, context);\n          if (options.showDebug) Render.debug(render, context);\n\n          if (options.hasBounds) {\n            // revert view transforms\n            Render.endViewTransform(render);\n          }\n\n          Events.trigger(render, 'afterRender', event);\n        };\n        /**\n         * Description\n         * @private\n         * @method debug\n         * @param {render} render\n         * @param {RenderingContext} context\n         */\n\n\n        Render.debug = function (render, context) {\n          var c = context,\n              engine = render.engine,\n              world = engine.world,\n              metrics = engine.metrics,\n              options = render.options,\n              bodies = Composite.allBodies(world),\n              space = \"    \";\n\n          if (engine.timing.timestamp - (render.debugTimestamp || 0) >= 500) {\n            var text = \"\";\n\n            if (metrics.timing) {\n              text += \"fps: \" + Math.round(metrics.timing.fps) + space;\n            } // @if DEBUG\n\n\n            if (metrics.extended) {\n              if (metrics.timing) {\n                text += \"delta: \" + metrics.timing.delta.toFixed(3) + space;\n                text += \"correction: \" + metrics.timing.correction.toFixed(3) + space;\n              }\n\n              text += \"bodies: \" + bodies.length + space;\n              if (engine.broadphase.controller === Grid) text += \"buckets: \" + metrics.buckets + space;\n              text += \"\\n\";\n              text += \"collisions: \" + metrics.collisions + space;\n              text += \"pairs: \" + engine.pairs.list.length + space;\n              text += \"broad: \" + metrics.broadEff + space;\n              text += \"mid: \" + metrics.midEff + space;\n              text += \"narrow: \" + metrics.narrowEff + space;\n            } // @endif\n\n\n            render.debugString = text;\n            render.debugTimestamp = engine.timing.timestamp;\n          }\n\n          if (render.debugString) {\n            c.font = \"12px Arial\";\n\n            if (options.wireframes) {\n              c.fillStyle = 'rgba(255,255,255,0.5)';\n            } else {\n              c.fillStyle = 'rgba(0,0,0,0.5)';\n            }\n\n            var split = render.debugString.split('\\n');\n\n            for (var i = 0; i < split.length; i++) {\n              c.fillText(split[i], 50, 50 + i * 18);\n            }\n          }\n        };\n        /**\n         * Description\n         * @private\n         * @method constraints\n         * @param {constraint[]} constraints\n         * @param {RenderingContext} context\n         */\n\n\n        Render.constraints = function (constraints, context) {\n          var c = context;\n\n          for (var i = 0; i < constraints.length; i++) {\n            var constraint = constraints[i];\n            if (!constraint.render.visible || !constraint.pointA || !constraint.pointB) continue;\n            var bodyA = constraint.bodyA,\n                bodyB = constraint.bodyB,\n                start,\n                end;\n\n            if (bodyA) {\n              start = Vector.add(bodyA.position, constraint.pointA);\n            } else {\n              start = constraint.pointA;\n            }\n\n            if (constraint.render.type === 'pin') {\n              c.beginPath();\n              c.arc(start.x, start.y, 3, 0, 2 * Math.PI);\n              c.closePath();\n            } else {\n              if (bodyB) {\n                end = Vector.add(bodyB.position, constraint.pointB);\n              } else {\n                end = constraint.pointB;\n              }\n\n              c.beginPath();\n              c.moveTo(start.x, start.y);\n\n              if (constraint.render.type === 'spring') {\n                var delta = Vector.sub(end, start),\n                    normal = Vector.perp(Vector.normalise(delta)),\n                    coils = Math.ceil(Common.clamp(constraint.length / 5, 12, 20)),\n                    offset;\n\n                for (var j = 1; j < coils; j += 1) {\n                  offset = j % 2 === 0 ? 1 : -1;\n                  c.lineTo(start.x + delta.x * (j / coils) + normal.x * offset * 4, start.y + delta.y * (j / coils) + normal.y * offset * 4);\n                }\n              }\n\n              c.lineTo(end.x, end.y);\n            }\n\n            if (constraint.render.lineWidth) {\n              c.lineWidth = constraint.render.lineWidth;\n              c.strokeStyle = constraint.render.strokeStyle;\n              c.stroke();\n            }\n\n            if (constraint.render.anchors) {\n              c.fillStyle = constraint.render.strokeStyle;\n              c.beginPath();\n              c.arc(start.x, start.y, 3, 0, 2 * Math.PI);\n              c.arc(end.x, end.y, 3, 0, 2 * Math.PI);\n              c.closePath();\n              c.fill();\n            }\n          }\n        };\n        /**\n         * Description\n         * @private\n         * @method bodyShadows\n         * @param {render} render\n         * @param {body[]} bodies\n         * @param {RenderingContext} context\n         */\n\n\n        Render.bodyShadows = function (render, bodies, context) {\n          var c = context,\n              engine = render.engine;\n\n          for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i];\n            if (!body.render.visible) continue;\n\n            if (body.circleRadius) {\n              c.beginPath();\n              c.arc(body.position.x, body.position.y, body.circleRadius, 0, 2 * Math.PI);\n              c.closePath();\n            } else {\n              c.beginPath();\n              c.moveTo(body.vertices[0].x, body.vertices[0].y);\n\n              for (var j = 1; j < body.vertices.length; j++) {\n                c.lineTo(body.vertices[j].x, body.vertices[j].y);\n              }\n\n              c.closePath();\n            }\n\n            var distanceX = body.position.x - render.options.width * 0.5,\n                distanceY = body.position.y - render.options.height * 0.2,\n                distance = Math.abs(distanceX) + Math.abs(distanceY);\n            c.shadowColor = 'rgba(0,0,0,0.15)';\n            c.shadowOffsetX = 0.05 * distanceX;\n            c.shadowOffsetY = 0.05 * distanceY;\n            c.shadowBlur = 1 + 12 * Math.min(1, distance / 1000);\n            c.fill();\n            c.shadowColor = null;\n            c.shadowOffsetX = null;\n            c.shadowOffsetY = null;\n            c.shadowBlur = null;\n          }\n        };\n        /**\n         * Description\n         * @private\n         * @method bodies\n         * @param {render} render\n         * @param {body[]} bodies\n         * @param {RenderingContext} context\n         */\n\n\n        Render.bodies = function (render, bodies, context) {\n          var c = context,\n              engine = render.engine,\n              options = render.options,\n              showInternalEdges = options.showInternalEdges || !options.wireframes,\n              body,\n              part,\n              i,\n              k;\n\n          for (i = 0; i < bodies.length; i++) {\n            body = bodies[i];\n            if (!body.render.visible) continue; // handle compound parts\n\n            for (k = body.parts.length > 1 ? 1 : 0; k < body.parts.length; k++) {\n              part = body.parts[k];\n              if (!part.render.visible) continue;\n\n              if (options.showSleeping && body.isSleeping) {\n                c.globalAlpha = 0.5 * part.render.opacity;\n              } else if (part.render.opacity !== 1) {\n                c.globalAlpha = part.render.opacity;\n              }\n\n              if (part.render.sprite && part.render.sprite.texture && !options.wireframes) {\n                // part sprite\n                var sprite = part.render.sprite,\n                    texture = _getTexture(render, sprite.texture);\n\n                c.translate(part.position.x, part.position.y);\n                c.rotate(part.angle);\n                c.drawImage(texture, texture.width * -sprite.xOffset * sprite.xScale, texture.height * -sprite.yOffset * sprite.yScale, texture.width * sprite.xScale, texture.height * sprite.yScale); // revert translation, hopefully faster than save / restore\n\n                c.rotate(-part.angle);\n                c.translate(-part.position.x, -part.position.y);\n              } else {\n                // part polygon\n                if (part.circleRadius) {\n                  c.beginPath();\n                  c.arc(part.position.x, part.position.y, part.circleRadius, 0, 2 * Math.PI);\n                } else {\n                  c.beginPath();\n                  c.moveTo(part.vertices[0].x, part.vertices[0].y);\n\n                  for (var j = 1; j < part.vertices.length; j++) {\n                    if (!part.vertices[j - 1].isInternal || showInternalEdges) {\n                      c.lineTo(part.vertices[j].x, part.vertices[j].y);\n                    } else {\n                      c.moveTo(part.vertices[j].x, part.vertices[j].y);\n                    }\n\n                    if (part.vertices[j].isInternal && !showInternalEdges) {\n                      c.moveTo(part.vertices[(j + 1) % part.vertices.length].x, part.vertices[(j + 1) % part.vertices.length].y);\n                    }\n                  }\n\n                  c.lineTo(part.vertices[0].x, part.vertices[0].y);\n                  c.closePath();\n                }\n\n                if (!options.wireframes) {\n                  c.fillStyle = part.render.fillStyle;\n\n                  if (part.render.lineWidth) {\n                    c.lineWidth = part.render.lineWidth;\n                    c.strokeStyle = part.render.strokeStyle;\n                    c.stroke();\n                  }\n\n                  c.fill();\n                } else {\n                  c.lineWidth = 1;\n                  c.strokeStyle = '#bbb';\n                  c.stroke();\n                }\n              }\n\n              c.globalAlpha = 1;\n            }\n          }\n        };\n        /**\n         * Optimised method for drawing body wireframes in one pass\n         * @private\n         * @method bodyWireframes\n         * @param {render} render\n         * @param {body[]} bodies\n         * @param {RenderingContext} context\n         */\n\n\n        Render.bodyWireframes = function (render, bodies, context) {\n          var c = context,\n              showInternalEdges = render.options.showInternalEdges,\n              body,\n              part,\n              i,\n              j,\n              k;\n          c.beginPath(); // render all bodies\n\n          for (i = 0; i < bodies.length; i++) {\n            body = bodies[i];\n            if (!body.render.visible) continue; // handle compound parts\n\n            for (k = body.parts.length > 1 ? 1 : 0; k < body.parts.length; k++) {\n              part = body.parts[k];\n              c.moveTo(part.vertices[0].x, part.vertices[0].y);\n\n              for (j = 1; j < part.vertices.length; j++) {\n                if (!part.vertices[j - 1].isInternal || showInternalEdges) {\n                  c.lineTo(part.vertices[j].x, part.vertices[j].y);\n                } else {\n                  c.moveTo(part.vertices[j].x, part.vertices[j].y);\n                }\n\n                if (part.vertices[j].isInternal && !showInternalEdges) {\n                  c.moveTo(part.vertices[(j + 1) % part.vertices.length].x, part.vertices[(j + 1) % part.vertices.length].y);\n                }\n              }\n\n              c.lineTo(part.vertices[0].x, part.vertices[0].y);\n            }\n          }\n\n          c.lineWidth = 1;\n          c.strokeStyle = '#bbb';\n          c.stroke();\n        };\n        /**\n         * Optimised method for drawing body convex hull wireframes in one pass\n         * @private\n         * @method bodyConvexHulls\n         * @param {render} render\n         * @param {body[]} bodies\n         * @param {RenderingContext} context\n         */\n\n\n        Render.bodyConvexHulls = function (render, bodies, context) {\n          var c = context,\n              body,\n              part,\n              i,\n              j,\n              k;\n          c.beginPath(); // render convex hulls\n\n          for (i = 0; i < bodies.length; i++) {\n            body = bodies[i];\n            if (!body.render.visible || body.parts.length === 1) continue;\n            c.moveTo(body.vertices[0].x, body.vertices[0].y);\n\n            for (j = 1; j < body.vertices.length; j++) {\n              c.lineTo(body.vertices[j].x, body.vertices[j].y);\n            }\n\n            c.lineTo(body.vertices[0].x, body.vertices[0].y);\n          }\n\n          c.lineWidth = 1;\n          c.strokeStyle = 'rgba(255,255,255,0.2)';\n          c.stroke();\n        };\n        /**\n         * Renders body vertex numbers.\n         * @private\n         * @method vertexNumbers\n         * @param {render} render\n         * @param {body[]} bodies\n         * @param {RenderingContext} context\n         */\n\n\n        Render.vertexNumbers = function (render, bodies, context) {\n          var c = context,\n              i,\n              j,\n              k;\n\n          for (i = 0; i < bodies.length; i++) {\n            var parts = bodies[i].parts;\n\n            for (k = parts.length > 1 ? 1 : 0; k < parts.length; k++) {\n              var part = parts[k];\n\n              for (j = 0; j < part.vertices.length; j++) {\n                c.fillStyle = 'rgba(255,255,255,0.2)';\n                c.fillText(i + '_' + j, part.position.x + (part.vertices[j].x - part.position.x) * 0.8, part.position.y + (part.vertices[j].y - part.position.y) * 0.8);\n              }\n            }\n          }\n        };\n        /**\n         * Renders mouse position.\n         * @private\n         * @method mousePosition\n         * @param {render} render\n         * @param {mouse} mouse\n         * @param {RenderingContext} context\n         */\n\n\n        Render.mousePosition = function (render, mouse, context) {\n          var c = context;\n          c.fillStyle = 'rgba(255,255,255,0.8)';\n          c.fillText(mouse.position.x + '  ' + mouse.position.y, mouse.position.x + 5, mouse.position.y - 5);\n        };\n        /**\n         * Draws body bounds\n         * @private\n         * @method bodyBounds\n         * @param {render} render\n         * @param {body[]} bodies\n         * @param {RenderingContext} context\n         */\n\n\n        Render.bodyBounds = function (render, bodies, context) {\n          var c = context,\n              engine = render.engine,\n              options = render.options;\n          c.beginPath();\n\n          for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i];\n\n            if (body.render.visible) {\n              var parts = bodies[i].parts;\n\n              for (var j = parts.length > 1 ? 1 : 0; j < parts.length; j++) {\n                var part = parts[j];\n                c.rect(part.bounds.min.x, part.bounds.min.y, part.bounds.max.x - part.bounds.min.x, part.bounds.max.y - part.bounds.min.y);\n              }\n            }\n          }\n\n          if (options.wireframes) {\n            c.strokeStyle = 'rgba(255,255,255,0.08)';\n          } else {\n            c.strokeStyle = 'rgba(0,0,0,0.1)';\n          }\n\n          c.lineWidth = 1;\n          c.stroke();\n        };\n        /**\n         * Draws body angle indicators and axes\n         * @private\n         * @method bodyAxes\n         * @param {render} render\n         * @param {body[]} bodies\n         * @param {RenderingContext} context\n         */\n\n\n        Render.bodyAxes = function (render, bodies, context) {\n          var c = context,\n              engine = render.engine,\n              options = render.options,\n              part,\n              i,\n              j,\n              k;\n          c.beginPath();\n\n          for (i = 0; i < bodies.length; i++) {\n            var body = bodies[i],\n                parts = body.parts;\n            if (!body.render.visible) continue;\n\n            if (options.showAxes) {\n              // render all axes\n              for (j = parts.length > 1 ? 1 : 0; j < parts.length; j++) {\n                part = parts[j];\n\n                for (k = 0; k < part.axes.length; k++) {\n                  var axis = part.axes[k];\n                  c.moveTo(part.position.x, part.position.y);\n                  c.lineTo(part.position.x + axis.x * 20, part.position.y + axis.y * 20);\n                }\n              }\n            } else {\n              for (j = parts.length > 1 ? 1 : 0; j < parts.length; j++) {\n                part = parts[j];\n\n                for (k = 0; k < part.axes.length; k++) {\n                  // render a single axis indicator\n                  c.moveTo(part.position.x, part.position.y);\n                  c.lineTo((part.vertices[0].x + part.vertices[part.vertices.length - 1].x) / 2, (part.vertices[0].y + part.vertices[part.vertices.length - 1].y) / 2);\n                }\n              }\n            }\n          }\n\n          if (options.wireframes) {\n            c.strokeStyle = 'indianred';\n            c.lineWidth = 1;\n          } else {\n            c.strokeStyle = 'rgba(255, 255, 255, 0.4)';\n            c.globalCompositeOperation = 'overlay';\n            c.lineWidth = 2;\n          }\n\n          c.stroke();\n          c.globalCompositeOperation = 'source-over';\n        };\n        /**\n         * Draws body positions\n         * @private\n         * @method bodyPositions\n         * @param {render} render\n         * @param {body[]} bodies\n         * @param {RenderingContext} context\n         */\n\n\n        Render.bodyPositions = function (render, bodies, context) {\n          var c = context,\n              engine = render.engine,\n              options = render.options,\n              body,\n              part,\n              i,\n              k;\n          c.beginPath(); // render current positions\n\n          for (i = 0; i < bodies.length; i++) {\n            body = bodies[i];\n            if (!body.render.visible) continue; // handle compound parts\n\n            for (k = 0; k < body.parts.length; k++) {\n              part = body.parts[k];\n              c.arc(part.position.x, part.position.y, 3, 0, 2 * Math.PI, false);\n              c.closePath();\n            }\n          }\n\n          if (options.wireframes) {\n            c.fillStyle = 'indianred';\n          } else {\n            c.fillStyle = 'rgba(0,0,0,0.5)';\n          }\n\n          c.fill();\n          c.beginPath(); // render previous positions\n\n          for (i = 0; i < bodies.length; i++) {\n            body = bodies[i];\n\n            if (body.render.visible) {\n              c.arc(body.positionPrev.x, body.positionPrev.y, 2, 0, 2 * Math.PI, false);\n              c.closePath();\n            }\n          }\n\n          c.fillStyle = 'rgba(255,165,0,0.8)';\n          c.fill();\n        };\n        /**\n         * Draws body velocity\n         * @private\n         * @method bodyVelocity\n         * @param {render} render\n         * @param {body[]} bodies\n         * @param {RenderingContext} context\n         */\n\n\n        Render.bodyVelocity = function (render, bodies, context) {\n          var c = context;\n          c.beginPath();\n\n          for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i];\n            if (!body.render.visible) continue;\n            c.moveTo(body.position.x, body.position.y);\n            c.lineTo(body.position.x + (body.position.x - body.positionPrev.x) * 2, body.position.y + (body.position.y - body.positionPrev.y) * 2);\n          }\n\n          c.lineWidth = 3;\n          c.strokeStyle = 'cornflowerblue';\n          c.stroke();\n        };\n        /**\n         * Draws body ids\n         * @private\n         * @method bodyIds\n         * @param {render} render\n         * @param {body[]} bodies\n         * @param {RenderingContext} context\n         */\n\n\n        Render.bodyIds = function (render, bodies, context) {\n          var c = context,\n              i,\n              j;\n\n          for (i = 0; i < bodies.length; i++) {\n            if (!bodies[i].render.visible) continue;\n            var parts = bodies[i].parts;\n\n            for (j = parts.length > 1 ? 1 : 0; j < parts.length; j++) {\n              var part = parts[j];\n              c.font = \"12px Arial\";\n              c.fillStyle = 'rgba(255,255,255,0.5)';\n              c.fillText(part.id, part.position.x + 10, part.position.y - 10);\n            }\n          }\n        };\n        /**\n         * Description\n         * @private\n         * @method collisions\n         * @param {render} render\n         * @param {pair[]} pairs\n         * @param {RenderingContext} context\n         */\n\n\n        Render.collisions = function (render, pairs, context) {\n          var c = context,\n              options = render.options,\n              pair,\n              collision,\n              corrected,\n              bodyA,\n              bodyB,\n              i,\n              j;\n          c.beginPath(); // render collision positions\n\n          for (i = 0; i < pairs.length; i++) {\n            pair = pairs[i];\n            if (!pair.isActive) continue;\n            collision = pair.collision;\n\n            for (j = 0; j < pair.activeContacts.length; j++) {\n              var contact = pair.activeContacts[j],\n                  vertex = contact.vertex;\n              c.rect(vertex.x - 1.5, vertex.y - 1.5, 3.5, 3.5);\n            }\n          }\n\n          if (options.wireframes) {\n            c.fillStyle = 'rgba(255,255,255,0.7)';\n          } else {\n            c.fillStyle = 'orange';\n          }\n\n          c.fill();\n          c.beginPath(); // render collision normals\n\n          for (i = 0; i < pairs.length; i++) {\n            pair = pairs[i];\n            if (!pair.isActive) continue;\n            collision = pair.collision;\n\n            if (pair.activeContacts.length > 0) {\n              var normalPosX = pair.activeContacts[0].vertex.x,\n                  normalPosY = pair.activeContacts[0].vertex.y;\n\n              if (pair.activeContacts.length === 2) {\n                normalPosX = (pair.activeContacts[0].vertex.x + pair.activeContacts[1].vertex.x) / 2;\n                normalPosY = (pair.activeContacts[0].vertex.y + pair.activeContacts[1].vertex.y) / 2;\n              }\n\n              if (collision.bodyB === collision.supports[0].body || collision.bodyA.isStatic === true) {\n                c.moveTo(normalPosX - collision.normal.x * 8, normalPosY - collision.normal.y * 8);\n              } else {\n                c.moveTo(normalPosX + collision.normal.x * 8, normalPosY + collision.normal.y * 8);\n              }\n\n              c.lineTo(normalPosX, normalPosY);\n            }\n          }\n\n          if (options.wireframes) {\n            c.strokeStyle = 'rgba(255,165,0,0.7)';\n          } else {\n            c.strokeStyle = 'orange';\n          }\n\n          c.lineWidth = 1;\n          c.stroke();\n        };\n        /**\n         * Description\n         * @private\n         * @method separations\n         * @param {render} render\n         * @param {pair[]} pairs\n         * @param {RenderingContext} context\n         */\n\n\n        Render.separations = function (render, pairs, context) {\n          var c = context,\n              options = render.options,\n              pair,\n              collision,\n              corrected,\n              bodyA,\n              bodyB,\n              i,\n              j;\n          c.beginPath(); // render separations\n\n          for (i = 0; i < pairs.length; i++) {\n            pair = pairs[i];\n            if (!pair.isActive) continue;\n            collision = pair.collision;\n            bodyA = collision.bodyA;\n            bodyB = collision.bodyB;\n            var k = 1;\n            if (!bodyB.isStatic && !bodyA.isStatic) k = 0.5;\n            if (bodyB.isStatic) k = 0;\n            c.moveTo(bodyB.position.x, bodyB.position.y);\n            c.lineTo(bodyB.position.x - collision.penetration.x * k, bodyB.position.y - collision.penetration.y * k);\n            k = 1;\n            if (!bodyB.isStatic && !bodyA.isStatic) k = 0.5;\n            if (bodyA.isStatic) k = 0;\n            c.moveTo(bodyA.position.x, bodyA.position.y);\n            c.lineTo(bodyA.position.x + collision.penetration.x * k, bodyA.position.y + collision.penetration.y * k);\n          }\n\n          if (options.wireframes) {\n            c.strokeStyle = 'rgba(255,165,0,0.5)';\n          } else {\n            c.strokeStyle = 'orange';\n          }\n\n          c.stroke();\n        };\n        /**\n         * Description\n         * @private\n         * @method grid\n         * @param {render} render\n         * @param {grid} grid\n         * @param {RenderingContext} context\n         */\n\n\n        Render.grid = function (render, grid, context) {\n          var c = context,\n              options = render.options;\n\n          if (options.wireframes) {\n            c.strokeStyle = 'rgba(255,180,0,0.1)';\n          } else {\n            c.strokeStyle = 'rgba(255,180,0,0.5)';\n          }\n\n          c.beginPath();\n          var bucketKeys = Common.keys(grid.buckets);\n\n          for (var i = 0; i < bucketKeys.length; i++) {\n            var bucketId = bucketKeys[i];\n            if (grid.buckets[bucketId].length < 2) continue;\n            var region = bucketId.split(/C|R/);\n            c.rect(0.5 + parseInt(region[1], 10) * grid.bucketWidth, 0.5 + parseInt(region[2], 10) * grid.bucketHeight, grid.bucketWidth, grid.bucketHeight);\n          }\n\n          c.lineWidth = 1;\n          c.stroke();\n        };\n        /**\n         * Description\n         * @private\n         * @method inspector\n         * @param {inspector} inspector\n         * @param {RenderingContext} context\n         */\n\n\n        Render.inspector = function (inspector, context) {\n          var engine = inspector.engine,\n              selected = inspector.selected,\n              render = inspector.render,\n              options = render.options,\n              bounds;\n\n          if (options.hasBounds) {\n            var boundsWidth = render.bounds.max.x - render.bounds.min.x,\n                boundsHeight = render.bounds.max.y - render.bounds.min.y,\n                boundsScaleX = boundsWidth / render.options.width,\n                boundsScaleY = boundsHeight / render.options.height;\n            context.scale(1 / boundsScaleX, 1 / boundsScaleY);\n            context.translate(-render.bounds.min.x, -render.bounds.min.y);\n          }\n\n          for (var i = 0; i < selected.length; i++) {\n            var item = selected[i].data;\n            context.translate(0.5, 0.5);\n            context.lineWidth = 1;\n            context.strokeStyle = 'rgba(255,165,0,0.9)';\n            context.setLineDash([1, 2]);\n\n            switch (item.type) {\n              case 'body':\n                // render body selections\n                bounds = item.bounds;\n                context.beginPath();\n                context.rect(Math.floor(bounds.min.x - 3), Math.floor(bounds.min.y - 3), Math.floor(bounds.max.x - bounds.min.x + 6), Math.floor(bounds.max.y - bounds.min.y + 6));\n                context.closePath();\n                context.stroke();\n                break;\n\n              case 'constraint':\n                // render constraint selections\n                var point = item.pointA;\n                if (item.bodyA) point = item.pointB;\n                context.beginPath();\n                context.arc(point.x, point.y, 10, 0, 2 * Math.PI);\n                context.closePath();\n                context.stroke();\n                break;\n            }\n\n            context.setLineDash([]);\n            context.translate(-0.5, -0.5);\n          } // render selection region\n\n\n          if (inspector.selectStart !== null) {\n            context.translate(0.5, 0.5);\n            context.lineWidth = 1;\n            context.strokeStyle = 'rgba(255,165,0,0.6)';\n            context.fillStyle = 'rgba(255,165,0,0.1)';\n            bounds = inspector.selectBounds;\n            context.beginPath();\n            context.rect(Math.floor(bounds.min.x), Math.floor(bounds.min.y), Math.floor(bounds.max.x - bounds.min.x), Math.floor(bounds.max.y - bounds.min.y));\n            context.closePath();\n            context.stroke();\n            context.fill();\n            context.translate(-0.5, -0.5);\n          }\n\n          if (options.hasBounds) context.setTransform(1, 0, 0, 1, 0, 0);\n        };\n        /**\n         * Description\n         * @method _createCanvas\n         * @private\n         * @param {} width\n         * @param {} height\n         * @return canvas\n         */\n\n\n        var _createCanvas = function _createCanvas(width, height) {\n          var canvas = document.createElement('canvas');\n          canvas.width = width;\n          canvas.height = height;\n\n          canvas.oncontextmenu = function () {\n            return false;\n          };\n\n          canvas.onselectstart = function () {\n            return false;\n          };\n\n          return canvas;\n        };\n        /**\n         * Gets the pixel ratio of the canvas.\n         * @method _getPixelRatio\n         * @private\n         * @param {HTMLElement} canvas\n         * @return {Number} pixel ratio\n         */\n\n\n        var _getPixelRatio = function _getPixelRatio(canvas) {\n          var context = canvas.getContext('2d'),\n              devicePixelRatio = window.devicePixelRatio || 1,\n              backingStorePixelRatio = context.webkitBackingStorePixelRatio || context.mozBackingStorePixelRatio || context.msBackingStorePixelRatio || context.oBackingStorePixelRatio || context.backingStorePixelRatio || 1;\n          return devicePixelRatio / backingStorePixelRatio;\n        };\n        /**\n         * Gets the requested texture (an Image) via its path\n         * @method _getTexture\n         * @private\n         * @param {render} render\n         * @param {string} imagePath\n         * @return {Image} texture\n         */\n\n\n        var _getTexture = function _getTexture(render, imagePath) {\n          var image = render.textures[imagePath];\n          if (image) return image;\n          image = render.textures[imagePath] = new Image();\n          image.src = imagePath;\n          return image;\n        };\n        /**\n         * Applies the background to the canvas using CSS.\n         * @method applyBackground\n         * @private\n         * @param {render} render\n         * @param {string} background\n         */\n\n\n        var _applyBackground = function _applyBackground(render, background) {\n          var cssBackground = background;\n          if (/(jpg|gif|png)$/.test(background)) cssBackground = 'url(' + background + ')';\n          render.canvas.style.background = cssBackground;\n          render.canvas.style.backgroundSize = \"contain\";\n          render.currentBackground = background;\n        };\n        /*\n        *\n        *  Events Documentation\n        *\n        */\n\n        /**\n        * Fired before rendering\n        *\n        * @event beforeRender\n        * @param {} event An event object\n        * @param {number} event.timestamp The engine.timing.timestamp of the event\n        * @param {} event.source The source object of the event\n        * @param {} event.name The name of the event\n        */\n\n        /**\n        * Fired after rendering\n        *\n        * @event afterRender\n        * @param {} event An event object\n        * @param {number} event.timestamp The engine.timing.timestamp of the event\n        * @param {} event.source The source object of the event\n        * @param {} event.name The name of the event\n        */\n\n        /*\n        *\n        *  Properties Documentation\n        *\n        */\n\n        /**\n         * A back-reference to the `Matter.Render` module.\n         *\n         * @property controller\n         * @type render\n         */\n\n        /**\n         * A reference to the `Matter.Engine` instance to be used.\n         *\n         * @property engine\n         * @type engine\n         */\n\n        /**\n         * A reference to the element where the canvas is to be inserted (if `render.canvas` has not been specified)\n         *\n         * @property element\n         * @type HTMLElement\n         * @default null\n         */\n\n        /**\n         * The canvas element to render to. If not specified, one will be created if `render.element` has been specified.\n         *\n         * @property canvas\n         * @type HTMLCanvasElement\n         * @default null\n         */\n\n        /**\n         * The configuration options of the renderer.\n         *\n         * @property options\n         * @type {}\n         */\n\n        /**\n         * The target width in pixels of the `render.canvas` to be created.\n         *\n         * @property options.width\n         * @type number\n         * @default 800\n         */\n\n        /**\n         * The target height in pixels of the `render.canvas` to be created.\n         *\n         * @property options.height\n         * @type number\n         * @default 600\n         */\n\n        /**\n         * A flag that specifies if `render.bounds` should be used when rendering.\n         *\n         * @property options.hasBounds\n         * @type boolean\n         * @default false\n         */\n\n        /**\n         * A `Bounds` object that specifies the drawing view region.\n         * Rendering will be automatically transformed and scaled to fit within the canvas size (`render.options.width` and `render.options.height`).\n         * This allows for creating views that can pan or zoom around the scene.\n         * You must also set `render.options.hasBounds` to `true` to enable bounded rendering.\n         *\n         * @property bounds\n         * @type bounds\n         */\n\n        /**\n         * The 2d rendering context from the `render.canvas` element.\n         *\n         * @property context\n         * @type CanvasRenderingContext2D\n         */\n\n        /**\n         * The sprite texture cache.\n         *\n         * @property textures\n         * @type {}\n         */\n\n      })();\n      /***/\n\n    },\n    /* 11 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      /**\n      * The `Matter.Grid` module contains methods for creating and manipulating collision broadphase grid structures.\n      *\n      * @class Grid\n      */\n      var Grid = {};\n      module.exports = Grid;\n\n      var Pair = __webpack_require__(9);\n\n      var Detector = __webpack_require__(12);\n\n      var Common = __webpack_require__(0);\n\n      (function () {\n        /**\n         * Creates a new grid.\n         * @method create\n         * @param {} options\n         * @return {grid} A new grid\n         */\n        Grid.create = function (options) {\n          var defaults = {\n            controller: Grid,\n            detector: Detector.collisions,\n            buckets: {},\n            pairs: {},\n            pairsList: [],\n            bucketWidth: 48,\n            bucketHeight: 48\n          };\n          return Common.extend(defaults, options);\n        };\n        /**\n         * The width of a single grid bucket.\n         *\n         * @property bucketWidth\n         * @type number\n         * @default 48\n         */\n\n        /**\n         * The height of a single grid bucket.\n         *\n         * @property bucketHeight\n         * @type number\n         * @default 48\n         */\n\n        /**\n         * Updates the grid.\n         * @method update\n         * @param {grid} grid\n         * @param {body[]} bodies\n         * @param {engine} engine\n         * @param {boolean} forceUpdate\n         */\n\n\n        Grid.update = function (grid, bodies, engine, forceUpdate) {\n          var i,\n              col,\n              row,\n              world = engine.world,\n              buckets = grid.buckets,\n              bucket,\n              bucketId,\n              gridChanged = false; // @if DEBUG\n\n          var metrics = engine.metrics;\n          metrics.broadphaseTests = 0; // @endif\n\n          for (i = 0; i < bodies.length; i++) {\n            var body = bodies[i];\n            if (body.isSleeping && !forceUpdate) continue; // don't update out of world bodies\n\n            if (body.bounds.max.x < world.bounds.min.x || body.bounds.min.x > world.bounds.max.x || body.bounds.max.y < world.bounds.min.y || body.bounds.min.y > world.bounds.max.y) continue;\n\n            var newRegion = Grid._getRegion(grid, body); // if the body has changed grid region\n\n\n            if (!body.region || newRegion.id !== body.region.id || forceUpdate) {\n              // @if DEBUG\n              metrics.broadphaseTests += 1; // @endif\n\n              if (!body.region || forceUpdate) body.region = newRegion;\n\n              var union = Grid._regionUnion(newRegion, body.region); // update grid buckets affected by region change\n              // iterate over the union of both regions\n\n\n              for (col = union.startCol; col <= union.endCol; col++) {\n                for (row = union.startRow; row <= union.endRow; row++) {\n                  bucketId = Grid._getBucketId(col, row);\n                  bucket = buckets[bucketId];\n                  var isInsideNewRegion = col >= newRegion.startCol && col <= newRegion.endCol && row >= newRegion.startRow && row <= newRegion.endRow;\n                  var isInsideOldRegion = col >= body.region.startCol && col <= body.region.endCol && row >= body.region.startRow && row <= body.region.endRow; // remove from old region buckets\n\n                  if (!isInsideNewRegion && isInsideOldRegion) {\n                    if (isInsideOldRegion) {\n                      if (bucket) Grid._bucketRemoveBody(grid, bucket, body);\n                    }\n                  } // add to new region buckets\n\n\n                  if (body.region === newRegion || isInsideNewRegion && !isInsideOldRegion || forceUpdate) {\n                    if (!bucket) bucket = Grid._createBucket(buckets, bucketId);\n\n                    Grid._bucketAddBody(grid, bucket, body);\n                  }\n                }\n              } // set the new region\n\n\n              body.region = newRegion; // flag changes so we can update pairs\n\n              gridChanged = true;\n            }\n          } // update pairs list only if pairs changed (i.e. a body changed region)\n\n\n          if (gridChanged) grid.pairsList = Grid._createActivePairsList(grid);\n        };\n        /**\n         * Clears the grid.\n         * @method clear\n         * @param {grid} grid\n         */\n\n\n        Grid.clear = function (grid) {\n          grid.buckets = {};\n          grid.pairs = {};\n          grid.pairsList = [];\n        };\n        /**\n         * Finds the union of two regions.\n         * @method _regionUnion\n         * @private\n         * @param {} regionA\n         * @param {} regionB\n         * @return {} region\n         */\n\n\n        Grid._regionUnion = function (regionA, regionB) {\n          var startCol = Math.min(regionA.startCol, regionB.startCol),\n              endCol = Math.max(regionA.endCol, regionB.endCol),\n              startRow = Math.min(regionA.startRow, regionB.startRow),\n              endRow = Math.max(regionA.endRow, regionB.endRow);\n          return Grid._createRegion(startCol, endCol, startRow, endRow);\n        };\n        /**\n         * Gets the region a given body falls in for a given grid.\n         * @method _getRegion\n         * @private\n         * @param {} grid\n         * @param {} body\n         * @return {} region\n         */\n\n\n        Grid._getRegion = function (grid, body) {\n          var bounds = body.bounds,\n              startCol = Math.floor(bounds.min.x / grid.bucketWidth),\n              endCol = Math.floor(bounds.max.x / grid.bucketWidth),\n              startRow = Math.floor(bounds.min.y / grid.bucketHeight),\n              endRow = Math.floor(bounds.max.y / grid.bucketHeight);\n          return Grid._createRegion(startCol, endCol, startRow, endRow);\n        };\n        /**\n         * Creates a region.\n         * @method _createRegion\n         * @private\n         * @param {} startCol\n         * @param {} endCol\n         * @param {} startRow\n         * @param {} endRow\n         * @return {} region\n         */\n\n\n        Grid._createRegion = function (startCol, endCol, startRow, endRow) {\n          return {\n            id: startCol + ',' + endCol + ',' + startRow + ',' + endRow,\n            startCol: startCol,\n            endCol: endCol,\n            startRow: startRow,\n            endRow: endRow\n          };\n        };\n        /**\n         * Gets the bucket id at the given position.\n         * @method _getBucketId\n         * @private\n         * @param {} column\n         * @param {} row\n         * @return {string} bucket id\n         */\n\n\n        Grid._getBucketId = function (column, row) {\n          return 'C' + column + 'R' + row;\n        };\n        /**\n         * Creates a bucket.\n         * @method _createBucket\n         * @private\n         * @param {} buckets\n         * @param {} bucketId\n         * @return {} bucket\n         */\n\n\n        Grid._createBucket = function (buckets, bucketId) {\n          var bucket = buckets[bucketId] = [];\n          return bucket;\n        };\n        /**\n         * Adds a body to a bucket.\n         * @method _bucketAddBody\n         * @private\n         * @param {} grid\n         * @param {} bucket\n         * @param {} body\n         */\n\n\n        Grid._bucketAddBody = function (grid, bucket, body) {\n          // add new pairs\n          for (var i = 0; i < bucket.length; i++) {\n            var bodyB = bucket[i];\n            if (body.id === bodyB.id || body.isStatic && bodyB.isStatic) continue; // keep track of the number of buckets the pair exists in\n            // important for Grid.update to work\n\n            var pairId = Pair.id(body, bodyB),\n                pair = grid.pairs[pairId];\n\n            if (pair) {\n              pair[2] += 1;\n            } else {\n              grid.pairs[pairId] = [body, bodyB, 1];\n            }\n          } // add to bodies (after pairs, otherwise pairs with self)\n\n\n          bucket.push(body);\n        };\n        /**\n         * Removes a body from a bucket.\n         * @method _bucketRemoveBody\n         * @private\n         * @param {} grid\n         * @param {} bucket\n         * @param {} body\n         */\n\n\n        Grid._bucketRemoveBody = function (grid, bucket, body) {\n          // remove from bucket\n          bucket.splice(Common.indexOf(bucket, body), 1); // update pair counts\n\n          for (var i = 0; i < bucket.length; i++) {\n            // keep track of the number of buckets the pair exists in\n            // important for _createActivePairsList to work\n            var bodyB = bucket[i],\n                pairId = Pair.id(body, bodyB),\n                pair = grid.pairs[pairId];\n            if (pair) pair[2] -= 1;\n          }\n        };\n        /**\n         * Generates a list of the active pairs in the grid.\n         * @method _createActivePairsList\n         * @private\n         * @param {} grid\n         * @return [] pairs\n         */\n\n\n        Grid._createActivePairsList = function (grid) {\n          var pairKeys,\n              pair,\n              pairs = []; // grid.pairs is used as a hashmap\n\n          pairKeys = Common.keys(grid.pairs); // iterate over grid.pairs\n\n          for (var k = 0; k < pairKeys.length; k++) {\n            pair = grid.pairs[pairKeys[k]]; // if pair exists in at least one bucket\n            // it is a pair that needs further collision testing so push it\n\n            if (pair[2] > 0) {\n              pairs.push(pair);\n            } else {\n              delete grid.pairs[pairKeys[k]];\n            }\n          }\n\n          return pairs;\n        };\n      })();\n      /***/\n\n    },\n    /* 12 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      /**\n      * The `Matter.Detector` module contains methods for detecting collisions given a set of pairs.\n      *\n      * @class Detector\n      */\n      // TODO: speculative contacts\n      var Detector = {};\n      module.exports = Detector;\n\n      var SAT = __webpack_require__(13);\n\n      var Pair = __webpack_require__(9);\n\n      var Bounds = __webpack_require__(1);\n\n      (function () {\n        /**\n         * Finds all collisions given a list of pairs.\n         * @method collisions\n         * @param {pair[]} broadphasePairs\n         * @param {engine} engine\n         * @return {array} collisions\n         */\n        Detector.collisions = function (broadphasePairs, engine) {\n          var collisions = [],\n              pairsTable = engine.pairs.table; // @if DEBUG\n\n          var metrics = engine.metrics; // @endif\n\n          for (var i = 0; i < broadphasePairs.length; i++) {\n            var bodyA = broadphasePairs[i][0],\n                bodyB = broadphasePairs[i][1];\n            if ((bodyA.isStatic || bodyA.isSleeping) && (bodyB.isStatic || bodyB.isSleeping)) continue;\n            if (!Detector.canCollide(bodyA.collisionFilter, bodyB.collisionFilter)) continue; // @if DEBUG\n\n            metrics.midphaseTests += 1; // @endif\n            // mid phase\n\n            if (Bounds.overlaps(bodyA.bounds, bodyB.bounds)) {\n              for (var j = bodyA.parts.length > 1 ? 1 : 0; j < bodyA.parts.length; j++) {\n                var partA = bodyA.parts[j];\n\n                for (var k = bodyB.parts.length > 1 ? 1 : 0; k < bodyB.parts.length; k++) {\n                  var partB = bodyB.parts[k];\n\n                  if (partA === bodyA && partB === bodyB || Bounds.overlaps(partA.bounds, partB.bounds)) {\n                    // find a previous collision we could reuse\n                    var pairId = Pair.id(partA, partB),\n                        pair = pairsTable[pairId],\n                        previousCollision;\n\n                    if (pair && pair.isActive) {\n                      previousCollision = pair.collision;\n                    } else {\n                      previousCollision = null;\n                    } // narrow phase\n\n\n                    var collision = SAT.collides(partA, partB, previousCollision); // @if DEBUG\n\n                    metrics.narrowphaseTests += 1;\n                    if (collision.reused) metrics.narrowReuseCount += 1; // @endif\n\n                    if (collision.collided) {\n                      collisions.push(collision); // @if DEBUG\n\n                      metrics.narrowDetections += 1; // @endif\n                    }\n                  }\n                }\n              }\n            }\n          }\n\n          return collisions;\n        };\n        /**\n         * Returns `true` if both supplied collision filters will allow a collision to occur.\n         * See `body.collisionFilter` for more information.\n         * @method canCollide\n         * @param {} filterA\n         * @param {} filterB\n         * @return {bool} `true` if collision can occur\n         */\n\n\n        Detector.canCollide = function (filterA, filterB) {\n          if (filterA.group === filterB.group && filterA.group !== 0) return filterA.group > 0;\n          return (filterA.mask & filterB.category) !== 0 && (filterB.mask & filterA.category) !== 0;\n        };\n      })();\n      /***/\n\n    },\n    /* 13 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      /**\n      * The `Matter.SAT` module contains methods for detecting collisions using the Separating Axis Theorem.\n      *\n      * @class SAT\n      */\n      // TODO: true circles and curves\n      var SAT = {};\n      module.exports = SAT;\n\n      var Vertices = __webpack_require__(3);\n\n      var Vector = __webpack_require__(2);\n\n      (function () {\n        /**\n         * Detect collision between two bodies using the Separating Axis Theorem.\n         * @method collides\n         * @param {body} bodyA\n         * @param {body} bodyB\n         * @param {collision} previousCollision\n         * @return {collision} collision\n         */\n        SAT.collides = function (bodyA, bodyB, previousCollision) {\n          var overlapAB,\n              overlapBA,\n              minOverlap,\n              collision,\n              canReusePrevCol = false;\n\n          if (previousCollision) {\n            // estimate total motion\n            var parentA = bodyA.parent,\n                parentB = bodyB.parent,\n                motion = parentA.speed * parentA.speed + parentA.angularSpeed * parentA.angularSpeed + parentB.speed * parentB.speed + parentB.angularSpeed * parentB.angularSpeed; // we may be able to (partially) reuse collision result \n            // but only safe if collision was resting\n\n            canReusePrevCol = previousCollision && previousCollision.collided && motion < 0.2; // reuse collision object\n\n            collision = previousCollision;\n          } else {\n            collision = {\n              collided: false,\n              bodyA: bodyA,\n              bodyB: bodyB\n            };\n          }\n\n          if (previousCollision && canReusePrevCol) {\n            // if we can reuse the collision result\n            // we only need to test the previously found axis\n            var axisBodyA = collision.axisBody,\n                axisBodyB = axisBodyA === bodyA ? bodyB : bodyA,\n                axes = [axisBodyA.axes[previousCollision.axisNumber]];\n            minOverlap = SAT._overlapAxes(axisBodyA.vertices, axisBodyB.vertices, axes);\n            collision.reused = true;\n\n            if (minOverlap.overlap <= 0) {\n              collision.collided = false;\n              return collision;\n            }\n          } else {\n            // if we can't reuse a result, perform a full SAT test\n            overlapAB = SAT._overlapAxes(bodyA.vertices, bodyB.vertices, bodyA.axes);\n\n            if (overlapAB.overlap <= 0) {\n              collision.collided = false;\n              return collision;\n            }\n\n            overlapBA = SAT._overlapAxes(bodyB.vertices, bodyA.vertices, bodyB.axes);\n\n            if (overlapBA.overlap <= 0) {\n              collision.collided = false;\n              return collision;\n            }\n\n            if (overlapAB.overlap < overlapBA.overlap) {\n              minOverlap = overlapAB;\n              collision.axisBody = bodyA;\n            } else {\n              minOverlap = overlapBA;\n              collision.axisBody = bodyB;\n            } // important for reuse later\n\n\n            collision.axisNumber = minOverlap.axisNumber;\n          }\n\n          collision.bodyA = bodyA.id < bodyB.id ? bodyA : bodyB;\n          collision.bodyB = bodyA.id < bodyB.id ? bodyB : bodyA;\n          collision.collided = true;\n          collision.depth = minOverlap.overlap;\n          collision.parentA = collision.bodyA.parent;\n          collision.parentB = collision.bodyB.parent;\n          bodyA = collision.bodyA;\n          bodyB = collision.bodyB; // ensure normal is facing away from bodyA\n\n          if (Vector.dot(minOverlap.axis, Vector.sub(bodyB.position, bodyA.position)) < 0) {\n            collision.normal = {\n              x: minOverlap.axis.x,\n              y: minOverlap.axis.y\n            };\n          } else {\n            collision.normal = {\n              x: -minOverlap.axis.x,\n              y: -minOverlap.axis.y\n            };\n          }\n\n          collision.tangent = Vector.perp(collision.normal);\n          collision.penetration = collision.penetration || {};\n          collision.penetration.x = collision.normal.x * collision.depth;\n          collision.penetration.y = collision.normal.y * collision.depth; // find support points, there is always either exactly one or two\n\n          var verticesB = SAT._findSupports(bodyA, bodyB, collision.normal),\n              supports = []; // find the supports from bodyB that are inside bodyA\n\n\n          if (Vertices.contains(bodyA.vertices, verticesB[0])) supports.push(verticesB[0]);\n          if (Vertices.contains(bodyA.vertices, verticesB[1])) supports.push(verticesB[1]); // find the supports from bodyA that are inside bodyB\n\n          if (supports.length < 2) {\n            var verticesA = SAT._findSupports(bodyB, bodyA, Vector.neg(collision.normal));\n\n            if (Vertices.contains(bodyB.vertices, verticesA[0])) supports.push(verticesA[0]);\n            if (supports.length < 2 && Vertices.contains(bodyB.vertices, verticesA[1])) supports.push(verticesA[1]);\n          } // account for the edge case of overlapping but no vertex containment\n\n\n          if (supports.length < 1) supports = [verticesB[0]];\n          collision.supports = supports;\n          return collision;\n        };\n        /**\n         * Find the overlap between two sets of vertices.\n         * @method _overlapAxes\n         * @private\n         * @param {} verticesA\n         * @param {} verticesB\n         * @param {} axes\n         * @return result\n         */\n\n\n        SAT._overlapAxes = function (verticesA, verticesB, axes) {\n          var projectionA = Vector._temp[0],\n              projectionB = Vector._temp[1],\n              result = {\n            overlap: Number.MAX_VALUE\n          },\n              overlap,\n              axis;\n\n          for (var i = 0; i < axes.length; i++) {\n            axis = axes[i];\n\n            SAT._projectToAxis(projectionA, verticesA, axis);\n\n            SAT._projectToAxis(projectionB, verticesB, axis);\n\n            overlap = Math.min(projectionA.max - projectionB.min, projectionB.max - projectionA.min);\n\n            if (overlap <= 0) {\n              result.overlap = overlap;\n              return result;\n            }\n\n            if (overlap < result.overlap) {\n              result.overlap = overlap;\n              result.axis = axis;\n              result.axisNumber = i;\n            }\n          }\n\n          return result;\n        };\n        /**\n         * Projects vertices on an axis and returns an interval.\n         * @method _projectToAxis\n         * @private\n         * @param {} projection\n         * @param {} vertices\n         * @param {} axis\n         */\n\n\n        SAT._projectToAxis = function (projection, vertices, axis) {\n          var min = Vector.dot(vertices[0], axis),\n              max = min;\n\n          for (var i = 1; i < vertices.length; i += 1) {\n            var dot = Vector.dot(vertices[i], axis);\n\n            if (dot > max) {\n              max = dot;\n            } else if (dot < min) {\n              min = dot;\n            }\n          }\n\n          projection.min = min;\n          projection.max = max;\n        };\n        /**\n         * Finds supporting vertices given two bodies along a given direction using hill-climbing.\n         * @method _findSupports\n         * @private\n         * @param {} bodyA\n         * @param {} bodyB\n         * @param {} normal\n         * @return [vector]\n         */\n\n\n        SAT._findSupports = function (bodyA, bodyB, normal) {\n          var nearestDistance = Number.MAX_VALUE,\n              vertexToBody = Vector._temp[0],\n              vertices = bodyB.vertices,\n              bodyAPosition = bodyA.position,\n              distance,\n              vertex,\n              vertexA,\n              vertexB; // find closest vertex on bodyB\n\n          for (var i = 0; i < vertices.length; i++) {\n            vertex = vertices[i];\n            vertexToBody.x = vertex.x - bodyAPosition.x;\n            vertexToBody.y = vertex.y - bodyAPosition.y;\n            distance = -Vector.dot(normal, vertexToBody);\n\n            if (distance < nearestDistance) {\n              nearestDistance = distance;\n              vertexA = vertex;\n            }\n          } // find next closest vertex using the two connected to it\n\n\n          var prevIndex = vertexA.index - 1 >= 0 ? vertexA.index - 1 : vertices.length - 1;\n          vertex = vertices[prevIndex];\n          vertexToBody.x = vertex.x - bodyAPosition.x;\n          vertexToBody.y = vertex.y - bodyAPosition.y;\n          nearestDistance = -Vector.dot(normal, vertexToBody);\n          vertexB = vertex;\n          var nextIndex = (vertexA.index + 1) % vertices.length;\n          vertex = vertices[nextIndex];\n          vertexToBody.x = vertex.x - bodyAPosition.x;\n          vertexToBody.y = vertex.y - bodyAPosition.y;\n          distance = -Vector.dot(normal, vertexToBody);\n\n          if (distance < nearestDistance) {\n            vertexB = vertex;\n          }\n\n          return [vertexA, vertexB];\n        };\n      })();\n      /***/\n\n    },\n    /* 14 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      /**\n      * The `Matter.Mouse` module contains methods for creating and manipulating mouse inputs.\n      *\n      * @class Mouse\n      */\n      var Mouse = {};\n      module.exports = Mouse;\n\n      var Common = __webpack_require__(0);\n\n      (function () {\n        /**\n         * Creates a mouse input.\n         * @method create\n         * @param {HTMLElement} element\n         * @return {mouse} A new mouse\n         */\n        Mouse.create = function (element) {\n          var mouse = {};\n\n          if (!element) {\n            Common.log('Mouse.create: element was undefined, defaulting to document.body', 'warn');\n          }\n\n          mouse.element = element || document.body;\n          mouse.absolute = {\n            x: 0,\n            y: 0\n          };\n          mouse.position = {\n            x: 0,\n            y: 0\n          };\n          mouse.mousedownPosition = {\n            x: 0,\n            y: 0\n          };\n          mouse.mouseupPosition = {\n            x: 0,\n            y: 0\n          };\n          mouse.offset = {\n            x: 0,\n            y: 0\n          };\n          mouse.scale = {\n            x: 1,\n            y: 1\n          };\n          mouse.wheelDelta = 0;\n          mouse.button = -1;\n          mouse.pixelRatio = parseInt(mouse.element.getAttribute('data-pixel-ratio'), 10) || 1;\n          mouse.sourceEvents = {\n            mousemove: null,\n            mousedown: null,\n            mouseup: null,\n            mousewheel: null\n          };\n\n          mouse.mousemove = function (event) {\n            var position = Mouse._getRelativeMousePosition(event, mouse.element, mouse.pixelRatio),\n                touches = event.changedTouches;\n\n            if (touches) {\n              mouse.button = 0;\n              event.preventDefault();\n            }\n\n            mouse.absolute.x = position.x;\n            mouse.absolute.y = position.y;\n            mouse.position.x = mouse.absolute.x * mouse.scale.x + mouse.offset.x;\n            mouse.position.y = mouse.absolute.y * mouse.scale.y + mouse.offset.y;\n            mouse.sourceEvents.mousemove = event;\n          };\n\n          mouse.mousedown = function (event) {\n            var position = Mouse._getRelativeMousePosition(event, mouse.element, mouse.pixelRatio),\n                touches = event.changedTouches;\n\n            if (touches) {\n              mouse.button = 0;\n              event.preventDefault();\n            } else {\n              mouse.button = event.button;\n            }\n\n            mouse.absolute.x = position.x;\n            mouse.absolute.y = position.y;\n            mouse.position.x = mouse.absolute.x * mouse.scale.x + mouse.offset.x;\n            mouse.position.y = mouse.absolute.y * mouse.scale.y + mouse.offset.y;\n            mouse.mousedownPosition.x = mouse.position.x;\n            mouse.mousedownPosition.y = mouse.position.y;\n            mouse.sourceEvents.mousedown = event;\n          };\n\n          mouse.mouseup = function (event) {\n            var position = Mouse._getRelativeMousePosition(event, mouse.element, mouse.pixelRatio),\n                touches = event.changedTouches;\n\n            if (touches) {\n              event.preventDefault();\n            }\n\n            mouse.button = -1;\n            mouse.absolute.x = position.x;\n            mouse.absolute.y = position.y;\n            mouse.position.x = mouse.absolute.x * mouse.scale.x + mouse.offset.x;\n            mouse.position.y = mouse.absolute.y * mouse.scale.y + mouse.offset.y;\n            mouse.mouseupPosition.x = mouse.position.x;\n            mouse.mouseupPosition.y = mouse.position.y;\n            mouse.sourceEvents.mouseup = event;\n          };\n\n          mouse.mousewheel = function (event) {\n            mouse.wheelDelta = Math.max(-1, Math.min(1, event.wheelDelta || -event.detail));\n            event.preventDefault();\n          };\n\n          Mouse.setElement(mouse, mouse.element);\n          return mouse;\n        };\n        /**\n         * Sets the element the mouse is bound to (and relative to).\n         * @method setElement\n         * @param {mouse} mouse\n         * @param {HTMLElement} element\n         */\n\n\n        Mouse.setElement = function (mouse, element) {\n          mouse.element = element;\n          element.addEventListener('mousemove', mouse.mousemove);\n          element.addEventListener('mousedown', mouse.mousedown);\n          element.addEventListener('mouseup', mouse.mouseup);\n          element.addEventListener('mousewheel', mouse.mousewheel);\n          element.addEventListener('DOMMouseScroll', mouse.mousewheel);\n          element.addEventListener('touchmove', mouse.mousemove);\n          element.addEventListener('touchstart', mouse.mousedown);\n          element.addEventListener('touchend', mouse.mouseup);\n        };\n        /**\n         * Clears all captured source events.\n         * @method clearSourceEvents\n         * @param {mouse} mouse\n         */\n\n\n        Mouse.clearSourceEvents = function (mouse) {\n          mouse.sourceEvents.mousemove = null;\n          mouse.sourceEvents.mousedown = null;\n          mouse.sourceEvents.mouseup = null;\n          mouse.sourceEvents.mousewheel = null;\n          mouse.wheelDelta = 0;\n        };\n        /**\n         * Sets the mouse position offset.\n         * @method setOffset\n         * @param {mouse} mouse\n         * @param {vector} offset\n         */\n\n\n        Mouse.setOffset = function (mouse, offset) {\n          mouse.offset.x = offset.x;\n          mouse.offset.y = offset.y;\n          mouse.position.x = mouse.absolute.x * mouse.scale.x + mouse.offset.x;\n          mouse.position.y = mouse.absolute.y * mouse.scale.y + mouse.offset.y;\n        };\n        /**\n         * Sets the mouse position scale.\n         * @method setScale\n         * @param {mouse} mouse\n         * @param {vector} scale\n         */\n\n\n        Mouse.setScale = function (mouse, scale) {\n          mouse.scale.x = scale.x;\n          mouse.scale.y = scale.y;\n          mouse.position.x = mouse.absolute.x * mouse.scale.x + mouse.offset.x;\n          mouse.position.y = mouse.absolute.y * mouse.scale.y + mouse.offset.y;\n        };\n        /**\n         * Gets the mouse position relative to an element given a screen pixel ratio.\n         * @method _getRelativeMousePosition\n         * @private\n         * @param {} event\n         * @param {} element\n         * @param {number} pixelRatio\n         * @return {}\n         */\n\n\n        Mouse._getRelativeMousePosition = function (event, element, pixelRatio) {\n          var elementBounds = element.getBoundingClientRect(),\n              rootNode = document.documentElement || document.body.parentNode || document.body,\n              scrollX = window.pageXOffset !== undefined ? window.pageXOffset : rootNode.scrollLeft,\n              scrollY = window.pageYOffset !== undefined ? window.pageYOffset : rootNode.scrollTop,\n              touches = event.changedTouches,\n              x,\n              y;\n\n          if (touches) {\n            x = touches[0].pageX - elementBounds.left - scrollX;\n            y = touches[0].pageY - elementBounds.top - scrollY;\n          } else {\n            x = event.pageX - elementBounds.left - scrollX;\n            y = event.pageY - elementBounds.top - scrollY;\n          }\n\n          return {\n            x: x / (element.clientWidth / (element.width || element.clientWidth) * pixelRatio),\n            y: y / (element.clientHeight / (element.height || element.clientHeight) * pixelRatio)\n          };\n        };\n      })();\n      /***/\n\n    },\n    /* 15 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      /**\n      * The `Matter.Axes` module contains methods for creating and manipulating sets of axes.\n      *\n      * @class Axes\n      */\n      var Axes = {};\n      module.exports = Axes;\n\n      var Vector = __webpack_require__(2);\n\n      var Common = __webpack_require__(0);\n\n      (function () {\n        /**\n         * Creates a new set of axes from the given vertices.\n         * @method fromVertices\n         * @param {vertices} vertices\n         * @return {axes} A new axes from the given vertices\n         */\n        Axes.fromVertices = function (vertices) {\n          var axes = {}; // find the unique axes, using edge normal gradients\n\n          for (var i = 0; i < vertices.length; i++) {\n            var j = (i + 1) % vertices.length,\n                normal = Vector.normalise({\n              x: vertices[j].y - vertices[i].y,\n              y: vertices[i].x - vertices[j].x\n            }),\n                gradient = normal.y === 0 ? Infinity : normal.x / normal.y; // limit precision\n\n            gradient = gradient.toFixed(3).toString();\n            axes[gradient] = normal;\n          }\n\n          return Common.values(axes);\n        };\n        /**\n         * Rotates a set of axes by the given angle.\n         * @method rotate\n         * @param {axes} axes\n         * @param {number} angle\n         */\n\n\n        Axes.rotate = function (axes, angle) {\n          if (angle === 0) return;\n          var cos = Math.cos(angle),\n              sin = Math.sin(angle);\n\n          for (var i = 0; i < axes.length; i++) {\n            var axis = axes[i],\n                xx;\n            xx = axis.x * cos - axis.y * sin;\n            axis.y = axis.x * sin + axis.y * cos;\n            axis.x = xx;\n          }\n        };\n      })();\n      /***/\n\n    },\n    /* 16 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      /**\n      * The `Matter.Bodies` module contains factory methods for creating rigid body models \n      * with commonly used body configurations (such as rectangles, circles and other polygons).\n      *\n      * See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n      *\n      * @class Bodies\n      */\n      // TODO: true circle bodies\n      var Bodies = {};\n      module.exports = Bodies;\n\n      var Vertices = __webpack_require__(3);\n\n      var Common = __webpack_require__(0);\n\n      var Body = __webpack_require__(6);\n\n      var Bounds = __webpack_require__(1);\n\n      var Vector = __webpack_require__(2);\n\n      (function () {\n        Bodies._decompWarned = false;\n        /**\n         * Creates a new rigid body model with a rectangle hull. \n         * The options parameter is an object that specifies any properties you wish to override the defaults.\n         * See the properties section of the `Matter.Body` module for detailed information on what you can pass via the `options` object.\n         * @method rectangle\n         * @param {number} x\n         * @param {number} y\n         * @param {number} width\n         * @param {number} height\n         * @param {object} [options]\n         * @return {body} A new rectangle body\n         */\n\n        Bodies.rectangle = function (x, y, width, height, options) {\n          options = options || {};\n          var rectangle = {\n            label: 'Rectangle Body',\n            position: {\n              x: x,\n              y: y\n            },\n            vertices: Vertices.fromPath('L 0 0 L ' + width + ' 0 L ' + width + ' ' + height + ' L 0 ' + height)\n          };\n\n          if (options.chamfer) {\n            var chamfer = options.chamfer;\n            rectangle.vertices = Vertices.chamfer(rectangle.vertices, chamfer.radius, chamfer.quality, chamfer.qualityMin, chamfer.qualityMax);\n            delete options.chamfer;\n          }\n\n          return Body.create(Common.extend({}, rectangle, options));\n        };\n        /**\n         * Creates a new rigid body model with a trapezoid hull. \n         * The options parameter is an object that specifies any properties you wish to override the defaults.\n         * See the properties section of the `Matter.Body` module for detailed information on what you can pass via the `options` object.\n         * @method trapezoid\n         * @param {number} x\n         * @param {number} y\n         * @param {number} width\n         * @param {number} height\n         * @param {number} slope\n         * @param {object} [options]\n         * @return {body} A new trapezoid body\n         */\n\n\n        Bodies.trapezoid = function (x, y, width, height, slope, options) {\n          options = options || {};\n          slope *= 0.5;\n          var roof = (1 - slope * 2) * width;\n          var x1 = width * slope,\n              x2 = x1 + roof,\n              x3 = x2 + x1,\n              verticesPath;\n\n          if (slope < 0.5) {\n            verticesPath = 'L 0 0 L ' + x1 + ' ' + -height + ' L ' + x2 + ' ' + -height + ' L ' + x3 + ' 0';\n          } else {\n            verticesPath = 'L 0 0 L ' + x2 + ' ' + -height + ' L ' + x3 + ' 0';\n          }\n\n          var trapezoid = {\n            label: 'Trapezoid Body',\n            position: {\n              x: x,\n              y: y\n            },\n            vertices: Vertices.fromPath(verticesPath)\n          };\n\n          if (options.chamfer) {\n            var chamfer = options.chamfer;\n            trapezoid.vertices = Vertices.chamfer(trapezoid.vertices, chamfer.radius, chamfer.quality, chamfer.qualityMin, chamfer.qualityMax);\n            delete options.chamfer;\n          }\n\n          return Body.create(Common.extend({}, trapezoid, options));\n        };\n        /**\n         * Creates a new rigid body model with a circle hull. \n         * The options parameter is an object that specifies any properties you wish to override the defaults.\n         * See the properties section of the `Matter.Body` module for detailed information on what you can pass via the `options` object.\n         * @method circle\n         * @param {number} x\n         * @param {number} y\n         * @param {number} radius\n         * @param {object} [options]\n         * @param {number} [maxSides]\n         * @return {body} A new circle body\n         */\n\n\n        Bodies.circle = function (x, y, radius, options, maxSides) {\n          options = options || {};\n          var circle = {\n            label: 'Circle Body',\n            circleRadius: radius\n          }; // approximate circles with polygons until true circles implemented in SAT\n\n          maxSides = maxSides || 25;\n          var sides = Math.ceil(Math.max(10, Math.min(maxSides, radius))); // optimisation: always use even number of sides (half the number of unique axes)\n\n          if (sides % 2 === 1) sides += 1;\n          return Bodies.polygon(x, y, sides, radius, Common.extend({}, circle, options));\n        };\n        /**\n         * Creates a new rigid body model with a regular polygon hull with the given number of sides. \n         * The options parameter is an object that specifies any properties you wish to override the defaults.\n         * See the properties section of the `Matter.Body` module for detailed information on what you can pass via the `options` object.\n         * @method polygon\n         * @param {number} x\n         * @param {number} y\n         * @param {number} sides\n         * @param {number} radius\n         * @param {object} [options]\n         * @return {body} A new regular polygon body\n         */\n\n\n        Bodies.polygon = function (x, y, sides, radius, options) {\n          options = options || {};\n          if (sides < 3) return Bodies.circle(x, y, radius, options);\n          var theta = 2 * Math.PI / sides,\n              path = '',\n              offset = theta * 0.5;\n\n          for (var i = 0; i < sides; i += 1) {\n            var angle = offset + i * theta,\n                xx = Math.cos(angle) * radius,\n                yy = Math.sin(angle) * radius;\n            path += 'L ' + xx.toFixed(3) + ' ' + yy.toFixed(3) + ' ';\n          }\n\n          var polygon = {\n            label: 'Polygon Body',\n            position: {\n              x: x,\n              y: y\n            },\n            vertices: Vertices.fromPath(path)\n          };\n\n          if (options.chamfer) {\n            var chamfer = options.chamfer;\n            polygon.vertices = Vertices.chamfer(polygon.vertices, chamfer.radius, chamfer.quality, chamfer.qualityMin, chamfer.qualityMax);\n            delete options.chamfer;\n          }\n\n          return Body.create(Common.extend({}, polygon, options));\n        };\n        /**\n         * Creates a body based on set(s) of vertices.\n         * \n         * This utility builds on top of `Body.create` to automatically handle concave inputs.\n         * \n         * To use this decomposition feature the [poly-decomp](https://github.com/schteppe/poly-decomp.js) \n         * package should be additionally installed via npm or as a global.\n         * \n         * The resulting vertices are reorientated about their centre of mass,\n         * and offset such that `body.position` corresponds to this point.\n         * \n         * If needed the resulting offset may be found by subtracting `body.bounds` from the original input bounds.\n         * To later move the centre of mass see `Body.setCentre`.\n         * \n         * Note that decomposition results are not always perfect. \n         * \n         * For best results, simplify the input vertices as much as possible first.\n         * By default this function applies some addtional simplification to help.\n         * \n         * Some outputs may also require further manual processing afterwards to be robust.\n         * \n         * In particular some parts may need to be overlapped to avoid collision gaps.\n         * Thin parts and sharp points should be avoided or removed where possible.\n         *\n         * The options parameter object specifies any `Matter.Body` properties you wish to override the defaults.\n         * \n         * See the properties section of the `Matter.Body` module for detailed information on what you can pass via the `options` object.\n         * @method fromVertices\n         * @param {number} x\n         * @param {number} y\n         * @param [[vector]] vertexSets\n         * @param {object} [options]\n         * @param {bool} [flagInternal=false]\n         * @param {number} [removeCollinear=0.01]\n         * @param {number} [minimumArea=10]\n         * @param {number} [removeDuplicatePoints=0.01]\n         * @return {body}\n         */\n\n\n        Bodies.fromVertices = function (x, y, vertexSets, options, flagInternal, removeCollinear, minimumArea, removeDuplicatePoints) {\n          var decomp, canDecomp, body, parts, isConvex, isConcave, vertices, i, j, k, v, z;\n\n          try {\n            decomp = __webpack_require__(27);\n          } catch (e) {\n            // continue without decomp\n            decomp = null;\n          } // check expected decomp module was resolved\n\n\n          canDecomp = Boolean(decomp && decomp.quickDecomp);\n          options = options || {};\n          parts = [];\n          flagInternal = typeof flagInternal !== 'undefined' ? flagInternal : false;\n          removeCollinear = typeof removeCollinear !== 'undefined' ? removeCollinear : 0.01;\n          minimumArea = typeof minimumArea !== 'undefined' ? minimumArea : 10;\n          removeDuplicatePoints = typeof removeDuplicatePoints !== 'undefined' ? removeDuplicatePoints : 0.01; // ensure vertexSets is an array of arrays\n\n          if (!Common.isArray(vertexSets[0])) {\n            vertexSets = [vertexSets];\n          }\n\n          for (v = 0; v < vertexSets.length; v += 1) {\n            vertices = vertexSets[v];\n            isConvex = Vertices.isConvex(vertices);\n            isConcave = !isConvex;\n\n            if (isConcave && !canDecomp && !Bodies._decompWarned) {\n              Common.warn('Could not resolve the expected \\'poly-decomp\\' package for concave vertices in \\'Bodies.fromVertices\\'');\n              Common.warn('Try \\'npm install poly-decomp --save\\' or as a global e.g. \\'window.decomp\\'');\n              Bodies._decompWarned = true;\n            }\n\n            if (isConvex || !canDecomp) {\n              if (isConvex) {\n                vertices = Vertices.clockwiseSort(vertices);\n              } else {\n                // fallback to convex hull when decomposition is not possible\n                vertices = Vertices.hull(vertices);\n              }\n\n              parts.push({\n                position: {\n                  x: x,\n                  y: y\n                },\n                vertices: vertices\n              });\n            } else {\n              // initialise a decomposition\n              var concave = vertices.map(function (vertex) {\n                return [vertex.x, vertex.y];\n              }); // vertices are concave and simple, we can decompose into parts\n\n              decomp.makeCCW(concave);\n              if (removeCollinear !== false) decomp.removeCollinearPoints(concave, removeCollinear);\n              if (removeDuplicatePoints !== false && decomp.removeDuplicatePoints) decomp.removeDuplicatePoints(concave, removeDuplicatePoints); // use the quick decomposition algorithm (Bayazit)\n\n              var decomposed = decomp.quickDecomp(concave); // for each decomposed chunk\n\n              for (i = 0; i < decomposed.length; i++) {\n                var chunk = decomposed[i]; // convert vertices into the correct structure\n\n                var chunkVertices = chunk.map(function (vertices) {\n                  return {\n                    x: vertices[0],\n                    y: vertices[1]\n                  };\n                }); // skip small chunks\n\n                if (minimumArea > 0 && Vertices.area(chunkVertices) < minimumArea) continue; // create a compound part\n\n                parts.push({\n                  position: Vertices.centre(chunkVertices),\n                  vertices: chunkVertices\n                });\n              }\n            }\n          } // create body parts\n\n\n          for (i = 0; i < parts.length; i++) {\n            parts[i] = Body.create(Common.extend(parts[i], options));\n          } // flag internal edges (coincident part edges)\n\n\n          if (flagInternal) {\n            var coincident_max_dist = 5;\n\n            for (i = 0; i < parts.length; i++) {\n              var partA = parts[i];\n\n              for (j = i + 1; j < parts.length; j++) {\n                var partB = parts[j];\n\n                if (Bounds.overlaps(partA.bounds, partB.bounds)) {\n                  var pav = partA.vertices,\n                      pbv = partB.vertices; // iterate vertices of both parts\n\n                  for (k = 0; k < partA.vertices.length; k++) {\n                    for (z = 0; z < partB.vertices.length; z++) {\n                      // find distances between the vertices\n                      var da = Vector.magnitudeSquared(Vector.sub(pav[(k + 1) % pav.length], pbv[z])),\n                          db = Vector.magnitudeSquared(Vector.sub(pav[k], pbv[(z + 1) % pbv.length])); // if both vertices are very close, consider the edge concident (internal)\n\n                      if (da < coincident_max_dist && db < coincident_max_dist) {\n                        pav[k].isInternal = true;\n                        pbv[z].isInternal = true;\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n\n          if (parts.length > 1) {\n            // create the parent body to be returned, that contains generated compound parts\n            body = Body.create(Common.extend({\n              parts: parts.slice(0)\n            }, options)); // offset such that body.position is at the centre off mass\n\n            Body.setPosition(body, {\n              x: x,\n              y: y\n            });\n            return body;\n          } else {\n            return parts[0];\n          }\n        };\n      })();\n      /***/\n\n    },\n    /* 17 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      /**\n      * The `Matter.Plugin` module contains functions for registering and installing plugins on modules.\n      *\n      * @class Plugin\n      */\n      var Plugin = {};\n      module.exports = Plugin;\n\n      var Common = __webpack_require__(0);\n\n      (function () {\n        Plugin._registry = {};\n        /**\n         * Registers a plugin object so it can be resolved later by name.\n         * @method register\n         * @param plugin {} The plugin to register.\n         * @return {object} The plugin.\n         */\n\n        Plugin.register = function (plugin) {\n          if (!Plugin.isPlugin(plugin)) {\n            Common.warn('Plugin.register:', Plugin.toString(plugin), 'does not implement all required fields.');\n          }\n\n          if (plugin.name in Plugin._registry) {\n            var registered = Plugin._registry[plugin.name],\n                pluginVersion = Plugin.versionParse(plugin.version).number,\n                registeredVersion = Plugin.versionParse(registered.version).number;\n\n            if (pluginVersion > registeredVersion) {\n              Common.warn('Plugin.register:', Plugin.toString(registered), 'was upgraded to', Plugin.toString(plugin));\n              Plugin._registry[plugin.name] = plugin;\n            } else if (pluginVersion < registeredVersion) {\n              Common.warn('Plugin.register:', Plugin.toString(registered), 'can not be downgraded to', Plugin.toString(plugin));\n            } else if (plugin !== registered) {\n              Common.warn('Plugin.register:', Plugin.toString(plugin), 'is already registered to different plugin object');\n            }\n          } else {\n            Plugin._registry[plugin.name] = plugin;\n          }\n\n          return plugin;\n        };\n        /**\n         * Resolves a dependency to a plugin object from the registry if it exists. \n         * The `dependency` may contain a version, but only the name matters when resolving.\n         * @method resolve\n         * @param dependency {string} The dependency.\n         * @return {object} The plugin if resolved, otherwise `undefined`.\n         */\n\n\n        Plugin.resolve = function (dependency) {\n          return Plugin._registry[Plugin.dependencyParse(dependency).name];\n        };\n        /**\n         * Returns a pretty printed plugin name and version.\n         * @method toString\n         * @param plugin {} The plugin.\n         * @return {string} Pretty printed plugin name and version.\n         */\n\n\n        Plugin.toString = function (plugin) {\n          return typeof plugin === 'string' ? plugin : (plugin.name || 'anonymous') + '@' + (plugin.version || plugin.range || '0.0.0');\n        };\n        /**\n         * Returns `true` if the object meets the minimum standard to be considered a plugin.\n         * This means it must define the following properties:\n         * - `name`\n         * - `version`\n         * - `install`\n         * @method isPlugin\n         * @param obj {} The obj to test.\n         * @return {boolean} `true` if the object can be considered a plugin otherwise `false`.\n         */\n\n\n        Plugin.isPlugin = function (obj) {\n          return obj && obj.name && obj.version && obj.install;\n        };\n        /**\n         * Returns `true` if a plugin with the given `name` been installed on `module`.\n         * @method isUsed\n         * @param module {} The module.\n         * @param name {string} The plugin name.\n         * @return {boolean} `true` if a plugin with the given `name` been installed on `module`, otherwise `false`.\n         */\n\n\n        Plugin.isUsed = function (module, name) {\n          return module.used.indexOf(name) > -1;\n        };\n        /**\n         * Returns `true` if `plugin.for` is applicable to `module` by comparing against `module.name` and `module.version`.\n         * If `plugin.for` is not specified then it is assumed to be applicable.\n         * The value of `plugin.for` is a string of the format `'module-name'` or `'module-name@version'`.\n         * @method isFor\n         * @param plugin {} The plugin.\n         * @param module {} The module.\n         * @return {boolean} `true` if `plugin.for` is applicable to `module`, otherwise `false`.\n         */\n\n\n        Plugin.isFor = function (plugin, module) {\n          var parsed = plugin.for && Plugin.dependencyParse(plugin.for);\n          return !plugin.for || module.name === parsed.name && Plugin.versionSatisfies(module.version, parsed.range);\n        };\n        /**\n         * Installs the plugins by calling `plugin.install` on each plugin specified in `plugins` if passed, otherwise `module.uses`.\n         * For installing plugins on `Matter` see the convenience function `Matter.use`.\n         * Plugins may be specified either by their name or a reference to the plugin object.\n         * Plugins themselves may specify further dependencies, but each plugin is installed only once.\n         * Order is important, a topological sort is performed to find the best resulting order of installation.\n         * This sorting attempts to satisfy every dependency's requested ordering, but may not be exact in all cases.\n         * This function logs the resulting status of each dependency in the console, along with any warnings.\n         * - A green tick ✅ indicates a dependency was resolved and installed.\n         * - An orange diamond 🔶 indicates a dependency was resolved but a warning was thrown for it or one if its dependencies.\n         * - A red cross ❌ indicates a dependency could not be resolved.\n         * Avoid calling this function multiple times on the same module unless you intend to manually control installation order.\n         * @method use\n         * @param module {} The module install plugins on.\n         * @param [plugins=module.uses] {} The plugins to install on module (optional, defaults to `module.uses`).\n         */\n\n\n        Plugin.use = function (module, plugins) {\n          module.uses = (module.uses || []).concat(plugins || []);\n\n          if (module.uses.length === 0) {\n            Common.warn('Plugin.use:', Plugin.toString(module), 'does not specify any dependencies to install.');\n            return;\n          }\n\n          var dependencies = Plugin.dependencies(module),\n              sortedDependencies = Common.topologicalSort(dependencies),\n              status = [];\n\n          for (var i = 0; i < sortedDependencies.length; i += 1) {\n            if (sortedDependencies[i] === module.name) {\n              continue;\n            }\n\n            var plugin = Plugin.resolve(sortedDependencies[i]);\n\n            if (!plugin) {\n              status.push('❌ ' + sortedDependencies[i]);\n              continue;\n            }\n\n            if (Plugin.isUsed(module, plugin.name)) {\n              continue;\n            }\n\n            if (!Plugin.isFor(plugin, module)) {\n              Common.warn('Plugin.use:', Plugin.toString(plugin), 'is for', plugin.for, 'but installed on', Plugin.toString(module) + '.');\n              plugin._warned = true;\n            }\n\n            if (plugin.install) {\n              plugin.install(module);\n            } else {\n              Common.warn('Plugin.use:', Plugin.toString(plugin), 'does not specify an install function.');\n              plugin._warned = true;\n            }\n\n            if (plugin._warned) {\n              status.push('🔶 ' + Plugin.toString(plugin));\n              delete plugin._warned;\n            } else {\n              status.push('✅ ' + Plugin.toString(plugin));\n            }\n\n            module.used.push(plugin.name);\n          }\n\n          if (status.length > 0) {\n            Common.info(status.join('  '));\n          }\n        };\n        /**\n         * Recursively finds all of a module's dependencies and returns a flat dependency graph.\n         * @method dependencies\n         * @param module {} The module.\n         * @return {object} A dependency graph.\n         */\n\n\n        Plugin.dependencies = function (module, tracked) {\n          var parsedBase = Plugin.dependencyParse(module),\n              name = parsedBase.name;\n          tracked = tracked || {};\n\n          if (name in tracked) {\n            return;\n          }\n\n          module = Plugin.resolve(module) || module;\n          tracked[name] = Common.map(module.uses || [], function (dependency) {\n            if (Plugin.isPlugin(dependency)) {\n              Plugin.register(dependency);\n            }\n\n            var parsed = Plugin.dependencyParse(dependency),\n                resolved = Plugin.resolve(dependency);\n\n            if (resolved && !Plugin.versionSatisfies(resolved.version, parsed.range)) {\n              Common.warn('Plugin.dependencies:', Plugin.toString(resolved), 'does not satisfy', Plugin.toString(parsed), 'used by', Plugin.toString(parsedBase) + '.');\n              resolved._warned = true;\n              module._warned = true;\n            } else if (!resolved) {\n              Common.warn('Plugin.dependencies:', Plugin.toString(dependency), 'used by', Plugin.toString(parsedBase), 'could not be resolved.');\n              module._warned = true;\n            }\n\n            return parsed.name;\n          });\n\n          for (var i = 0; i < tracked[name].length; i += 1) {\n            Plugin.dependencies(tracked[name][i], tracked);\n          }\n\n          return tracked;\n        };\n        /**\n         * Parses a dependency string into its components.\n         * The `dependency` is a string of the format `'module-name'` or `'module-name@version'`.\n         * See documentation for `Plugin.versionParse` for a description of the format.\n         * This function can also handle dependencies that are already resolved (e.g. a module object).\n         * @method dependencyParse\n         * @param dependency {string} The dependency of the format `'module-name'` or `'module-name@version'`.\n         * @return {object} The dependency parsed into its components.\n         */\n\n\n        Plugin.dependencyParse = function (dependency) {\n          if (Common.isString(dependency)) {\n            var pattern = /^[\\w-]+(@(\\*|[\\^~]?\\d+\\.\\d+\\.\\d+(-[0-9A-Za-z-]+)?))?$/;\n\n            if (!pattern.test(dependency)) {\n              Common.warn('Plugin.dependencyParse:', dependency, 'is not a valid dependency string.');\n            }\n\n            return {\n              name: dependency.split('@')[0],\n              range: dependency.split('@')[1] || '*'\n            };\n          }\n\n          return {\n            name: dependency.name,\n            range: dependency.range || dependency.version\n          };\n        };\n        /**\n         * Parses a version string into its components.  \n         * Versions are strictly of the format `x.y.z` (as in [semver](http://semver.org/)).\n         * Versions may optionally have a prerelease tag in the format `x.y.z-alpha`.\n         * Ranges are a strict subset of [npm ranges](https://docs.npmjs.com/misc/semver#advanced-range-syntax).\n         * Only the following range types are supported:\n         * - Tilde ranges e.g. `~1.2.3`\n         * - Caret ranges e.g. `^1.2.3`\n         * - Greater than ranges e.g. `>1.2.3`\n         * - Greater than or equal ranges e.g. `>=1.2.3`\n         * - Exact version e.g. `1.2.3`\n         * - Any version `*`\n         * @method versionParse\n         * @param range {string} The version string.\n         * @return {object} The version range parsed into its components.\n         */\n\n\n        Plugin.versionParse = function (range) {\n          var pattern = /^(\\*)|(\\^|~|>=|>)?\\s*((\\d+)\\.(\\d+)\\.(\\d+))(-[0-9A-Za-z-]+)?$/;\n\n          if (!pattern.test(range)) {\n            Common.warn('Plugin.versionParse:', range, 'is not a valid version or range.');\n          }\n\n          var parts = pattern.exec(range);\n          var major = Number(parts[4]);\n          var minor = Number(parts[5]);\n          var patch = Number(parts[6]);\n          return {\n            isRange: Boolean(parts[1] || parts[2]),\n            version: parts[3],\n            range: range,\n            operator: parts[1] || parts[2] || '',\n            major: major,\n            minor: minor,\n            patch: patch,\n            parts: [major, minor, patch],\n            prerelease: parts[7],\n            number: major * 1e8 + minor * 1e4 + patch\n          };\n        };\n        /**\n         * Returns `true` if `version` satisfies the given `range`.\n         * See documentation for `Plugin.versionParse` for a description of the format.\n         * If a version or range is not specified, then any version (`*`) is assumed to satisfy.\n         * @method versionSatisfies\n         * @param version {string} The version string.\n         * @param range {string} The range string.\n         * @return {boolean} `true` if `version` satisfies `range`, otherwise `false`.\n         */\n\n\n        Plugin.versionSatisfies = function (version, range) {\n          range = range || '*';\n          var r = Plugin.versionParse(range),\n              v = Plugin.versionParse(version);\n\n          if (r.isRange) {\n            if (r.operator === '*' || version === '*') {\n              return true;\n            }\n\n            if (r.operator === '>') {\n              return v.number > r.number;\n            }\n\n            if (r.operator === '>=') {\n              return v.number >= r.number;\n            }\n\n            if (r.operator === '~') {\n              return v.major === r.major && v.minor === r.minor && v.patch >= r.patch;\n            }\n\n            if (r.operator === '^') {\n              if (r.major > 0) {\n                return v.major === r.major && v.number >= r.number;\n              }\n\n              if (r.minor > 0) {\n                return v.minor === r.minor && v.patch >= r.patch;\n              }\n\n              return v.patch === r.patch;\n            }\n          }\n\n          return version === range || version === '*';\n        };\n      })();\n      /***/\n\n    },\n    /* 18 */\n\n    /***/\n    function (module, exports) {\n      /**\n      * The `Matter.Contact` module contains methods for creating and manipulating collision contacts.\n      *\n      * @class Contact\n      */\n      var Contact = {};\n      module.exports = Contact;\n\n      (function () {\n        /**\n         * Creates a new contact.\n         * @method create\n         * @param {vertex} vertex\n         * @return {contact} A new contact\n         */\n        Contact.create = function (vertex) {\n          return {\n            id: Contact.id(vertex),\n            vertex: vertex,\n            normalImpulse: 0,\n            tangentImpulse: 0\n          };\n        };\n        /**\n         * Generates a contact id.\n         * @method id\n         * @param {vertex} vertex\n         * @return {string} Unique contactID\n         */\n\n\n        Contact.id = function (vertex) {\n          return vertex.body.id + '_' + vertex.index;\n        };\n      })();\n      /***/\n\n    },\n    /* 19 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      /**\n      * The `Matter.World` module contains methods for creating and manipulating the world composite.\n      * A `Matter.World` is a `Matter.Composite` body, which is a collection of `Matter.Body`, `Matter.Constraint` and other `Matter.Composite`.\n      * A `Matter.World` has a few additional properties including `gravity` and `bounds`.\n      * It is important to use the functions in the `Matter.Composite` module to modify the world composite, rather than directly modifying its properties.\n      * There are also a few methods here that alias those in `Matter.Composite` for easier readability.\n      *\n      * See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n      *\n      * @class World\n      * @extends Composite\n      */\n      var World = {};\n      module.exports = World;\n\n      var Composite = __webpack_require__(5);\n\n      var Constraint = __webpack_require__(8);\n\n      var Common = __webpack_require__(0);\n\n      (function () {\n        /**\n         * Creates a new world composite. The options parameter is an object that specifies any properties you wish to override the defaults.\n         * See the properties section below for detailed information on what you can pass via the `options` object.\n         * @method create\n         * @constructor\n         * @param {} options\n         * @return {world} A new world\n         */\n        World.create = function (options) {\n          var composite = Composite.create();\n          var defaults = {\n            label: 'World',\n            gravity: {\n              x: 0,\n              y: 1,\n              scale: 0.001\n            },\n            bounds: {\n              min: {\n                x: -Infinity,\n                y: -Infinity\n              },\n              max: {\n                x: Infinity,\n                y: Infinity\n              }\n            }\n          };\n          return Common.extend(composite, defaults, options);\n        };\n        /*\n        *\n        *  Properties Documentation\n        *\n        */\n\n        /**\n         * The gravity to apply on the world.\n         *\n         * @property gravity\n         * @type object\n         */\n\n        /**\n         * The gravity x component.\n         *\n         * @property gravity.x\n         * @type object\n         * @default 0\n         */\n\n        /**\n         * The gravity y component.\n         *\n         * @property gravity.y\n         * @type object\n         * @default 1\n         */\n\n        /**\n         * The gravity scale factor.\n         *\n         * @property gravity.scale\n         * @type object\n         * @default 0.001\n         */\n\n        /**\n         * A `Bounds` object that defines the world bounds for collision detection.\n         *\n         * @property bounds\n         * @type bounds\n         * @default { min: { x: -Infinity, y: -Infinity }, max: { x: Infinity, y: Infinity } }\n         */\n        // World is a Composite body\n        // see src/module/Outro.js for these aliases:\n\n        /**\n         * An alias for Composite.add\n         * @method add\n         * @param {world} world\n         * @param {} object\n         * @return {composite} The original world with the objects added\n         */\n\n        /**\n         * An alias for Composite.remove\n         * @method remove\n         * @param {world} world\n         * @param {} object\n         * @param {boolean} [deep=false]\n         * @return {composite} The original world with the objects removed\n         */\n\n        /**\n         * An alias for Composite.clear\n         * @method clear\n         * @param {world} world\n         * @param {boolean} keepStatic\n         */\n\n        /**\n         * An alias for Composite.addComposite\n         * @method addComposite\n         * @param {world} world\n         * @param {composite} composite\n         * @return {world} The original world with the objects from composite added\n         */\n\n        /**\n          * An alias for Composite.addBody\n          * @method addBody\n          * @param {world} world\n          * @param {body} body\n          * @return {world} The original world with the body added\n          */\n\n        /**\n          * An alias for Composite.addConstraint\n          * @method addConstraint\n          * @param {world} world\n          * @param {constraint} constraint\n          * @return {world} The original world with the constraint added\n          */\n\n      })();\n      /***/\n\n    },\n    /* 20 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      /**\n      * The `Matter.Pairs` module contains methods for creating and manipulating collision pair sets.\n      *\n      * @class Pairs\n      */\n      var Pairs = {};\n      module.exports = Pairs;\n\n      var Pair = __webpack_require__(9);\n\n      var Common = __webpack_require__(0);\n\n      (function () {\n        Pairs._pairMaxIdleLife = 1000;\n        /**\n         * Creates a new pairs structure.\n         * @method create\n         * @param {object} options\n         * @return {pairs} A new pairs structure\n         */\n\n        Pairs.create = function (options) {\n          return Common.extend({\n            table: {},\n            list: [],\n            collisionStart: [],\n            collisionActive: [],\n            collisionEnd: []\n          }, options);\n        };\n        /**\n         * Updates pairs given a list of collisions.\n         * @method update\n         * @param {object} pairs\n         * @param {collision[]} collisions\n         * @param {number} timestamp\n         */\n\n\n        Pairs.update = function (pairs, collisions, timestamp) {\n          var pairsList = pairs.list,\n              pairsTable = pairs.table,\n              collisionStart = pairs.collisionStart,\n              collisionEnd = pairs.collisionEnd,\n              collisionActive = pairs.collisionActive,\n              collision,\n              pairId,\n              pair,\n              i; // clear collision state arrays, but maintain old reference\n\n          collisionStart.length = 0;\n          collisionEnd.length = 0;\n          collisionActive.length = 0;\n\n          for (i = 0; i < pairsList.length; i++) {\n            pairsList[i].confirmedActive = false;\n          }\n\n          for (i = 0; i < collisions.length; i++) {\n            collision = collisions[i];\n\n            if (collision.collided) {\n              pairId = Pair.id(collision.bodyA, collision.bodyB);\n              pair = pairsTable[pairId];\n\n              if (pair) {\n                // pair already exists (but may or may not be active)\n                if (pair.isActive) {\n                  // pair exists and is active\n                  collisionActive.push(pair);\n                } else {\n                  // pair exists but was inactive, so a collision has just started again\n                  collisionStart.push(pair);\n                } // update the pair\n\n\n                Pair.update(pair, collision, timestamp);\n                pair.confirmedActive = true;\n              } else {\n                // pair did not exist, create a new pair\n                pair = Pair.create(collision, timestamp);\n                pairsTable[pairId] = pair; // push the new pair\n\n                collisionStart.push(pair);\n                pairsList.push(pair);\n              }\n            }\n          } // deactivate previously active pairs that are now inactive\n\n\n          for (i = 0; i < pairsList.length; i++) {\n            pair = pairsList[i];\n\n            if (pair.isActive && !pair.confirmedActive) {\n              Pair.setActive(pair, false, timestamp);\n              collisionEnd.push(pair);\n            }\n          }\n        };\n        /**\n         * Finds and removes pairs that have been inactive for a set amount of time.\n         * @method removeOld\n         * @param {object} pairs\n         * @param {number} timestamp\n         */\n\n\n        Pairs.removeOld = function (pairs, timestamp) {\n          var pairsList = pairs.list,\n              pairsTable = pairs.table,\n              indexesToRemove = [],\n              pair,\n              collision,\n              pairIndex,\n              i;\n\n          for (i = 0; i < pairsList.length; i++) {\n            pair = pairsList[i];\n            collision = pair.collision; // never remove sleeping pairs\n\n            if (collision.bodyA.isSleeping || collision.bodyB.isSleeping) {\n              pair.timeUpdated = timestamp;\n              continue;\n            } // if pair is inactive for too long, mark it to be removed\n\n\n            if (timestamp - pair.timeUpdated > Pairs._pairMaxIdleLife) {\n              indexesToRemove.push(i);\n            }\n          } // remove marked pairs\n\n\n          for (i = 0; i < indexesToRemove.length; i++) {\n            pairIndex = indexesToRemove[i] - i;\n            pair = pairsList[pairIndex];\n            delete pairsTable[pair.id];\n            pairsList.splice(pairIndex, 1);\n          }\n        };\n        /**\n         * Clears the given pairs structure.\n         * @method clear\n         * @param {pairs} pairs\n         * @return {pairs} pairs\n         */\n\n\n        Pairs.clear = function (pairs) {\n          pairs.table = {};\n          pairs.list.length = 0;\n          pairs.collisionStart.length = 0;\n          pairs.collisionActive.length = 0;\n          pairs.collisionEnd.length = 0;\n          return pairs;\n        };\n      })();\n      /***/\n\n    },\n    /* 21 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      /**\n      * The `Matter.Resolver` module contains methods for resolving collision pairs.\n      *\n      * @class Resolver\n      */\n      var Resolver = {};\n      module.exports = Resolver;\n\n      var Vertices = __webpack_require__(3);\n\n      var Vector = __webpack_require__(2);\n\n      var Common = __webpack_require__(0);\n\n      var Bounds = __webpack_require__(1);\n\n      (function () {\n        Resolver._restingThresh = 4;\n        Resolver._restingThreshTangent = 6;\n        Resolver._positionDampen = 0.9;\n        Resolver._positionWarming = 0.8;\n        Resolver._frictionNormalMultiplier = 5;\n        /**\n         * Prepare pairs for position solving.\n         * @method preSolvePosition\n         * @param {pair[]} pairs\n         */\n\n        Resolver.preSolvePosition = function (pairs) {\n          var i, pair, activeCount; // find total contacts on each body\n\n          for (i = 0; i < pairs.length; i++) {\n            pair = pairs[i];\n            if (!pair.isActive) continue;\n            activeCount = pair.activeContacts.length;\n            pair.collision.parentA.totalContacts += activeCount;\n            pair.collision.parentB.totalContacts += activeCount;\n          }\n        };\n        /**\n         * Find a solution for pair positions.\n         * @method solvePosition\n         * @param {pair[]} pairs\n         * @param {number} timeScale\n         */\n\n\n        Resolver.solvePosition = function (pairs, timeScale) {\n          var i,\n              pair,\n              collision,\n              bodyA,\n              bodyB,\n              normal,\n              bodyBtoA,\n              contactShare,\n              positionImpulse,\n              contactCount = {},\n              tempA = Vector._temp[0],\n              tempB = Vector._temp[1],\n              tempC = Vector._temp[2],\n              tempD = Vector._temp[3]; // find impulses required to resolve penetration\n\n          for (i = 0; i < pairs.length; i++) {\n            pair = pairs[i];\n            if (!pair.isActive || pair.isSensor) continue;\n            collision = pair.collision;\n            bodyA = collision.parentA;\n            bodyB = collision.parentB;\n            normal = collision.normal; // get current separation between body edges involved in collision\n\n            bodyBtoA = Vector.sub(Vector.add(bodyB.positionImpulse, bodyB.position, tempA), Vector.add(bodyA.positionImpulse, Vector.sub(bodyB.position, collision.penetration, tempB), tempC), tempD);\n            pair.separation = Vector.dot(normal, bodyBtoA);\n          }\n\n          for (i = 0; i < pairs.length; i++) {\n            pair = pairs[i];\n            if (!pair.isActive || pair.isSensor) continue;\n            collision = pair.collision;\n            bodyA = collision.parentA;\n            bodyB = collision.parentB;\n            normal = collision.normal;\n            positionImpulse = (pair.separation - pair.slop) * timeScale;\n            if (bodyA.isStatic || bodyB.isStatic) positionImpulse *= 2;\n\n            if (!(bodyA.isStatic || bodyA.isSleeping)) {\n              contactShare = Resolver._positionDampen / bodyA.totalContacts;\n              bodyA.positionImpulse.x += normal.x * positionImpulse * contactShare;\n              bodyA.positionImpulse.y += normal.y * positionImpulse * contactShare;\n            }\n\n            if (!(bodyB.isStatic || bodyB.isSleeping)) {\n              contactShare = Resolver._positionDampen / bodyB.totalContacts;\n              bodyB.positionImpulse.x -= normal.x * positionImpulse * contactShare;\n              bodyB.positionImpulse.y -= normal.y * positionImpulse * contactShare;\n            }\n          }\n        };\n        /**\n         * Apply position resolution.\n         * @method postSolvePosition\n         * @param {body[]} bodies\n         */\n\n\n        Resolver.postSolvePosition = function (bodies) {\n          for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i]; // reset contact count\n\n            body.totalContacts = 0;\n\n            if (body.positionImpulse.x !== 0 || body.positionImpulse.y !== 0) {\n              // update body geometry\n              for (var j = 0; j < body.parts.length; j++) {\n                var part = body.parts[j];\n                Vertices.translate(part.vertices, body.positionImpulse);\n                Bounds.update(part.bounds, part.vertices, body.velocity);\n                part.position.x += body.positionImpulse.x;\n                part.position.y += body.positionImpulse.y;\n              } // move the body without changing velocity\n\n\n              body.positionPrev.x += body.positionImpulse.x;\n              body.positionPrev.y += body.positionImpulse.y;\n\n              if (Vector.dot(body.positionImpulse, body.velocity) < 0) {\n                // reset cached impulse if the body has velocity along it\n                body.positionImpulse.x = 0;\n                body.positionImpulse.y = 0;\n              } else {\n                // warm the next iteration\n                body.positionImpulse.x *= Resolver._positionWarming;\n                body.positionImpulse.y *= Resolver._positionWarming;\n              }\n            }\n          }\n        };\n        /**\n         * Prepare pairs for velocity solving.\n         * @method preSolveVelocity\n         * @param {pair[]} pairs\n         */\n\n\n        Resolver.preSolveVelocity = function (pairs) {\n          var i,\n              j,\n              pair,\n              contacts,\n              collision,\n              bodyA,\n              bodyB,\n              normal,\n              tangent,\n              contact,\n              contactVertex,\n              normalImpulse,\n              tangentImpulse,\n              offset,\n              impulse = Vector._temp[0],\n              tempA = Vector._temp[1];\n\n          for (i = 0; i < pairs.length; i++) {\n            pair = pairs[i];\n            if (!pair.isActive || pair.isSensor) continue;\n            contacts = pair.activeContacts;\n            collision = pair.collision;\n            bodyA = collision.parentA;\n            bodyB = collision.parentB;\n            normal = collision.normal;\n            tangent = collision.tangent; // resolve each contact\n\n            for (j = 0; j < contacts.length; j++) {\n              contact = contacts[j];\n              contactVertex = contact.vertex;\n              normalImpulse = contact.normalImpulse;\n              tangentImpulse = contact.tangentImpulse;\n\n              if (normalImpulse !== 0 || tangentImpulse !== 0) {\n                // total impulse from contact\n                impulse.x = normal.x * normalImpulse + tangent.x * tangentImpulse;\n                impulse.y = normal.y * normalImpulse + tangent.y * tangentImpulse; // apply impulse from contact\n\n                if (!(bodyA.isStatic || bodyA.isSleeping)) {\n                  offset = Vector.sub(contactVertex, bodyA.position, tempA);\n                  bodyA.positionPrev.x += impulse.x * bodyA.inverseMass;\n                  bodyA.positionPrev.y += impulse.y * bodyA.inverseMass;\n                  bodyA.anglePrev += Vector.cross(offset, impulse) * bodyA.inverseInertia;\n                }\n\n                if (!(bodyB.isStatic || bodyB.isSleeping)) {\n                  offset = Vector.sub(contactVertex, bodyB.position, tempA);\n                  bodyB.positionPrev.x -= impulse.x * bodyB.inverseMass;\n                  bodyB.positionPrev.y -= impulse.y * bodyB.inverseMass;\n                  bodyB.anglePrev -= Vector.cross(offset, impulse) * bodyB.inverseInertia;\n                }\n              }\n            }\n          }\n        };\n        /**\n         * Find a solution for pair velocities.\n         * @method solveVelocity\n         * @param {pair[]} pairs\n         * @param {number} timeScale\n         */\n\n\n        Resolver.solveVelocity = function (pairs, timeScale) {\n          var timeScaleSquared = timeScale * timeScale,\n              impulse = Vector._temp[0],\n              tempA = Vector._temp[1],\n              tempB = Vector._temp[2],\n              tempC = Vector._temp[3],\n              tempD = Vector._temp[4],\n              tempE = Vector._temp[5];\n\n          for (var i = 0; i < pairs.length; i++) {\n            var pair = pairs[i];\n            if (!pair.isActive || pair.isSensor) continue;\n            var collision = pair.collision,\n                bodyA = collision.parentA,\n                bodyB = collision.parentB,\n                normal = collision.normal,\n                tangent = collision.tangent,\n                contacts = pair.activeContacts,\n                contactShare = 1 / contacts.length; // update body velocities\n\n            bodyA.velocity.x = bodyA.position.x - bodyA.positionPrev.x;\n            bodyA.velocity.y = bodyA.position.y - bodyA.positionPrev.y;\n            bodyB.velocity.x = bodyB.position.x - bodyB.positionPrev.x;\n            bodyB.velocity.y = bodyB.position.y - bodyB.positionPrev.y;\n            bodyA.angularVelocity = bodyA.angle - bodyA.anglePrev;\n            bodyB.angularVelocity = bodyB.angle - bodyB.anglePrev; // resolve each contact\n\n            for (var j = 0; j < contacts.length; j++) {\n              var contact = contacts[j],\n                  contactVertex = contact.vertex,\n                  offsetA = Vector.sub(contactVertex, bodyA.position, tempA),\n                  offsetB = Vector.sub(contactVertex, bodyB.position, tempB),\n                  velocityPointA = Vector.add(bodyA.velocity, Vector.mult(Vector.perp(offsetA), bodyA.angularVelocity), tempC),\n                  velocityPointB = Vector.add(bodyB.velocity, Vector.mult(Vector.perp(offsetB), bodyB.angularVelocity), tempD),\n                  relativeVelocity = Vector.sub(velocityPointA, velocityPointB, tempE),\n                  normalVelocity = Vector.dot(normal, relativeVelocity);\n              var tangentVelocity = Vector.dot(tangent, relativeVelocity),\n                  tangentSpeed = Math.abs(tangentVelocity),\n                  tangentVelocityDirection = Common.sign(tangentVelocity); // raw impulses\n\n              var normalImpulse = (1 + pair.restitution) * normalVelocity,\n                  normalForce = Common.clamp(pair.separation + normalVelocity, 0, 1) * Resolver._frictionNormalMultiplier; // coulomb friction\n\n\n              var tangentImpulse = tangentVelocity,\n                  maxFriction = Infinity;\n\n              if (tangentSpeed > pair.friction * pair.frictionStatic * normalForce * timeScaleSquared) {\n                maxFriction = tangentSpeed;\n                tangentImpulse = Common.clamp(pair.friction * tangentVelocityDirection * timeScaleSquared, -maxFriction, maxFriction);\n              } // modify impulses accounting for mass, inertia and offset\n\n\n              var oAcN = Vector.cross(offsetA, normal),\n                  oBcN = Vector.cross(offsetB, normal),\n                  share = contactShare / (bodyA.inverseMass + bodyB.inverseMass + bodyA.inverseInertia * oAcN * oAcN + bodyB.inverseInertia * oBcN * oBcN);\n              normalImpulse *= share;\n              tangentImpulse *= share; // handle high velocity and resting collisions separately\n\n              if (normalVelocity < 0 && normalVelocity * normalVelocity > Resolver._restingThresh * timeScaleSquared) {\n                // high normal velocity so clear cached contact normal impulse\n                contact.normalImpulse = 0;\n              } else {\n                // solve resting collision constraints using Erin Catto's method (GDC08)\n                // impulse constraint tends to 0\n                var contactNormalImpulse = contact.normalImpulse;\n                contact.normalImpulse = Math.min(contact.normalImpulse + normalImpulse, 0);\n                normalImpulse = contact.normalImpulse - contactNormalImpulse;\n              } // handle high velocity and resting collisions separately\n\n\n              if (tangentVelocity * tangentVelocity > Resolver._restingThreshTangent * timeScaleSquared) {\n                // high tangent velocity so clear cached contact tangent impulse\n                contact.tangentImpulse = 0;\n              } else {\n                // solve resting collision constraints using Erin Catto's method (GDC08)\n                // tangent impulse tends to -tangentSpeed or +tangentSpeed\n                var contactTangentImpulse = contact.tangentImpulse;\n                contact.tangentImpulse = Common.clamp(contact.tangentImpulse + tangentImpulse, -maxFriction, maxFriction);\n                tangentImpulse = contact.tangentImpulse - contactTangentImpulse;\n              } // total impulse from contact\n\n\n              impulse.x = normal.x * normalImpulse + tangent.x * tangentImpulse;\n              impulse.y = normal.y * normalImpulse + tangent.y * tangentImpulse; // apply impulse from contact\n\n              if (!(bodyA.isStatic || bodyA.isSleeping)) {\n                bodyA.positionPrev.x += impulse.x * bodyA.inverseMass;\n                bodyA.positionPrev.y += impulse.y * bodyA.inverseMass;\n                bodyA.anglePrev += Vector.cross(offsetA, impulse) * bodyA.inverseInertia;\n              }\n\n              if (!(bodyB.isStatic || bodyB.isSleeping)) {\n                bodyB.positionPrev.x -= impulse.x * bodyB.inverseMass;\n                bodyB.positionPrev.y -= impulse.y * bodyB.inverseMass;\n                bodyB.anglePrev -= Vector.cross(offsetB, impulse) * bodyB.inverseInertia;\n              }\n            }\n          }\n        };\n      })();\n      /***/\n\n    },\n    /* 22 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      /**\n      * The `Matter.Engine` module contains methods for creating and manipulating engines.\n      * An engine is a controller that manages updating the simulation of the world.\n      * See `Matter.Runner` for an optional game loop utility.\n      *\n      * See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n      *\n      * @class Engine\n      */\n      var Engine = {};\n      module.exports = Engine;\n\n      var World = __webpack_require__(19);\n\n      var Sleeping = __webpack_require__(7);\n\n      var Resolver = __webpack_require__(21);\n\n      var Render = __webpack_require__(10);\n\n      var Pairs = __webpack_require__(20);\n\n      var Metrics = __webpack_require__(23);\n\n      var Grid = __webpack_require__(11);\n\n      var Events = __webpack_require__(4);\n\n      var Composite = __webpack_require__(5);\n\n      var Constraint = __webpack_require__(8);\n\n      var Common = __webpack_require__(0);\n\n      var Body = __webpack_require__(6);\n\n      (function () {\n        /**\n         * Creates a new engine. The options parameter is an object that specifies any properties you wish to override the defaults.\n         * All properties have default values, and many are pre-calculated automatically based on other properties.\n         * See the properties section below for detailed information on what you can pass via the `options` object.\n         * @method create\n         * @param {object} [options]\n         * @return {engine} engine\n         */\n        Engine.create = function (element, options) {\n          // options may be passed as the first (and only) argument\n          options = Common.isElement(element) ? options : element;\n          element = Common.isElement(element) ? element : null;\n          options = options || {};\n\n          if (element || options.render) {\n            Common.warn('Engine.create: engine.render is deprecated (see docs)');\n          }\n\n          var defaults = {\n            positionIterations: 6,\n            velocityIterations: 4,\n            constraintIterations: 2,\n            enableSleeping: false,\n            events: [],\n            plugin: {},\n            timing: {\n              timestamp: 0,\n              timeScale: 1\n            },\n            broadphase: {\n              controller: Grid\n            }\n          };\n          var engine = Common.extend(defaults, options); // back compatibility\n\n          if (element || engine.render) {\n            var renderDefaults = {\n              element: element,\n              controller: Render\n            };\n            engine.render = Common.extend(renderDefaults, engine.render);\n          } // back compatibility\n\n\n          if (engine.render && engine.render.controller) {\n            engine.render = engine.render.controller.create(engine.render);\n          } // back compatibility\n\n\n          if (engine.render) {\n            engine.render.engine = engine;\n          }\n\n          engine.world = options.world || World.create(engine.world);\n          engine.pairs = Pairs.create();\n          engine.broadphase = engine.broadphase.controller.create(engine.broadphase);\n          engine.metrics = engine.metrics || {\n            extended: false\n          }; // @if DEBUG\n\n          engine.metrics = Metrics.create(engine.metrics); // @endif\n\n          return engine;\n        };\n        /**\n         * Moves the simulation forward in time by `delta` ms.\n         * The `correction` argument is an optional `Number` that specifies the time correction factor to apply to the update.\n         * This can help improve the accuracy of the simulation in cases where `delta` is changing between updates.\n         * The value of `correction` is defined as `delta / lastDelta`, i.e. the percentage change of `delta` over the last step.\n         * Therefore the value is always `1` (no correction) when `delta` constant (or when no correction is desired, which is the default).\n         * See the paper on <a href=\"http://lonesock.net/article/verlet.html\">Time Corrected Verlet</a> for more information.\n         *\n         * Triggers `beforeUpdate` and `afterUpdate` events.\n         * Triggers `collisionStart`, `collisionActive` and `collisionEnd` events.\n         * @method update\n         * @param {engine} engine\n         * @param {number} [delta=16.666]\n         * @param {number} [correction=1]\n         */\n\n\n        Engine.update = function (engine, delta, correction) {\n          delta = delta || 1000 / 60;\n          correction = correction || 1;\n          var world = engine.world,\n              timing = engine.timing,\n              broadphase = engine.broadphase,\n              broadphasePairs = [],\n              i; // increment timestamp\n\n          timing.timestamp += delta * timing.timeScale; // create an event object\n\n          var event = {\n            timestamp: timing.timestamp\n          };\n          Events.trigger(engine, 'beforeUpdate', event); // get lists of all bodies and constraints, no matter what composites they are in\n\n          var allBodies = Composite.allBodies(world),\n              allConstraints = Composite.allConstraints(world); // @if DEBUG\n          // reset metrics logging\n\n          Metrics.reset(engine.metrics); // @endif\n          // if sleeping enabled, call the sleeping controller\n\n          if (engine.enableSleeping) Sleeping.update(allBodies, timing.timeScale); // applies gravity to all bodies\n\n          Engine._bodiesApplyGravity(allBodies, world.gravity); // update all body position and rotation by integration\n\n\n          Engine._bodiesUpdate(allBodies, delta, timing.timeScale, correction, world.bounds); // update all constraints (first pass)\n\n\n          Constraint.preSolveAll(allBodies);\n\n          for (i = 0; i < engine.constraintIterations; i++) {\n            Constraint.solveAll(allConstraints, timing.timeScale);\n          }\n\n          Constraint.postSolveAll(allBodies); // broadphase pass: find potential collision pairs\n\n          if (broadphase.controller) {\n            // if world is dirty, we must flush the whole grid\n            if (world.isModified) broadphase.controller.clear(broadphase); // update the grid buckets based on current bodies\n\n            broadphase.controller.update(broadphase, allBodies, engine, world.isModified);\n            broadphasePairs = broadphase.pairsList;\n          } else {\n            // if no broadphase set, we just pass all bodies\n            broadphasePairs = allBodies;\n          } // clear all composite modified flags\n\n\n          if (world.isModified) {\n            Composite.setModified(world, false, false, true);\n          } // narrowphase pass: find actual collisions, then create or update collision pairs\n\n\n          var collisions = broadphase.detector(broadphasePairs, engine); // update collision pairs\n\n          var pairs = engine.pairs,\n              timestamp = timing.timestamp;\n          Pairs.update(pairs, collisions, timestamp);\n          Pairs.removeOld(pairs, timestamp); // wake up bodies involved in collisions\n\n          if (engine.enableSleeping) Sleeping.afterCollisions(pairs.list, timing.timeScale); // trigger collision events\n\n          if (pairs.collisionStart.length > 0) Events.trigger(engine, 'collisionStart', {\n            pairs: pairs.collisionStart\n          }); // iteratively resolve position between collisions\n\n          Resolver.preSolvePosition(pairs.list);\n\n          for (i = 0; i < engine.positionIterations; i++) {\n            Resolver.solvePosition(pairs.list, timing.timeScale);\n          }\n\n          Resolver.postSolvePosition(allBodies); // update all constraints (second pass)\n\n          Constraint.preSolveAll(allBodies);\n\n          for (i = 0; i < engine.constraintIterations; i++) {\n            Constraint.solveAll(allConstraints, timing.timeScale);\n          }\n\n          Constraint.postSolveAll(allBodies); // iteratively resolve velocity between collisions\n\n          Resolver.preSolveVelocity(pairs.list);\n\n          for (i = 0; i < engine.velocityIterations; i++) {\n            Resolver.solveVelocity(pairs.list, timing.timeScale);\n          } // trigger collision events\n\n\n          if (pairs.collisionActive.length > 0) Events.trigger(engine, 'collisionActive', {\n            pairs: pairs.collisionActive\n          });\n          if (pairs.collisionEnd.length > 0) Events.trigger(engine, 'collisionEnd', {\n            pairs: pairs.collisionEnd\n          }); // @if DEBUG\n          // update metrics log\n\n          Metrics.update(engine.metrics, engine); // @endif\n          // clear force buffers\n\n          Engine._bodiesClearForces(allBodies);\n\n          Events.trigger(engine, 'afterUpdate', event);\n          return engine;\n        };\n        /**\n         * Merges two engines by keeping the configuration of `engineA` but replacing the world with the one from `engineB`.\n         * @method merge\n         * @param {engine} engineA\n         * @param {engine} engineB\n         */\n\n\n        Engine.merge = function (engineA, engineB) {\n          Common.extend(engineA, engineB);\n\n          if (engineB.world) {\n            engineA.world = engineB.world;\n            Engine.clear(engineA);\n            var bodies = Composite.allBodies(engineA.world);\n\n            for (var i = 0; i < bodies.length; i++) {\n              var body = bodies[i];\n              Sleeping.set(body, false);\n              body.id = Common.nextId();\n            }\n          }\n        };\n        /**\n         * Clears the engine including the world, pairs and broadphase.\n         * @method clear\n         * @param {engine} engine\n         */\n\n\n        Engine.clear = function (engine) {\n          var world = engine.world;\n          Pairs.clear(engine.pairs);\n          var broadphase = engine.broadphase;\n\n          if (broadphase.controller) {\n            var bodies = Composite.allBodies(world);\n            broadphase.controller.clear(broadphase);\n            broadphase.controller.update(broadphase, bodies, engine, true);\n          }\n        };\n        /**\n         * Zeroes the `body.force` and `body.torque` force buffers.\n         * @method _bodiesClearForces\n         * @private\n         * @param {body[]} bodies\n         */\n\n\n        Engine._bodiesClearForces = function (bodies) {\n          for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i]; // reset force buffers\n\n            body.force.x = 0;\n            body.force.y = 0;\n            body.torque = 0;\n          }\n        };\n        /**\n         * Applys a mass dependant force to all given bodies.\n         * @method _bodiesApplyGravity\n         * @private\n         * @param {body[]} bodies\n         * @param {vector} gravity\n         */\n\n\n        Engine._bodiesApplyGravity = function (bodies, gravity) {\n          var gravityScale = typeof gravity.scale !== 'undefined' ? gravity.scale : 0.001;\n\n          if (gravity.x === 0 && gravity.y === 0 || gravityScale === 0) {\n            return;\n          }\n\n          for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i];\n            if (body.isStatic || body.isSleeping) continue; // apply gravity\n\n            body.force.y += body.mass * gravity.y * gravityScale;\n            body.force.x += body.mass * gravity.x * gravityScale;\n          }\n        };\n        /**\n         * Applys `Body.update` to all given `bodies`.\n         * @method _bodiesUpdate\n         * @private\n         * @param {body[]} bodies\n         * @param {number} deltaTime \n         * The amount of time elapsed between updates\n         * @param {number} timeScale\n         * @param {number} correction \n         * The Verlet correction factor (deltaTime / lastDeltaTime)\n         * @param {bounds} worldBounds\n         */\n\n\n        Engine._bodiesUpdate = function (bodies, deltaTime, timeScale, correction, worldBounds) {\n          for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i];\n            if (body.isStatic || body.isSleeping) continue;\n            Body.update(body, deltaTime, timeScale, correction);\n          }\n        };\n        /**\n         * An alias for `Runner.run`, see `Matter.Runner` for more information.\n         * @method run\n         * @param {engine} engine\n         */\n\n        /**\n        * Fired just before an update\n        *\n        * @event beforeUpdate\n        * @param {} event An event object\n        * @param {number} event.timestamp The engine.timing.timestamp of the event\n        * @param {} event.source The source object of the event\n        * @param {} event.name The name of the event\n        */\n\n        /**\n        * Fired after engine update and all collision events\n        *\n        * @event afterUpdate\n        * @param {} event An event object\n        * @param {number} event.timestamp The engine.timing.timestamp of the event\n        * @param {} event.source The source object of the event\n        * @param {} event.name The name of the event\n        */\n\n        /**\n        * Fired after engine update, provides a list of all pairs that have started to collide in the current tick (if any)\n        *\n        * @event collisionStart\n        * @param {} event An event object\n        * @param {} event.pairs List of affected pairs\n        * @param {number} event.timestamp The engine.timing.timestamp of the event\n        * @param {} event.source The source object of the event\n        * @param {} event.name The name of the event\n        */\n\n        /**\n        * Fired after engine update, provides a list of all pairs that are colliding in the current tick (if any)\n        *\n        * @event collisionActive\n        * @param {} event An event object\n        * @param {} event.pairs List of affected pairs\n        * @param {number} event.timestamp The engine.timing.timestamp of the event\n        * @param {} event.source The source object of the event\n        * @param {} event.name The name of the event\n        */\n\n        /**\n        * Fired after engine update, provides a list of all pairs that have ended collision in the current tick (if any)\n        *\n        * @event collisionEnd\n        * @param {} event An event object\n        * @param {} event.pairs List of affected pairs\n        * @param {number} event.timestamp The engine.timing.timestamp of the event\n        * @param {} event.source The source object of the event\n        * @param {} event.name The name of the event\n        */\n\n        /*\n        *\n        *  Properties Documentation\n        *\n        */\n\n        /**\n         * An integer `Number` that specifies the number of position iterations to perform each update.\n         * The higher the value, the higher quality the simulation will be at the expense of performance.\n         *\n         * @property positionIterations\n         * @type number\n         * @default 6\n         */\n\n        /**\n         * An integer `Number` that specifies the number of velocity iterations to perform each update.\n         * The higher the value, the higher quality the simulation will be at the expense of performance.\n         *\n         * @property velocityIterations\n         * @type number\n         * @default 4\n         */\n\n        /**\n         * An integer `Number` that specifies the number of constraint iterations to perform each update.\n         * The higher the value, the higher quality the simulation will be at the expense of performance.\n         * The default value of `2` is usually very adequate.\n         *\n         * @property constraintIterations\n         * @type number\n         * @default 2\n         */\n\n        /**\n         * A flag that specifies whether the engine should allow sleeping via the `Matter.Sleeping` module.\n         * Sleeping can improve stability and performance, but often at the expense of accuracy.\n         *\n         * @property enableSleeping\n         * @type boolean\n         * @default false\n         */\n\n        /**\n         * An `Object` containing properties regarding the timing systems of the engine. \n         *\n         * @property timing\n         * @type object\n         */\n\n        /**\n         * A `Number` that specifies the global scaling factor of time for all bodies.\n         * A value of `0` freezes the simulation.\n         * A value of `0.1` gives a slow-motion effect.\n         * A value of `1.2` gives a speed-up effect.\n         *\n         * @property timing.timeScale\n         * @type number\n         * @default 1\n         */\n\n        /**\n         * A `Number` that specifies the current simulation-time in milliseconds starting from `0`. \n         * It is incremented on every `Engine.update` by the given `delta` argument. \n         *\n         * @property timing.timestamp\n         * @type number\n         * @default 0\n         */\n\n        /**\n         * An instance of a `Render` controller. The default value is a `Matter.Render` instance created by `Engine.create`.\n         * One may also develop a custom renderer module based on `Matter.Render` and pass an instance of it to `Engine.create` via `options.render`.\n         *\n         * A minimal custom renderer object must define at least three functions: `create`, `clear` and `world` (see `Matter.Render`).\n         * It is also possible to instead pass the _module_ reference via `options.render.controller` and `Engine.create` will instantiate one for you.\n         *\n         * @property render\n         * @type render\n         * @deprecated see Demo.js for an example of creating a renderer\n         * @default a Matter.Render instance\n         */\n\n        /**\n         * An instance of a broadphase controller. The default value is a `Matter.Grid` instance created by `Engine.create`.\n         *\n         * @property broadphase\n         * @type grid\n         * @default a Matter.Grid instance\n         */\n\n        /**\n         * A `World` composite object that will contain all simulated bodies and constraints.\n         *\n         * @property world\n         * @type world\n         * @default a Matter.World instance\n         */\n\n        /**\n         * An object reserved for storing plugin-specific properties.\n         *\n         * @property plugin\n         * @type {}\n         */\n\n      })();\n      /***/\n\n    },\n    /* 23 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      // @if DEBUG\n\n      /**\n      * _Internal Class_, not generally used outside of the engine's internals.\n      *\n      */\n      var Metrics = {};\n      module.exports = Metrics;\n\n      var Composite = __webpack_require__(5);\n\n      var Common = __webpack_require__(0);\n\n      (function () {\n        /**\n         * Creates a new metrics.\n         * @method create\n         * @private\n         * @return {metrics} A new metrics\n         */\n        Metrics.create = function (options) {\n          var defaults = {\n            extended: false,\n            narrowDetections: 0,\n            narrowphaseTests: 0,\n            narrowReuse: 0,\n            narrowReuseCount: 0,\n            midphaseTests: 0,\n            broadphaseTests: 0,\n            narrowEff: 0.0001,\n            midEff: 0.0001,\n            broadEff: 0.0001,\n            collisions: 0,\n            buckets: 0,\n            bodies: 0,\n            pairs: 0\n          };\n          return Common.extend(defaults, false, options);\n        };\n        /**\n         * Resets metrics.\n         * @method reset\n         * @private\n         * @param {metrics} metrics\n         */\n\n\n        Metrics.reset = function (metrics) {\n          if (metrics.extended) {\n            metrics.narrowDetections = 0;\n            metrics.narrowphaseTests = 0;\n            metrics.narrowReuse = 0;\n            metrics.narrowReuseCount = 0;\n            metrics.midphaseTests = 0;\n            metrics.broadphaseTests = 0;\n            metrics.narrowEff = 0;\n            metrics.midEff = 0;\n            metrics.broadEff = 0;\n            metrics.collisions = 0;\n            metrics.buckets = 0;\n            metrics.pairs = 0;\n            metrics.bodies = 0;\n          }\n        };\n        /**\n         * Updates metrics.\n         * @method update\n         * @private\n         * @param {metrics} metrics\n         * @param {engine} engine\n         */\n\n\n        Metrics.update = function (metrics, engine) {\n          if (metrics.extended) {\n            var world = engine.world,\n                bodies = Composite.allBodies(world);\n            metrics.collisions = metrics.narrowDetections;\n            metrics.pairs = engine.pairs.list.length;\n            metrics.bodies = bodies.length;\n            metrics.midEff = (metrics.narrowDetections / (metrics.midphaseTests || 1)).toFixed(2);\n            metrics.narrowEff = (metrics.narrowDetections / (metrics.narrowphaseTests || 1)).toFixed(2);\n            metrics.broadEff = (1 - metrics.broadphaseTests / (bodies.length || 1)).toFixed(2);\n            metrics.narrowReuse = (metrics.narrowReuseCount / (metrics.narrowphaseTests || 1)).toFixed(2); //var broadphase = engine.broadphase[engine.broadphase.current];\n            //if (broadphase.instance)\n            //    metrics.buckets = Common.keys(broadphase.instance.buckets).length;\n          }\n        };\n      })(); // @endif\n\n      /***/\n\n    },\n    /* 24 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      var Matter = module.exports = __webpack_require__(25);\n\n      Matter.Body = __webpack_require__(6);\n      Matter.Composite = __webpack_require__(5);\n      Matter.World = __webpack_require__(19);\n      Matter.Contact = __webpack_require__(18);\n      Matter.Detector = __webpack_require__(12);\n      Matter.Grid = __webpack_require__(11);\n      Matter.Pairs = __webpack_require__(20);\n      Matter.Pair = __webpack_require__(9);\n      Matter.Query = __webpack_require__(26);\n      Matter.Resolver = __webpack_require__(21);\n      Matter.SAT = __webpack_require__(13);\n      Matter.Constraint = __webpack_require__(8);\n      Matter.MouseConstraint = __webpack_require__(28);\n      Matter.Common = __webpack_require__(0);\n      Matter.Engine = __webpack_require__(22);\n      Matter.Events = __webpack_require__(4);\n      Matter.Mouse = __webpack_require__(14);\n      Matter.Runner = __webpack_require__(29);\n      Matter.Sleeping = __webpack_require__(7);\n      Matter.Plugin = __webpack_require__(17); // @if DEBUG\n\n      Matter.Metrics = __webpack_require__(23); // @endif\n\n      Matter.Bodies = __webpack_require__(16);\n      Matter.Composites = __webpack_require__(30);\n      Matter.Axes = __webpack_require__(15);\n      Matter.Bounds = __webpack_require__(1);\n      Matter.Svg = __webpack_require__(31);\n      Matter.Vector = __webpack_require__(2);\n      Matter.Vertices = __webpack_require__(3);\n      Matter.Render = __webpack_require__(10);\n      Matter.RenderPixi = __webpack_require__(32); // aliases\n\n      Matter.World.add = Matter.Composite.add;\n      Matter.World.remove = Matter.Composite.remove;\n      Matter.World.addComposite = Matter.Composite.addComposite;\n      Matter.World.addBody = Matter.Composite.addBody;\n      Matter.World.addConstraint = Matter.Composite.addConstraint;\n      Matter.World.clear = Matter.Composite.clear;\n      Matter.Engine.run = Matter.Runner.run;\n      /***/\n    },\n    /* 25 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      /**\r\n      * The `Matter` module is the top level namespace. It also includes a function for installing plugins on top of the library.\r\n      *\r\n      * @class Matter\r\n      */\n      var Matter = {};\n      module.exports = Matter;\n\n      var Plugin = __webpack_require__(17);\n\n      var Common = __webpack_require__(0);\n\n      (function () {\n        /**\r\n         * The library name.\r\n         * @property name\r\n         * @readOnly\r\n         * @type {String}\r\n         */\n        Matter.name = 'matter-js';\n        /**\r\n         * The library version.\r\n         * @property version\r\n         * @readOnly\r\n         * @type {String}\r\n         */\n\n        Matter.version = true ? \"0.16.1\" : undefined;\n        /**\r\n         * A list of plugin dependencies to be installed. These are normally set and installed through `Matter.use`.\r\n         * Alternatively you may set `Matter.uses` manually and install them by calling `Plugin.use(Matter)`.\r\n         * @property uses\r\n         * @type {Array}\r\n         */\n\n        Matter.uses = [];\n        /**\r\n         * The plugins that have been installed through `Matter.Plugin.install`. Read only.\r\n         * @property used\r\n         * @readOnly\r\n         * @type {Array}\r\n         */\n\n        Matter.used = [];\n        /**\r\n         * Installs the given plugins on the `Matter` namespace.\r\n         * This is a short-hand for `Plugin.use`, see it for more information.\r\n         * Call this function once at the start of your code, with all of the plugins you wish to install as arguments.\r\n         * Avoid calling this function multiple times unless you intend to manually control installation order.\r\n         * @method use\r\n         * @param ...plugin {Function} The plugin(s) to install on `base` (multi-argument).\r\n         */\n\n        Matter.use = function () {\n          Plugin.use(Matter, Array.prototype.slice.call(arguments));\n        };\n        /**\r\n         * Chains a function to excute before the original function on the given `path` relative to `Matter`.\r\n         * See also docs for `Common.chain`.\r\n         * @method before\r\n         * @param {string} path The path relative to `Matter`\r\n         * @param {function} func The function to chain before the original\r\n         * @return {function} The chained function that replaced the original\r\n         */\n\n\n        Matter.before = function (path, func) {\n          path = path.replace(/^Matter./, '');\n          return Common.chainPathBefore(Matter, path, func);\n        };\n        /**\r\n         * Chains a function to excute after the original function on the given `path` relative to `Matter`.\r\n         * See also docs for `Common.chain`.\r\n         * @method after\r\n         * @param {string} path The path relative to `Matter`\r\n         * @param {function} func The function to chain after the original\r\n         * @return {function} The chained function that replaced the original\r\n         */\n\n\n        Matter.after = function (path, func) {\n          path = path.replace(/^Matter./, '');\n          return Common.chainPathAfter(Matter, path, func);\n        };\n      })();\n      /***/\n\n    },\n    /* 26 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      /**\n      * The `Matter.Query` module contains methods for performing collision queries.\n      *\n      * See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n      *\n      * @class Query\n      */\n      var Query = {};\n      module.exports = Query;\n\n      var Vector = __webpack_require__(2);\n\n      var SAT = __webpack_require__(13);\n\n      var Bounds = __webpack_require__(1);\n\n      var Bodies = __webpack_require__(16);\n\n      var Vertices = __webpack_require__(3);\n\n      (function () {\n        /**\n         * Returns a list of collisions between `body` and `bodies`.\n         * @method collides\n         * @param {body} body\n         * @param {body[]} bodies\n         * @return {object[]} Collisions\n         */\n        Query.collides = function (body, bodies) {\n          var collisions = [];\n\n          for (var i = 0; i < bodies.length; i++) {\n            var bodyA = bodies[i];\n\n            if (Bounds.overlaps(bodyA.bounds, body.bounds)) {\n              for (var j = bodyA.parts.length === 1 ? 0 : 1; j < bodyA.parts.length; j++) {\n                var part = bodyA.parts[j];\n\n                if (Bounds.overlaps(part.bounds, body.bounds)) {\n                  var collision = SAT.collides(part, body);\n\n                  if (collision.collided) {\n                    collisions.push(collision);\n                    break;\n                  }\n                }\n              }\n            }\n          }\n\n          return collisions;\n        };\n        /**\n         * Casts a ray segment against a set of bodies and returns all collisions, ray width is optional. Intersection points are not provided.\n         * @method ray\n         * @param {body[]} bodies\n         * @param {vector} startPoint\n         * @param {vector} endPoint\n         * @param {number} [rayWidth]\n         * @return {object[]} Collisions\n         */\n\n\n        Query.ray = function (bodies, startPoint, endPoint, rayWidth) {\n          rayWidth = rayWidth || 1e-100;\n          var rayAngle = Vector.angle(startPoint, endPoint),\n              rayLength = Vector.magnitude(Vector.sub(startPoint, endPoint)),\n              rayX = (endPoint.x + startPoint.x) * 0.5,\n              rayY = (endPoint.y + startPoint.y) * 0.5,\n              ray = Bodies.rectangle(rayX, rayY, rayLength, rayWidth, {\n            angle: rayAngle\n          }),\n              collisions = Query.collides(ray, bodies);\n\n          for (var i = 0; i < collisions.length; i += 1) {\n            var collision = collisions[i];\n            collision.body = collision.bodyB = collision.bodyA;\n          }\n\n          return collisions;\n        };\n        /**\n         * Returns all bodies whose bounds are inside (or outside if set) the given set of bounds, from the given set of bodies.\n         * @method region\n         * @param {body[]} bodies\n         * @param {bounds} bounds\n         * @param {bool} [outside=false]\n         * @return {body[]} The bodies matching the query\n         */\n\n\n        Query.region = function (bodies, bounds, outside) {\n          var result = [];\n\n          for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i],\n                overlaps = Bounds.overlaps(body.bounds, bounds);\n            if (overlaps && !outside || !overlaps && outside) result.push(body);\n          }\n\n          return result;\n        };\n        /**\n         * Returns all bodies whose vertices contain the given point, from the given set of bodies.\n         * @method point\n         * @param {body[]} bodies\n         * @param {vector} point\n         * @return {body[]} The bodies matching the query\n         */\n\n\n        Query.point = function (bodies, point) {\n          var result = [];\n\n          for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i];\n\n            if (Bounds.contains(body.bounds, point)) {\n              for (var j = body.parts.length === 1 ? 0 : 1; j < body.parts.length; j++) {\n                var part = body.parts[j];\n\n                if (Bounds.contains(part.bounds, point) && Vertices.contains(part.vertices, point)) {\n                  result.push(body);\n                  break;\n                }\n              }\n            }\n          }\n\n          return result;\n        };\n      })();\n      /***/\n\n    },\n    /* 27 */\n\n    /***/\n    function (module, exports) {\n      if (typeof __WEBPACK_EXTERNAL_MODULE__27__ === 'undefined') {\n        var e = new Error(\"Cannot find module 'undefined'\");\n        e.code = 'MODULE_NOT_FOUND';\n        throw e;\n      }\n\n      module.exports = __WEBPACK_EXTERNAL_MODULE__27__;\n      /***/\n    },\n    /* 28 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      /**\n      * The `Matter.MouseConstraint` module contains methods for creating mouse constraints.\n      * Mouse constraints are used for allowing user interaction, providing the ability to move bodies via the mouse or touch.\n      *\n      * See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n      *\n      * @class MouseConstraint\n      */\n      var MouseConstraint = {};\n      module.exports = MouseConstraint;\n\n      var Vertices = __webpack_require__(3);\n\n      var Sleeping = __webpack_require__(7);\n\n      var Mouse = __webpack_require__(14);\n\n      var Events = __webpack_require__(4);\n\n      var Detector = __webpack_require__(12);\n\n      var Constraint = __webpack_require__(8);\n\n      var Composite = __webpack_require__(5);\n\n      var Common = __webpack_require__(0);\n\n      var Bounds = __webpack_require__(1);\n\n      (function () {\n        /**\n         * Creates a new mouse constraint.\n         * All properties have default values, and many are pre-calculated automatically based on other properties.\n         * See the properties section below for detailed information on what you can pass via the `options` object.\n         * @method create\n         * @param {engine} engine\n         * @param {} options\n         * @return {MouseConstraint} A new MouseConstraint\n         */\n        MouseConstraint.create = function (engine, options) {\n          var mouse = (engine ? engine.mouse : null) || (options ? options.mouse : null);\n\n          if (!mouse) {\n            if (engine && engine.render && engine.render.canvas) {\n              mouse = Mouse.create(engine.render.canvas);\n            } else if (options && options.element) {\n              mouse = Mouse.create(options.element);\n            } else {\n              mouse = Mouse.create();\n              Common.warn('MouseConstraint.create: options.mouse was undefined, options.element was undefined, may not function as expected');\n            }\n          }\n\n          var constraint = Constraint.create({\n            label: 'Mouse Constraint',\n            pointA: mouse.position,\n            pointB: {\n              x: 0,\n              y: 0\n            },\n            length: 0.01,\n            stiffness: 0.1,\n            angularStiffness: 1,\n            render: {\n              strokeStyle: '#90EE90',\n              lineWidth: 3\n            }\n          });\n          var defaults = {\n            type: 'mouseConstraint',\n            mouse: mouse,\n            element: null,\n            body: null,\n            constraint: constraint,\n            collisionFilter: {\n              category: 0x0001,\n              mask: 0xFFFFFFFF,\n              group: 0\n            }\n          };\n          var mouseConstraint = Common.extend(defaults, options);\n          Events.on(engine, 'beforeUpdate', function () {\n            var allBodies = Composite.allBodies(engine.world);\n            MouseConstraint.update(mouseConstraint, allBodies);\n\n            MouseConstraint._triggerEvents(mouseConstraint);\n          });\n          return mouseConstraint;\n        };\n        /**\n         * Updates the given mouse constraint.\n         * @private\n         * @method update\n         * @param {MouseConstraint} mouseConstraint\n         * @param {body[]} bodies\n         */\n\n\n        MouseConstraint.update = function (mouseConstraint, bodies) {\n          var mouse = mouseConstraint.mouse,\n              constraint = mouseConstraint.constraint,\n              body = mouseConstraint.body;\n\n          if (mouse.button === 0) {\n            if (!constraint.bodyB) {\n              for (var i = 0; i < bodies.length; i++) {\n                body = bodies[i];\n\n                if (Bounds.contains(body.bounds, mouse.position) && Detector.canCollide(body.collisionFilter, mouseConstraint.collisionFilter)) {\n                  for (var j = body.parts.length > 1 ? 1 : 0; j < body.parts.length; j++) {\n                    var part = body.parts[j];\n\n                    if (Vertices.contains(part.vertices, mouse.position)) {\n                      constraint.pointA = mouse.position;\n                      constraint.bodyB = mouseConstraint.body = body;\n                      constraint.pointB = {\n                        x: mouse.position.x - body.position.x,\n                        y: mouse.position.y - body.position.y\n                      };\n                      constraint.angleB = body.angle;\n                      Sleeping.set(body, false);\n                      Events.trigger(mouseConstraint, 'startdrag', {\n                        mouse: mouse,\n                        body: body\n                      });\n                      break;\n                    }\n                  }\n                }\n              }\n            } else {\n              Sleeping.set(constraint.bodyB, false);\n              constraint.pointA = mouse.position;\n            }\n          } else {\n            constraint.bodyB = mouseConstraint.body = null;\n            constraint.pointB = null;\n            if (body) Events.trigger(mouseConstraint, 'enddrag', {\n              mouse: mouse,\n              body: body\n            });\n          }\n        };\n        /**\n         * Triggers mouse constraint events.\n         * @method _triggerEvents\n         * @private\n         * @param {mouse} mouseConstraint\n         */\n\n\n        MouseConstraint._triggerEvents = function (mouseConstraint) {\n          var mouse = mouseConstraint.mouse,\n              mouseEvents = mouse.sourceEvents;\n          if (mouseEvents.mousemove) Events.trigger(mouseConstraint, 'mousemove', {\n            mouse: mouse\n          });\n          if (mouseEvents.mousedown) Events.trigger(mouseConstraint, 'mousedown', {\n            mouse: mouse\n          });\n          if (mouseEvents.mouseup) Events.trigger(mouseConstraint, 'mouseup', {\n            mouse: mouse\n          }); // reset the mouse state ready for the next step\n\n          Mouse.clearSourceEvents(mouse);\n        };\n        /*\n        *\n        *  Events Documentation\n        *\n        */\n\n        /**\n        * Fired when the mouse has moved (or a touch moves) during the last step\n        *\n        * @event mousemove\n        * @param {} event An event object\n        * @param {mouse} event.mouse The engine's mouse instance\n        * @param {} event.source The source object of the event\n        * @param {} event.name The name of the event\n        */\n\n        /**\n        * Fired when the mouse is down (or a touch has started) during the last step\n        *\n        * @event mousedown\n        * @param {} event An event object\n        * @param {mouse} event.mouse The engine's mouse instance\n        * @param {} event.source The source object of the event\n        * @param {} event.name The name of the event\n        */\n\n        /**\n        * Fired when the mouse is up (or a touch has ended) during the last step\n        *\n        * @event mouseup\n        * @param {} event An event object\n        * @param {mouse} event.mouse The engine's mouse instance\n        * @param {} event.source The source object of the event\n        * @param {} event.name The name of the event\n        */\n\n        /**\n        * Fired when the user starts dragging a body\n        *\n        * @event startdrag\n        * @param {} event An event object\n        * @param {mouse} event.mouse The engine's mouse instance\n        * @param {body} event.body The body being dragged\n        * @param {} event.source The source object of the event\n        * @param {} event.name The name of the event\n        */\n\n        /**\n        * Fired when the user ends dragging a body\n        *\n        * @event enddrag\n        * @param {} event An event object\n        * @param {mouse} event.mouse The engine's mouse instance\n        * @param {body} event.body The body that has stopped being dragged\n        * @param {} event.source The source object of the event\n        * @param {} event.name The name of the event\n        */\n\n        /*\n        *\n        *  Properties Documentation\n        *\n        */\n\n        /**\n         * A `String` denoting the type of object.\n         *\n         * @property type\n         * @type string\n         * @default \"constraint\"\n         * @readOnly\n         */\n\n        /**\n         * The `Mouse` instance in use. If not supplied in `MouseConstraint.create`, one will be created.\n         *\n         * @property mouse\n         * @type mouse\n         * @default mouse\n         */\n\n        /**\n         * The `Body` that is currently being moved by the user, or `null` if no body.\n         *\n         * @property body\n         * @type body\n         * @default null\n         */\n\n        /**\n         * The `Constraint` object that is used to move the body during interaction.\n         *\n         * @property constraint\n         * @type constraint\n         */\n\n        /**\n         * An `Object` that specifies the collision filter properties.\n         * The collision filter allows the user to define which types of body this mouse constraint can interact with.\n         * See `body.collisionFilter` for more information.\n         *\n         * @property collisionFilter\n         * @type object\n         */\n\n      })();\n      /***/\n\n    },\n    /* 29 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      /**\n      * The `Matter.Runner` module is an optional utility which provides a game loop, \n      * that handles continuously updating a `Matter.Engine` for you within a browser.\n      * It is intended for development and debugging purposes, but may also be suitable for simple games.\n      * If you are using your own game loop instead, then you do not need the `Matter.Runner` module.\n      * Instead just call `Engine.update(engine, delta)` in your own loop.\n      *\n      * See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n      *\n      * @class Runner\n      */\n      var Runner = {};\n      module.exports = Runner;\n\n      var Events = __webpack_require__(4);\n\n      var Engine = __webpack_require__(22);\n\n      var Common = __webpack_require__(0);\n\n      (function () {\n        var _requestAnimationFrame, _cancelAnimationFrame;\n\n        if (typeof window !== 'undefined') {\n          _requestAnimationFrame = window.requestAnimationFrame || window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame || window.msRequestAnimationFrame;\n          _cancelAnimationFrame = window.cancelAnimationFrame || window.mozCancelAnimationFrame || window.webkitCancelAnimationFrame || window.msCancelAnimationFrame;\n        }\n\n        if (!_requestAnimationFrame) {\n          var _frameTimeout;\n\n          _requestAnimationFrame = function _requestAnimationFrame(callback) {\n            _frameTimeout = setTimeout(function () {\n              callback(Common.now());\n            }, 1000 / 60);\n          };\n\n          _cancelAnimationFrame = function _cancelAnimationFrame() {\n            clearTimeout(_frameTimeout);\n          };\n        }\n        /**\n         * Creates a new Runner. The options parameter is an object that specifies any properties you wish to override the defaults.\n         * @method create\n         * @param {} options\n         */\n\n\n        Runner.create = function (options) {\n          var defaults = {\n            fps: 60,\n            correction: 1,\n            deltaSampleSize: 60,\n            counterTimestamp: 0,\n            frameCounter: 0,\n            deltaHistory: [],\n            timePrev: null,\n            timeScalePrev: 1,\n            frameRequestId: null,\n            isFixed: false,\n            enabled: true\n          };\n          var runner = Common.extend(defaults, options);\n          runner.delta = runner.delta || 1000 / runner.fps;\n          runner.deltaMin = runner.deltaMin || 1000 / runner.fps;\n          runner.deltaMax = runner.deltaMax || 1000 / (runner.fps * 0.5);\n          runner.fps = 1000 / runner.delta;\n          return runner;\n        };\n        /**\n         * Continuously ticks a `Matter.Engine` by calling `Runner.tick` on the `requestAnimationFrame` event.\n         * @method run\n         * @param {engine} engine\n         */\n\n\n        Runner.run = function (runner, engine) {\n          // create runner if engine is first argument\n          if (typeof runner.positionIterations !== 'undefined') {\n            engine = runner;\n            runner = Runner.create();\n          }\n\n          (function render(time) {\n            runner.frameRequestId = _requestAnimationFrame(render);\n\n            if (time && runner.enabled) {\n              Runner.tick(runner, engine, time);\n            }\n          })();\n\n          return runner;\n        };\n        /**\n         * A game loop utility that updates the engine and renderer by one step (a 'tick').\n         * Features delta smoothing, time correction and fixed or dynamic timing.\n         * Triggers `beforeTick`, `tick` and `afterTick` events on the engine.\n         * Consider just `Engine.update(engine, delta)` if you're using your own loop.\n         * @method tick\n         * @param {runner} runner\n         * @param {engine} engine\n         * @param {number} time\n         */\n\n\n        Runner.tick = function (runner, engine, time) {\n          var timing = engine.timing,\n              correction = 1,\n              delta; // create an event object\n\n          var event = {\n            timestamp: timing.timestamp\n          };\n          Events.trigger(runner, 'beforeTick', event);\n          Events.trigger(engine, 'beforeTick', event); // back compatibility\n\n          if (runner.isFixed) {\n            // fixed timestep\n            delta = runner.delta;\n          } else {\n            // dynamic timestep based on wall clock between calls\n            delta = time - runner.timePrev || runner.delta;\n            runner.timePrev = time; // optimistically filter delta over a few frames, to improve stability\n\n            runner.deltaHistory.push(delta);\n            runner.deltaHistory = runner.deltaHistory.slice(-runner.deltaSampleSize);\n            delta = Math.min.apply(null, runner.deltaHistory); // limit delta\n\n            delta = delta < runner.deltaMin ? runner.deltaMin : delta;\n            delta = delta > runner.deltaMax ? runner.deltaMax : delta; // correction for delta\n\n            correction = delta / runner.delta; // update engine timing object\n\n            runner.delta = delta;\n          } // time correction for time scaling\n\n\n          if (runner.timeScalePrev !== 0) correction *= timing.timeScale / runner.timeScalePrev;\n          if (timing.timeScale === 0) correction = 0;\n          runner.timeScalePrev = timing.timeScale;\n          runner.correction = correction; // fps counter\n\n          runner.frameCounter += 1;\n\n          if (time - runner.counterTimestamp >= 1000) {\n            runner.fps = runner.frameCounter * ((time - runner.counterTimestamp) / 1000);\n            runner.counterTimestamp = time;\n            runner.frameCounter = 0;\n          }\n\n          Events.trigger(runner, 'tick', event);\n          Events.trigger(engine, 'tick', event); // back compatibility\n          // if world has been modified, clear the render scene graph\n\n          if (engine.world.isModified && engine.render && engine.render.controller && engine.render.controller.clear) {\n            engine.render.controller.clear(engine.render); // back compatibility\n          } // update\n\n\n          Events.trigger(runner, 'beforeUpdate', event);\n          Engine.update(engine, delta, correction);\n          Events.trigger(runner, 'afterUpdate', event); // render\n          // back compatibility\n\n          if (engine.render && engine.render.controller) {\n            Events.trigger(runner, 'beforeRender', event);\n            Events.trigger(engine, 'beforeRender', event); // back compatibility\n\n            engine.render.controller.world(engine.render);\n            Events.trigger(runner, 'afterRender', event);\n            Events.trigger(engine, 'afterRender', event); // back compatibility\n          }\n\n          Events.trigger(runner, 'afterTick', event);\n          Events.trigger(engine, 'afterTick', event); // back compatibility\n        };\n        /**\n         * Ends execution of `Runner.run` on the given `runner`, by canceling the animation frame request event loop.\n         * If you wish to only temporarily pause the engine, see `engine.enabled` instead.\n         * @method stop\n         * @param {runner} runner\n         */\n\n\n        Runner.stop = function (runner) {\n          _cancelAnimationFrame(runner.frameRequestId);\n        };\n        /**\n         * Alias for `Runner.run`.\n         * @method start\n         * @param {runner} runner\n         * @param {engine} engine\n         */\n\n\n        Runner.start = function (runner, engine) {\n          Runner.run(runner, engine);\n        };\n        /*\n        *\n        *  Events Documentation\n        *\n        */\n\n        /**\n        * Fired at the start of a tick, before any updates to the engine or timing\n        *\n        * @event beforeTick\n        * @param {} event An event object\n        * @param {number} event.timestamp The engine.timing.timestamp of the event\n        * @param {} event.source The source object of the event\n        * @param {} event.name The name of the event\n        */\n\n        /**\n        * Fired after engine timing updated, but just before update\n        *\n        * @event tick\n        * @param {} event An event object\n        * @param {number} event.timestamp The engine.timing.timestamp of the event\n        * @param {} event.source The source object of the event\n        * @param {} event.name The name of the event\n        */\n\n        /**\n        * Fired at the end of a tick, after engine update and after rendering\n        *\n        * @event afterTick\n        * @param {} event An event object\n        * @param {number} event.timestamp The engine.timing.timestamp of the event\n        * @param {} event.source The source object of the event\n        * @param {} event.name The name of the event\n        */\n\n        /**\n        * Fired before update\n        *\n        * @event beforeUpdate\n        * @param {} event An event object\n        * @param {number} event.timestamp The engine.timing.timestamp of the event\n        * @param {} event.source The source object of the event\n        * @param {} event.name The name of the event\n        */\n\n        /**\n        * Fired after update\n        *\n        * @event afterUpdate\n        * @param {} event An event object\n        * @param {number} event.timestamp The engine.timing.timestamp of the event\n        * @param {} event.source The source object of the event\n        * @param {} event.name The name of the event\n        */\n\n        /**\n        * Fired before rendering\n        *\n        * @event beforeRender\n        * @param {} event An event object\n        * @param {number} event.timestamp The engine.timing.timestamp of the event\n        * @param {} event.source The source object of the event\n        * @param {} event.name The name of the event\n        * @deprecated\n        */\n\n        /**\n        * Fired after rendering\n        *\n        * @event afterRender\n        * @param {} event An event object\n        * @param {number} event.timestamp The engine.timing.timestamp of the event\n        * @param {} event.source The source object of the event\n        * @param {} event.name The name of the event\n        * @deprecated\n        */\n\n        /*\n        *\n        *  Properties Documentation\n        *\n        */\n\n        /**\n         * A flag that specifies whether the runner is running or not.\n         *\n         * @property enabled\n         * @type boolean\n         * @default true\n         */\n\n        /**\n         * A `Boolean` that specifies if the runner should use a fixed timestep (otherwise it is variable).\n         * If timing is fixed, then the apparent simulation speed will change depending on the frame rate (but behaviour will be deterministic).\n         * If the timing is variable, then the apparent simulation speed will be constant (approximately, but at the cost of determininism).\n         *\n         * @property isFixed\n         * @type boolean\n         * @default false\n         */\n\n        /**\n         * A `Number` that specifies the time step between updates in milliseconds.\n         * If `engine.timing.isFixed` is set to `true`, then `delta` is fixed.\n         * If it is `false`, then `delta` can dynamically change to maintain the correct apparent simulation speed.\n         *\n         * @property delta\n         * @type number\n         * @default 1000 / 60\n         */\n\n      })();\n      /***/\n\n    },\n    /* 30 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      /**\n      * The `Matter.Composites` module contains factory methods for creating composite bodies\n      * with commonly used configurations (such as stacks and chains).\n      *\n      * See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n      *\n      * @class Composites\n      */\n      var Composites = {};\n      module.exports = Composites;\n\n      var Composite = __webpack_require__(5);\n\n      var Constraint = __webpack_require__(8);\n\n      var Common = __webpack_require__(0);\n\n      var Body = __webpack_require__(6);\n\n      var Bodies = __webpack_require__(16);\n\n      (function () {\n        /**\n         * Create a new composite containing bodies created in the callback in a grid arrangement.\n         * This function uses the body's bounds to prevent overlaps.\n         * @method stack\n         * @param {number} xx\n         * @param {number} yy\n         * @param {number} columns\n         * @param {number} rows\n         * @param {number} columnGap\n         * @param {number} rowGap\n         * @param {function} callback\n         * @return {composite} A new composite containing objects created in the callback\n         */\n        Composites.stack = function (xx, yy, columns, rows, columnGap, rowGap, callback) {\n          var stack = Composite.create({\n            label: 'Stack'\n          }),\n              x = xx,\n              y = yy,\n              lastBody,\n              i = 0;\n\n          for (var row = 0; row < rows; row++) {\n            var maxHeight = 0;\n\n            for (var column = 0; column < columns; column++) {\n              var body = callback(x, y, column, row, lastBody, i);\n\n              if (body) {\n                var bodyHeight = body.bounds.max.y - body.bounds.min.y,\n                    bodyWidth = body.bounds.max.x - body.bounds.min.x;\n                if (bodyHeight > maxHeight) maxHeight = bodyHeight;\n                Body.translate(body, {\n                  x: bodyWidth * 0.5,\n                  y: bodyHeight * 0.5\n                });\n                x = body.bounds.max.x + columnGap;\n                Composite.addBody(stack, body);\n                lastBody = body;\n                i += 1;\n              } else {\n                x += columnGap;\n              }\n            }\n\n            y += maxHeight + rowGap;\n            x = xx;\n          }\n\n          return stack;\n        };\n        /**\n         * Chains all bodies in the given composite together using constraints.\n         * @method chain\n         * @param {composite} composite\n         * @param {number} xOffsetA\n         * @param {number} yOffsetA\n         * @param {number} xOffsetB\n         * @param {number} yOffsetB\n         * @param {object} options\n         * @return {composite} A new composite containing objects chained together with constraints\n         */\n\n\n        Composites.chain = function (composite, xOffsetA, yOffsetA, xOffsetB, yOffsetB, options) {\n          var bodies = composite.bodies;\n\n          for (var i = 1; i < bodies.length; i++) {\n            var bodyA = bodies[i - 1],\n                bodyB = bodies[i],\n                bodyAHeight = bodyA.bounds.max.y - bodyA.bounds.min.y,\n                bodyAWidth = bodyA.bounds.max.x - bodyA.bounds.min.x,\n                bodyBHeight = bodyB.bounds.max.y - bodyB.bounds.min.y,\n                bodyBWidth = bodyB.bounds.max.x - bodyB.bounds.min.x;\n            var defaults = {\n              bodyA: bodyA,\n              pointA: {\n                x: bodyAWidth * xOffsetA,\n                y: bodyAHeight * yOffsetA\n              },\n              bodyB: bodyB,\n              pointB: {\n                x: bodyBWidth * xOffsetB,\n                y: bodyBHeight * yOffsetB\n              }\n            };\n            var constraint = Common.extend(defaults, options);\n            Composite.addConstraint(composite, Constraint.create(constraint));\n          }\n\n          composite.label += ' Chain';\n          return composite;\n        };\n        /**\n         * Connects bodies in the composite with constraints in a grid pattern, with optional cross braces.\n         * @method mesh\n         * @param {composite} composite\n         * @param {number} columns\n         * @param {number} rows\n         * @param {boolean} crossBrace\n         * @param {object} options\n         * @return {composite} The composite containing objects meshed together with constraints\n         */\n\n\n        Composites.mesh = function (composite, columns, rows, crossBrace, options) {\n          var bodies = composite.bodies,\n              row,\n              col,\n              bodyA,\n              bodyB,\n              bodyC;\n\n          for (row = 0; row < rows; row++) {\n            for (col = 1; col < columns; col++) {\n              bodyA = bodies[col - 1 + row * columns];\n              bodyB = bodies[col + row * columns];\n              Composite.addConstraint(composite, Constraint.create(Common.extend({\n                bodyA: bodyA,\n                bodyB: bodyB\n              }, options)));\n            }\n\n            if (row > 0) {\n              for (col = 0; col < columns; col++) {\n                bodyA = bodies[col + (row - 1) * columns];\n                bodyB = bodies[col + row * columns];\n                Composite.addConstraint(composite, Constraint.create(Common.extend({\n                  bodyA: bodyA,\n                  bodyB: bodyB\n                }, options)));\n\n                if (crossBrace && col > 0) {\n                  bodyC = bodies[col - 1 + (row - 1) * columns];\n                  Composite.addConstraint(composite, Constraint.create(Common.extend({\n                    bodyA: bodyC,\n                    bodyB: bodyB\n                  }, options)));\n                }\n\n                if (crossBrace && col < columns - 1) {\n                  bodyC = bodies[col + 1 + (row - 1) * columns];\n                  Composite.addConstraint(composite, Constraint.create(Common.extend({\n                    bodyA: bodyC,\n                    bodyB: bodyB\n                  }, options)));\n                }\n              }\n            }\n          }\n\n          composite.label += ' Mesh';\n          return composite;\n        };\n        /**\n         * Create a new composite containing bodies created in the callback in a pyramid arrangement.\n         * This function uses the body's bounds to prevent overlaps.\n         * @method pyramid\n         * @param {number} xx\n         * @param {number} yy\n         * @param {number} columns\n         * @param {number} rows\n         * @param {number} columnGap\n         * @param {number} rowGap\n         * @param {function} callback\n         * @return {composite} A new composite containing objects created in the callback\n         */\n\n\n        Composites.pyramid = function (xx, yy, columns, rows, columnGap, rowGap, callback) {\n          return Composites.stack(xx, yy, columns, rows, columnGap, rowGap, function (x, y, column, row, lastBody, i) {\n            var actualRows = Math.min(rows, Math.ceil(columns / 2)),\n                lastBodyWidth = lastBody ? lastBody.bounds.max.x - lastBody.bounds.min.x : 0;\n            if (row > actualRows) return; // reverse row order\n\n            row = actualRows - row;\n            var start = row,\n                end = columns - 1 - row;\n            if (column < start || column > end) return; // retroactively fix the first body's position, since width was unknown\n\n            if (i === 1) {\n              Body.translate(lastBody, {\n                x: (column + (columns % 2 === 1 ? 1 : -1)) * lastBodyWidth,\n                y: 0\n              });\n            }\n\n            var xOffset = lastBody ? column * lastBodyWidth : 0;\n            return callback(xx + xOffset + column * columnGap, y, column, row, lastBody, i);\n          });\n        };\n        /**\n         * Creates a composite with a Newton's Cradle setup of bodies and constraints.\n         * @method newtonsCradle\n         * @param {number} xx\n         * @param {number} yy\n         * @param {number} number\n         * @param {number} size\n         * @param {number} length\n         * @return {composite} A new composite newtonsCradle body\n         */\n\n\n        Composites.newtonsCradle = function (xx, yy, number, size, length) {\n          var newtonsCradle = Composite.create({\n            label: 'Newtons Cradle'\n          });\n\n          for (var i = 0; i < number; i++) {\n            var separation = 1.9,\n                circle = Bodies.circle(xx + i * (size * separation), yy + length, size, {\n              inertia: Infinity,\n              restitution: 1,\n              friction: 0,\n              frictionAir: 0.0001,\n              slop: 1\n            }),\n                constraint = Constraint.create({\n              pointA: {\n                x: xx + i * (size * separation),\n                y: yy\n              },\n              bodyB: circle\n            });\n            Composite.addBody(newtonsCradle, circle);\n            Composite.addConstraint(newtonsCradle, constraint);\n          }\n\n          return newtonsCradle;\n        };\n        /**\n         * Creates a composite with simple car setup of bodies and constraints.\n         * @method car\n         * @param {number} xx\n         * @param {number} yy\n         * @param {number} width\n         * @param {number} height\n         * @param {number} wheelSize\n         * @return {composite} A new composite car body\n         */\n\n\n        Composites.car = function (xx, yy, width, height, wheelSize) {\n          var group = Body.nextGroup(true),\n              wheelBase = 20,\n              wheelAOffset = -width * 0.5 + wheelBase,\n              wheelBOffset = width * 0.5 - wheelBase,\n              wheelYOffset = 0;\n          var car = Composite.create({\n            label: 'Car'\n          }),\n              body = Bodies.rectangle(xx, yy, width, height, {\n            collisionFilter: {\n              group: group\n            },\n            chamfer: {\n              radius: height * 0.5\n            },\n            density: 0.0002\n          });\n          var wheelA = Bodies.circle(xx + wheelAOffset, yy + wheelYOffset, wheelSize, {\n            collisionFilter: {\n              group: group\n            },\n            friction: 0.8\n          });\n          var wheelB = Bodies.circle(xx + wheelBOffset, yy + wheelYOffset, wheelSize, {\n            collisionFilter: {\n              group: group\n            },\n            friction: 0.8\n          });\n          var axelA = Constraint.create({\n            bodyB: body,\n            pointB: {\n              x: wheelAOffset,\n              y: wheelYOffset\n            },\n            bodyA: wheelA,\n            stiffness: 1,\n            length: 0\n          });\n          var axelB = Constraint.create({\n            bodyB: body,\n            pointB: {\n              x: wheelBOffset,\n              y: wheelYOffset\n            },\n            bodyA: wheelB,\n            stiffness: 1,\n            length: 0\n          });\n          Composite.addBody(car, body);\n          Composite.addBody(car, wheelA);\n          Composite.addBody(car, wheelB);\n          Composite.addConstraint(car, axelA);\n          Composite.addConstraint(car, axelB);\n          return car;\n        };\n        /**\n         * Creates a simple soft body like object.\n         * @method softBody\n         * @param {number} xx\n         * @param {number} yy\n         * @param {number} columns\n         * @param {number} rows\n         * @param {number} columnGap\n         * @param {number} rowGap\n         * @param {boolean} crossBrace\n         * @param {number} particleRadius\n         * @param {} particleOptions\n         * @param {} constraintOptions\n         * @return {composite} A new composite softBody\n         */\n\n\n        Composites.softBody = function (xx, yy, columns, rows, columnGap, rowGap, crossBrace, particleRadius, particleOptions, constraintOptions) {\n          particleOptions = Common.extend({\n            inertia: Infinity\n          }, particleOptions);\n          constraintOptions = Common.extend({\n            stiffness: 0.2,\n            render: {\n              type: 'line',\n              anchors: false\n            }\n          }, constraintOptions);\n          var softBody = Composites.stack(xx, yy, columns, rows, columnGap, rowGap, function (x, y) {\n            return Bodies.circle(x, y, particleRadius, particleOptions);\n          });\n          Composites.mesh(softBody, columns, rows, crossBrace, constraintOptions);\n          softBody.label = 'Soft Body';\n          return softBody;\n        };\n      })();\n      /***/\n\n    },\n    /* 31 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      /**\n      * The `Matter.Svg` module contains methods for converting SVG images into an array of vector points.\n      *\n      * To use this module you also need the SVGPathSeg polyfill: https://github.com/progers/pathseg\n      *\n      * See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n      *\n      * @class Svg\n      */\n      var Svg = {};\n      module.exports = Svg;\n\n      var Bounds = __webpack_require__(1);\n\n      var Common = __webpack_require__(0);\n\n      (function () {\n        /**\n         * Converts an SVG path into an array of vector points.\n         * If the input path forms a concave shape, you must decompose the result into convex parts before use.\n         * See `Bodies.fromVertices` which provides support for this.\n         * Note that this function is not guaranteed to support complex paths (such as those with holes).\n         * You must load the `pathseg.js` polyfill on newer browsers.\n         * @method pathToVertices\n         * @param {SVGPathElement} path\n         * @param {Number} [sampleLength=15]\n         * @return {Vector[]} points\n         */\n        Svg.pathToVertices = function (path, sampleLength) {\n          if (typeof window !== 'undefined' && !('SVGPathSeg' in window)) {\n            Common.warn('Svg.pathToVertices: SVGPathSeg not defined, a polyfill is required.');\n          } // https://github.com/wout/svg.topoly.js/blob/master/svg.topoly.js\n\n\n          var i,\n              il,\n              total,\n              point,\n              segment,\n              segments,\n              segmentsQueue,\n              lastSegment,\n              lastPoint,\n              segmentIndex,\n              points = [],\n              lx,\n              ly,\n              length = 0,\n              x = 0,\n              y = 0;\n          sampleLength = sampleLength || 15;\n\n          var addPoint = function addPoint(px, py, pathSegType) {\n            // all odd-numbered path types are relative except PATHSEG_CLOSEPATH (1)\n            var isRelative = pathSegType % 2 === 1 && pathSegType > 1; // when the last point doesn't equal the current point add the current point\n\n            if (!lastPoint || px != lastPoint.x || py != lastPoint.y) {\n              if (lastPoint && isRelative) {\n                lx = lastPoint.x;\n                ly = lastPoint.y;\n              } else {\n                lx = 0;\n                ly = 0;\n              }\n\n              var point = {\n                x: lx + px,\n                y: ly + py\n              }; // set last point\n\n              if (isRelative || !lastPoint) {\n                lastPoint = point;\n              }\n\n              points.push(point);\n              x = lx + px;\n              y = ly + py;\n            }\n          };\n\n          var addSegmentPoint = function addSegmentPoint(segment) {\n            var segType = segment.pathSegTypeAsLetter.toUpperCase(); // skip path ends\n\n            if (segType === 'Z') return; // map segment to x and y\n\n            switch (segType) {\n              case 'M':\n              case 'L':\n              case 'T':\n              case 'C':\n              case 'S':\n              case 'Q':\n                x = segment.x;\n                y = segment.y;\n                break;\n\n              case 'H':\n                x = segment.x;\n                break;\n\n              case 'V':\n                y = segment.y;\n                break;\n            }\n\n            addPoint(x, y, segment.pathSegType);\n          }; // ensure path is absolute\n\n\n          Svg._svgPathToAbsolute(path); // get total length\n\n\n          total = path.getTotalLength(); // queue segments\n\n          segments = [];\n\n          for (i = 0; i < path.pathSegList.numberOfItems; i += 1) {\n            segments.push(path.pathSegList.getItem(i));\n          }\n\n          segmentsQueue = segments.concat(); // sample through path\n\n          while (length < total) {\n            // get segment at position\n            segmentIndex = path.getPathSegAtLength(length);\n            segment = segments[segmentIndex]; // new segment\n\n            if (segment != lastSegment) {\n              while (segmentsQueue.length && segmentsQueue[0] != segment) {\n                addSegmentPoint(segmentsQueue.shift());\n              }\n\n              lastSegment = segment;\n            } // add points in between when curving\n            // TODO: adaptive sampling\n\n\n            switch (segment.pathSegTypeAsLetter.toUpperCase()) {\n              case 'C':\n              case 'T':\n              case 'S':\n              case 'Q':\n              case 'A':\n                point = path.getPointAtLength(length);\n                addPoint(point.x, point.y, 0);\n                break;\n            } // increment by sample value\n\n\n            length += sampleLength;\n          } // add remaining segments not passed by sampling\n\n\n          for (i = 0, il = segmentsQueue.length; i < il; ++i) {\n            addSegmentPoint(segmentsQueue[i]);\n          }\n\n          return points;\n        };\n\n        Svg._svgPathToAbsolute = function (path) {\n          // http://phrogz.net/convert-svg-path-to-all-absolute-commands\n          // Copyright (c) Gavin Kistner\n          // http://phrogz.net/js/_ReuseLicense.txt\n          // Modifications: tidy formatting and naming\n          var x0,\n              y0,\n              x1,\n              y1,\n              x2,\n              y2,\n              segs = path.pathSegList,\n              x = 0,\n              y = 0,\n              len = segs.numberOfItems;\n\n          for (var i = 0; i < len; ++i) {\n            var seg = segs.getItem(i),\n                segType = seg.pathSegTypeAsLetter;\n\n            if (/[MLHVCSQTA]/.test(segType)) {\n              if ('x' in seg) x = seg.x;\n              if ('y' in seg) y = seg.y;\n            } else {\n              if ('x1' in seg) x1 = x + seg.x1;\n              if ('x2' in seg) x2 = x + seg.x2;\n              if ('y1' in seg) y1 = y + seg.y1;\n              if ('y2' in seg) y2 = y + seg.y2;\n              if ('x' in seg) x += seg.x;\n              if ('y' in seg) y += seg.y;\n\n              switch (segType) {\n                case 'm':\n                  segs.replaceItem(path.createSVGPathSegMovetoAbs(x, y), i);\n                  break;\n\n                case 'l':\n                  segs.replaceItem(path.createSVGPathSegLinetoAbs(x, y), i);\n                  break;\n\n                case 'h':\n                  segs.replaceItem(path.createSVGPathSegLinetoHorizontalAbs(x), i);\n                  break;\n\n                case 'v':\n                  segs.replaceItem(path.createSVGPathSegLinetoVerticalAbs(y), i);\n                  break;\n\n                case 'c':\n                  segs.replaceItem(path.createSVGPathSegCurvetoCubicAbs(x, y, x1, y1, x2, y2), i);\n                  break;\n\n                case 's':\n                  segs.replaceItem(path.createSVGPathSegCurvetoCubicSmoothAbs(x, y, x2, y2), i);\n                  break;\n\n                case 'q':\n                  segs.replaceItem(path.createSVGPathSegCurvetoQuadraticAbs(x, y, x1, y1), i);\n                  break;\n\n                case 't':\n                  segs.replaceItem(path.createSVGPathSegCurvetoQuadraticSmoothAbs(x, y), i);\n                  break;\n\n                case 'a':\n                  segs.replaceItem(path.createSVGPathSegArcAbs(x, y, seg.r1, seg.r2, seg.angle, seg.largeArcFlag, seg.sweepFlag), i);\n                  break;\n\n                case 'z':\n                case 'Z':\n                  x = x0;\n                  y = y0;\n                  break;\n              }\n            }\n\n            if (segType == 'M' || segType == 'm') {\n              x0 = x;\n              y0 = y;\n            }\n          }\n        };\n      })();\n      /***/\n\n    },\n    /* 32 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      /**\n      * The `Matter.RenderPixi` module is an example renderer using pixi.js.\n      * See also `Matter.Render` for a canvas based renderer.\n      *\n      * @class RenderPixi\n      * @deprecated the Matter.RenderPixi module will soon be removed from the Matter.js core.\n      * It will likely be moved to its own repository (but maintenance will be limited).\n      */\n      var RenderPixi = {};\n      module.exports = RenderPixi;\n\n      var Bounds = __webpack_require__(1);\n\n      var Composite = __webpack_require__(5);\n\n      var Common = __webpack_require__(0);\n\n      var Events = __webpack_require__(4);\n\n      var Vector = __webpack_require__(2);\n\n      (function () {\n        var _requestAnimationFrame, _cancelAnimationFrame;\n\n        if (typeof window !== 'undefined') {\n          _requestAnimationFrame = window.requestAnimationFrame || window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame || window.msRequestAnimationFrame || function (callback) {\n            window.setTimeout(function () {\n              callback(Common.now());\n            }, 1000 / 60);\n          };\n\n          _cancelAnimationFrame = window.cancelAnimationFrame || window.mozCancelAnimationFrame || window.webkitCancelAnimationFrame || window.msCancelAnimationFrame;\n        }\n        /**\n         * Creates a new Pixi.js WebGL renderer\n         * @method create\n         * @param {object} options\n         * @return {RenderPixi} A new renderer\n         * @deprecated\n         */\n\n\n        RenderPixi.create = function (options) {\n          Common.warn('RenderPixi.create: Matter.RenderPixi is deprecated (see docs)');\n          var defaults = {\n            controller: RenderPixi,\n            engine: null,\n            element: null,\n            frameRequestId: null,\n            canvas: null,\n            renderer: null,\n            container: null,\n            spriteContainer: null,\n            pixiOptions: null,\n            options: {\n              width: 800,\n              height: 600,\n              background: '#fafafa',\n              wireframeBackground: '#222',\n              hasBounds: false,\n              enabled: true,\n              wireframes: true,\n              showSleeping: true,\n              showDebug: false,\n              showBroadphase: false,\n              showBounds: false,\n              showVelocity: false,\n              showCollisions: false,\n              showAxes: false,\n              showPositions: false,\n              showAngleIndicator: false,\n              showIds: false,\n              showShadows: false\n            }\n          };\n          var render = Common.extend(defaults, options),\n              transparent = !render.options.wireframes && render.options.background === 'transparent'; // init pixi\n\n          render.pixiOptions = render.pixiOptions || {\n            view: render.canvas,\n            transparent: transparent,\n            antialias: true,\n            backgroundColor: options.background\n          };\n          render.mouse = options.mouse;\n          render.engine = options.engine;\n          render.renderer = render.renderer || new PIXI.WebGLRenderer(render.options.width, render.options.height, render.pixiOptions);\n          render.container = render.container || new PIXI.Container();\n          render.spriteContainer = render.spriteContainer || new PIXI.Container();\n          render.canvas = render.canvas || render.renderer.view;\n          render.bounds = render.bounds || {\n            min: {\n              x: 0,\n              y: 0\n            },\n            max: {\n              x: render.options.width,\n              y: render.options.height\n            }\n          }; // event listeners\n\n          Events.on(render.engine, 'beforeUpdate', function () {\n            RenderPixi.clear(render);\n          }); // caches\n\n          render.textures = {};\n          render.sprites = {};\n          render.primitives = {}; // use a sprite batch for performance\n\n          render.container.addChild(render.spriteContainer); // insert canvas\n\n          if (Common.isElement(render.element)) {\n            render.element.appendChild(render.canvas);\n          } else {\n            Common.warn('No \"render.element\" passed, \"render.canvas\" was not inserted into document.');\n          } // prevent menus on canvas\n\n\n          render.canvas.oncontextmenu = function () {\n            return false;\n          };\n\n          render.canvas.onselectstart = function () {\n            return false;\n          };\n\n          return render;\n        };\n        /**\n         * Continuously updates the render canvas on the `requestAnimationFrame` event.\n         * @method run\n         * @param {render} render\n         * @deprecated\n         */\n\n\n        RenderPixi.run = function (render) {\n          (function loop(time) {\n            render.frameRequestId = _requestAnimationFrame(loop);\n            RenderPixi.world(render);\n          })();\n        };\n        /**\n         * Ends execution of `Render.run` on the given `render`, by canceling the animation frame request event loop.\n         * @method stop\n         * @param {render} render\n         * @deprecated\n         */\n\n\n        RenderPixi.stop = function (render) {\n          _cancelAnimationFrame(render.frameRequestId);\n        };\n        /**\n         * Clears the scene graph\n         * @method clear\n         * @param {RenderPixi} render\n         * @deprecated\n         */\n\n\n        RenderPixi.clear = function (render) {\n          var container = render.container,\n              spriteContainer = render.spriteContainer; // clear stage container\n\n          while (container.children[0]) {\n            container.removeChild(container.children[0]);\n          } // clear sprite batch\n\n\n          while (spriteContainer.children[0]) {\n            spriteContainer.removeChild(spriteContainer.children[0]);\n          }\n\n          var bgSprite = render.sprites['bg-0']; // clear caches\n\n          render.textures = {};\n          render.sprites = {};\n          render.primitives = {}; // set background sprite\n\n          render.sprites['bg-0'] = bgSprite;\n          if (bgSprite) container.addChildAt(bgSprite, 0); // add sprite batch back into container\n\n          render.container.addChild(render.spriteContainer); // reset background state\n\n          render.currentBackground = null; // reset bounds transforms\n\n          container.scale.set(1, 1);\n          container.position.set(0, 0);\n        };\n        /**\n         * Sets the background of the canvas \n         * @method setBackground\n         * @param {RenderPixi} render\n         * @param {string} background\n         * @deprecated\n         */\n\n\n        RenderPixi.setBackground = function (render, background) {\n          if (render.currentBackground !== background) {\n            var isColor = background.indexOf && background.indexOf('#') !== -1,\n                bgSprite = render.sprites['bg-0'];\n\n            if (isColor) {\n              // if solid background color\n              var color = Common.colorToNumber(background);\n              render.renderer.backgroundColor = color; // remove background sprite if existing\n\n              if (bgSprite) render.container.removeChild(bgSprite);\n            } else {\n              // initialise background sprite if needed\n              if (!bgSprite) {\n                var texture = _getTexture(render, background);\n\n                bgSprite = render.sprites['bg-0'] = new PIXI.Sprite(texture);\n                bgSprite.position.x = 0;\n                bgSprite.position.y = 0;\n                render.container.addChildAt(bgSprite, 0);\n              }\n            }\n\n            render.currentBackground = background;\n          }\n        };\n        /**\n         * Description\n         * @method world\n         * @param {engine} engine\n         * @deprecated\n         */\n\n\n        RenderPixi.world = function (render) {\n          var engine = render.engine,\n              world = engine.world,\n              renderer = render.renderer,\n              container = render.container,\n              options = render.options,\n              bodies = Composite.allBodies(world),\n              allConstraints = Composite.allConstraints(world),\n              constraints = [],\n              i;\n\n          if (options.wireframes) {\n            RenderPixi.setBackground(render, options.wireframeBackground);\n          } else {\n            RenderPixi.setBackground(render, options.background);\n          } // handle bounds\n\n\n          var boundsWidth = render.bounds.max.x - render.bounds.min.x,\n              boundsHeight = render.bounds.max.y - render.bounds.min.y,\n              boundsScaleX = boundsWidth / render.options.width,\n              boundsScaleY = boundsHeight / render.options.height;\n\n          if (options.hasBounds) {\n            // Hide bodies that are not in view\n            for (i = 0; i < bodies.length; i++) {\n              var body = bodies[i];\n              body.render.sprite.visible = Bounds.overlaps(body.bounds, render.bounds);\n            } // filter out constraints that are not in view\n\n\n            for (i = 0; i < allConstraints.length; i++) {\n              var constraint = allConstraints[i],\n                  bodyA = constraint.bodyA,\n                  bodyB = constraint.bodyB,\n                  pointAWorld = constraint.pointA,\n                  pointBWorld = constraint.pointB;\n              if (bodyA) pointAWorld = Vector.add(bodyA.position, constraint.pointA);\n              if (bodyB) pointBWorld = Vector.add(bodyB.position, constraint.pointB);\n              if (!pointAWorld || !pointBWorld) continue;\n              if (Bounds.contains(render.bounds, pointAWorld) || Bounds.contains(render.bounds, pointBWorld)) constraints.push(constraint);\n            } // transform the view\n\n\n            container.scale.set(1 / boundsScaleX, 1 / boundsScaleY);\n            container.position.set(-render.bounds.min.x * (1 / boundsScaleX), -render.bounds.min.y * (1 / boundsScaleY));\n          } else {\n            constraints = allConstraints;\n          }\n\n          for (i = 0; i < bodies.length; i++) {\n            RenderPixi.body(render, bodies[i]);\n          }\n\n          for (i = 0; i < constraints.length; i++) {\n            RenderPixi.constraint(render, constraints[i]);\n          }\n\n          renderer.render(container);\n        };\n        /**\n         * Description\n         * @method constraint\n         * @param {engine} engine\n         * @param {constraint} constraint\n         * @deprecated\n         */\n\n\n        RenderPixi.constraint = function (render, constraint) {\n          var engine = render.engine,\n              bodyA = constraint.bodyA,\n              bodyB = constraint.bodyB,\n              pointA = constraint.pointA,\n              pointB = constraint.pointB,\n              container = render.container,\n              constraintRender = constraint.render,\n              primitiveId = 'c-' + constraint.id,\n              primitive = render.primitives[primitiveId]; // initialise constraint primitive if not existing\n\n          if (!primitive) primitive = render.primitives[primitiveId] = new PIXI.Graphics(); // don't render if constraint does not have two end points\n\n          if (!constraintRender.visible || !constraint.pointA || !constraint.pointB) {\n            primitive.clear();\n            return;\n          } // add to scene graph if not already there\n\n\n          if (Common.indexOf(container.children, primitive) === -1) container.addChild(primitive); // render the constraint on every update, since they can change dynamically\n\n          primitive.clear();\n          primitive.beginFill(0, 0);\n          primitive.lineStyle(constraintRender.lineWidth, Common.colorToNumber(constraintRender.strokeStyle), 1);\n\n          if (bodyA) {\n            primitive.moveTo(bodyA.position.x + pointA.x, bodyA.position.y + pointA.y);\n          } else {\n            primitive.moveTo(pointA.x, pointA.y);\n          }\n\n          if (bodyB) {\n            primitive.lineTo(bodyB.position.x + pointB.x, bodyB.position.y + pointB.y);\n          } else {\n            primitive.lineTo(pointB.x, pointB.y);\n          }\n\n          primitive.endFill();\n        };\n        /**\n         * Description\n         * @method body\n         * @param {engine} engine\n         * @param {body} body\n         * @deprecated\n         */\n\n\n        RenderPixi.body = function (render, body) {\n          var engine = render.engine,\n              bodyRender = body.render;\n          if (!bodyRender.visible) return;\n\n          if (bodyRender.sprite && bodyRender.sprite.texture) {\n            var spriteId = 'b-' + body.id,\n                sprite = render.sprites[spriteId],\n                spriteContainer = render.spriteContainer; // initialise body sprite if not existing\n\n            if (!sprite) sprite = render.sprites[spriteId] = _createBodySprite(render, body); // add to scene graph if not already there\n\n            if (Common.indexOf(spriteContainer.children, sprite) === -1) spriteContainer.addChild(sprite); // update body sprite\n\n            sprite.position.x = body.position.x;\n            sprite.position.y = body.position.y;\n            sprite.rotation = body.angle;\n            sprite.scale.x = bodyRender.sprite.xScale || 1;\n            sprite.scale.y = bodyRender.sprite.yScale || 1;\n          } else {\n            var primitiveId = 'b-' + body.id,\n                primitive = render.primitives[primitiveId],\n                container = render.container; // initialise body primitive if not existing\n\n            if (!primitive) {\n              primitive = render.primitives[primitiveId] = _createBodyPrimitive(render, body);\n              primitive.initialAngle = body.angle;\n            } // add to scene graph if not already there\n\n\n            if (Common.indexOf(container.children, primitive) === -1) container.addChild(primitive); // update body primitive\n\n            primitive.position.x = body.position.x;\n            primitive.position.y = body.position.y;\n            primitive.rotation = body.angle - primitive.initialAngle;\n          }\n        };\n        /**\n         * Creates a body sprite\n         * @method _createBodySprite\n         * @private\n         * @param {RenderPixi} render\n         * @param {body} body\n         * @return {PIXI.Sprite} sprite\n         * @deprecated\n         */\n\n\n        var _createBodySprite = function _createBodySprite(render, body) {\n          var bodyRender = body.render,\n              texturePath = bodyRender.sprite.texture,\n              texture = _getTexture(render, texturePath),\n              sprite = new PIXI.Sprite(texture);\n\n          sprite.anchor.x = body.render.sprite.xOffset;\n          sprite.anchor.y = body.render.sprite.yOffset;\n          return sprite;\n        };\n        /**\n         * Creates a body primitive\n         * @method _createBodyPrimitive\n         * @private\n         * @param {RenderPixi} render\n         * @param {body} body\n         * @return {PIXI.Graphics} graphics\n         * @deprecated\n         */\n\n\n        var _createBodyPrimitive = function _createBodyPrimitive(render, body) {\n          var bodyRender = body.render,\n              options = render.options,\n              primitive = new PIXI.Graphics(),\n              fillStyle = Common.colorToNumber(bodyRender.fillStyle),\n              strokeStyle = Common.colorToNumber(bodyRender.strokeStyle),\n              strokeStyleIndicator = Common.colorToNumber(bodyRender.strokeStyle),\n              strokeStyleWireframe = Common.colorToNumber('#bbb'),\n              strokeStyleWireframeIndicator = Common.colorToNumber('#CD5C5C'),\n              part;\n          primitive.clear(); // handle compound parts\n\n          for (var k = body.parts.length > 1 ? 1 : 0; k < body.parts.length; k++) {\n            part = body.parts[k];\n\n            if (!options.wireframes) {\n              primitive.beginFill(fillStyle, 1);\n              primitive.lineStyle(bodyRender.lineWidth, strokeStyle, 1);\n            } else {\n              primitive.beginFill(0, 0);\n              primitive.lineStyle(1, strokeStyleWireframe, 1);\n            }\n\n            primitive.moveTo(part.vertices[0].x - body.position.x, part.vertices[0].y - body.position.y);\n\n            for (var j = 1; j < part.vertices.length; j++) {\n              primitive.lineTo(part.vertices[j].x - body.position.x, part.vertices[j].y - body.position.y);\n            }\n\n            primitive.lineTo(part.vertices[0].x - body.position.x, part.vertices[0].y - body.position.y);\n            primitive.endFill(); // angle indicator\n\n            if (options.showAngleIndicator || options.showAxes) {\n              primitive.beginFill(0, 0);\n\n              if (options.wireframes) {\n                primitive.lineStyle(1, strokeStyleWireframeIndicator, 1);\n              } else {\n                primitive.lineStyle(1, strokeStyleIndicator);\n              }\n\n              primitive.moveTo(part.position.x - body.position.x, part.position.y - body.position.y);\n              primitive.lineTo((part.vertices[0].x + part.vertices[part.vertices.length - 1].x) / 2 - body.position.x, (part.vertices[0].y + part.vertices[part.vertices.length - 1].y) / 2 - body.position.y);\n              primitive.endFill();\n            }\n          }\n\n          return primitive;\n        };\n        /**\n         * Gets the requested texture (a PIXI.Texture) via its path\n         * @method _getTexture\n         * @private\n         * @param {RenderPixi} render\n         * @param {string} imagePath\n         * @return {PIXI.Texture} texture\n         * @deprecated\n         */\n\n\n        var _getTexture = function _getTexture(render, imagePath) {\n          var texture = render.textures[imagePath];\n          if (!texture) texture = render.textures[imagePath] = PIXI.Texture.fromImage(imagePath);\n          return texture;\n        };\n      })();\n      /***/\n\n    }\n    /******/\n    ])\n  );\n});"],"sourceRoot":""}